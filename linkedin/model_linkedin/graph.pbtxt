node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/cond/Switch"
  op: "Switch"
  input: "global_step/IsVariableInitialized"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_t"
  op: "Identity"
  input: "global_step/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_f"
  op: "Identity"
  input: "global_step/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/pred_id"
  op: "Identity"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read"
  op: "Identity"
  input: "global_step/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read/Switch"
  op: "RefSwitch"
  input: "global_step"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Switch_1"
  op: "Switch"
  input: "global_step/Initializer/zeros"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Merge"
  op: "Merge"
  input: "global_step/cond/Switch_1"
  input: "global_step/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/add"
  op: "Add"
  input: "global_step/cond/Merge"
  input: "global_step/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "filenames"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "/memverge/home/songjue/data/tmp/sparse.csv"
      }
    }
  }
}
node {
  name: "compression_type"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "buffer_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 10000
      }
    }
  }
}
node {
  name: "count"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "batch_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 26
      }
    }
  }
}
node {
  name: "drop_remainder"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "buffer_size_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1000
      }
    }
  }
}
node {
  name: "IteratorV2"
  op: "IteratorV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 26
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: 26
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: 26
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: 26
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: 26
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: 26
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "TextLineDataset"
  op: "TextLineDataset"
  input: "filenames"
  input: "compression_type"
  input: "buffer_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "SkipDataset"
  op: "SkipDataset"
  input: "TextLineDataset"
  input: "count"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_STRING
      }
    }
  }
}
node {
  name: "BatchDatasetV2"
  op: "BatchDatasetV2"
  input: "SkipDataset"
  input: "batch_size"
  input: "drop_remainder"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_STRING
      }
    }
  }
}
node {
  name: "MapDataset"
  op: "MapDataset"
  input: "BatchDatasetV2"
  attr {
    key: "Targuments"
    value {
      list {
      }
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "f"
    value {
      func {
        name: "Dataset_map_parse_one_batch_26"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 26
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: 26
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: 26
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: 26
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: 26
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: 26
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
      }
    }
  }
  attr {
    key: "use_inter_op_parallelism"
    value {
      b: true
    }
  }
}
node {
  name: "PrefetchDataset"
  op: "PrefetchDataset"
  input: "MapDataset"
  input: "buffer_size_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 26
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: 26
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: 26
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: 26
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: 26
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: 26
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
      }
    }
  }
}
node {
  name: "ModelDataset"
  op: "ModelDataset"
  input: "PrefetchDataset"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 26
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: 26
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: 26
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: 26
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: 26
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: 26
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
      }
    }
  }
}
node {
  name: "MakeIterator"
  op: "MakeIterator"
  input: "ModelDataset"
  input: "IteratorV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorV2"
      }
    }
  }
}
node {
  name: "IteratorToStringHandle"
  op: "IteratorToStringHandle"
  input: "IteratorV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IteratorGetNext"
  op: "IteratorGetNext"
  input: "IteratorV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 26
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: 26
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: 26
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: 26
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: 26
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: 26
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 26
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: 26
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: 26
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: 26
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: 26
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: 26
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/to_sparse_input/ignore_value/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/to_sparse_input/NotEqual"
  op: "NotEqual"
  input: "IteratorGetNext"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/to_sparse_input/ignore_value/x"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 26
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/to_sparse_input/indices"
  op: "Where"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/to_sparse_input/NotEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/to_sparse_input/values"
  op: "GatherNd"
  input: "IteratorGetNext"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/to_sparse_input/indices"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/to_sparse_input/dense_shape"
  op: "Shape"
  input: "IteratorGetNext"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/lookup"
  op: "StringToHashBucketFast"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/to_sparse_input/values"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "num_buckets"
    value {
      i: 3000
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\270\013\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3535533845424652
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0/Initializer/truncated_normal/TruncatedNormal"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0/Initializer/truncated_normal"
  op: "Add"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0/Initializer/truncated_normal/mul"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3000
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0/Assign"
  op: "Assign"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0/read"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Slice/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Slice/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Slice"
  op: "Slice"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/to_sparse_input/dense_shape"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Slice/begin"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Prod"
  op: "Prod"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Slice"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/GatherV2/indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/GatherV2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/GatherV2"
  op: "GatherV2"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/to_sparse_input/dense_shape"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/GatherV2/indices"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Cast/x"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Prod"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/GatherV2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/SparseReshape"
  op: "SparseReshape"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/to_sparse_input/indices"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/to_sparse_input/dense_shape"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Cast/x"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/SparseReshape/Identity"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/lookup"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/GreaterEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/GreaterEqual"
  op: "GreaterEqual"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/SparseReshape/Identity"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Where"
  op: "Where"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/GreaterEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Where"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/GatherV2_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/GatherV2_1"
  op: "GatherV2"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/SparseReshape"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/GatherV2_1/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/GatherV2_2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/GatherV2_2"
  op: "GatherV2"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/SparseReshape/Identity"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/GatherV2_2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Identity"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/SparseReshape:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/SparseFillEmptyRows/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows"
  op: "SparseFillEmptyRows"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/GatherV2_1"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/GatherV2_2"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Identity"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/SparseFillEmptyRows/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse/strided_slice"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse/Unique"
  op: "Unique"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_idx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse/embedding_lookup/axis"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse/embedding_lookup"
  op: "GatherV2"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0/read"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse/Unique"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse/embedding_lookup/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse/embedding_lookup/Identity"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse/embedding_lookup"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse"
  op: "SparseSegmentMean"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse/embedding_lookup/Identity"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse/Unique:1"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Reshape_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Reshape_1"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows:2"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Shape"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/stack/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/stack"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/stack/0"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/strided_slice"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Tile"
  op: "Tile"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Reshape_1"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/stack"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/zeros_like"
  op: "ZerosLike"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights"
  op: "Select"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Tile"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/zeros_like"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Cast_1"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/to_sparse_input/dense_shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Slice_1/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Slice_1/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Slice_1"
  op: "Slice"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Cast_1"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Slice_1/begin"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Shape_1"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Slice_2/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Slice_2/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Slice_2"
  op: "Slice"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Shape_1"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Slice_2/begin"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Slice_2/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/concat"
  op: "ConcatV2"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Slice_1"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Slice_2"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Reshape_2"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/Shape"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Reshape_2"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/to_sparse_input/ignore_value/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/to_sparse_input/NotEqual"
  op: "NotEqual"
  input: "IteratorGetNext:1"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/to_sparse_input/ignore_value/x"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 26
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/to_sparse_input/indices"
  op: "Where"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/to_sparse_input/NotEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/to_sparse_input/values"
  op: "GatherNd"
  input: "IteratorGetNext:1"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/to_sparse_input/indices"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/to_sparse_input/dense_shape"
  op: "Shape"
  input: "IteratorGetNext:1"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/lookup"
  op: "StringToHashBucketFast"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/to_sparse_input/values"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "num_buckets"
    value {
      i: 3000
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\270\013\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3535533845424652
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0/Initializer/truncated_normal/TruncatedNormal"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0/Initializer/truncated_normal"
  op: "Add"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0/Initializer/truncated_normal/mul"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3000
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0/Assign"
  op: "Assign"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0/read"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Slice/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Slice/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Slice"
  op: "Slice"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/to_sparse_input/dense_shape"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Slice/begin"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Prod"
  op: "Prod"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Slice"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/GatherV2/indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/GatherV2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/GatherV2"
  op: "GatherV2"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/to_sparse_input/dense_shape"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/GatherV2/indices"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Cast/x"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Prod"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/GatherV2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/SparseReshape"
  op: "SparseReshape"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/to_sparse_input/indices"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/to_sparse_input/dense_shape"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Cast/x"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/SparseReshape/Identity"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/lookup"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/GreaterEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/GreaterEqual"
  op: "GreaterEqual"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/SparseReshape/Identity"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Where"
  op: "Where"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/GreaterEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Where"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/GatherV2_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/GatherV2_1"
  op: "GatherV2"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/SparseReshape"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/GatherV2_1/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/GatherV2_2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/GatherV2_2"
  op: "GatherV2"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/SparseReshape/Identity"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/GatherV2_2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Identity"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/SparseReshape:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/SparseFillEmptyRows/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows"
  op: "SparseFillEmptyRows"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/GatherV2_1"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/GatherV2_2"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Identity"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/SparseFillEmptyRows/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse/strided_slice"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse/Unique"
  op: "Unique"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_idx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse/embedding_lookup/axis"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse/embedding_lookup"
  op: "GatherV2"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0/read"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse/Unique"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse/embedding_lookup/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse/embedding_lookup/Identity"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse/embedding_lookup"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse"
  op: "SparseSegmentMean"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse/embedding_lookup/Identity"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse/Unique:1"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Reshape_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Reshape_1"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows:2"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Shape"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/stack/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/stack"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/stack/0"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/strided_slice"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Tile"
  op: "Tile"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Reshape_1"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/stack"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/zeros_like"
  op: "ZerosLike"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights"
  op: "Select"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Tile"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/zeros_like"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Cast_1"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/to_sparse_input/dense_shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Slice_1/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Slice_1/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Slice_1"
  op: "Slice"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Cast_1"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Slice_1/begin"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Shape_1"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Slice_2/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Slice_2/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Slice_2"
  op: "Slice"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Shape_1"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Slice_2/begin"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Slice_2/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/concat"
  op: "ConcatV2"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Slice_1"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Slice_2"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Reshape_2"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/Shape"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Reshape_2"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/to_sparse_input/ignore_value/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/to_sparse_input/NotEqual"
  op: "NotEqual"
  input: "IteratorGetNext:2"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/to_sparse_input/ignore_value/x"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 26
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/to_sparse_input/indices"
  op: "Where"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/to_sparse_input/NotEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/to_sparse_input/values"
  op: "GatherNd"
  input: "IteratorGetNext:2"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/to_sparse_input/indices"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/to_sparse_input/dense_shape"
  op: "Shape"
  input: "IteratorGetNext:2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/lookup"
  op: "StringToHashBucketFast"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/to_sparse_input/values"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "num_buckets"
    value {
      i: 3000
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\270\013\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3535533845424652
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0/Initializer/truncated_normal/TruncatedNormal"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0/Initializer/truncated_normal"
  op: "Add"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0/Initializer/truncated_normal/mul"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3000
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0/Assign"
  op: "Assign"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0/read"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Slice/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Slice/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Slice"
  op: "Slice"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/to_sparse_input/dense_shape"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Slice/begin"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Prod"
  op: "Prod"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Slice"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/GatherV2/indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/GatherV2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/GatherV2"
  op: "GatherV2"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/to_sparse_input/dense_shape"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/GatherV2/indices"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Cast/x"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Prod"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/GatherV2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/SparseReshape"
  op: "SparseReshape"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/to_sparse_input/indices"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/to_sparse_input/dense_shape"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Cast/x"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/SparseReshape/Identity"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/lookup"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/GreaterEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/GreaterEqual"
  op: "GreaterEqual"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/SparseReshape/Identity"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Where"
  op: "Where"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/GreaterEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Where"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/GatherV2_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/GatherV2_1"
  op: "GatherV2"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/SparseReshape"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/GatherV2_1/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/GatherV2_2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/GatherV2_2"
  op: "GatherV2"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/SparseReshape/Identity"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/GatherV2_2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Identity"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/SparseReshape:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/SparseFillEmptyRows/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows"
  op: "SparseFillEmptyRows"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/GatherV2_1"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/GatherV2_2"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Identity"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/SparseFillEmptyRows/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse/strided_slice"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse/Unique"
  op: "Unique"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_idx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse/embedding_lookup/axis"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse/embedding_lookup"
  op: "GatherV2"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0/read"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse/Unique"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse/embedding_lookup/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse/embedding_lookup/Identity"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse/embedding_lookup"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse"
  op: "SparseSegmentMean"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse/embedding_lookup/Identity"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse/Unique:1"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Reshape_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Reshape_1"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows:2"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Shape"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/stack/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/stack"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/stack/0"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/strided_slice"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Tile"
  op: "Tile"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Reshape_1"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/stack"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/zeros_like"
  op: "ZerosLike"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights"
  op: "Select"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Tile"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/zeros_like"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Cast_1"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/to_sparse_input/dense_shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Slice_1/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Slice_1/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Slice_1"
  op: "Slice"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Cast_1"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Slice_1/begin"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Shape_1"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Slice_2/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Slice_2/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Slice_2"
  op: "Slice"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Shape_1"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Slice_2/begin"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Slice_2/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/concat"
  op: "ConcatV2"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Slice_1"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Slice_2"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Reshape_2"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/Shape"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Reshape_2"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/to_sparse_input/ignore_value/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/to_sparse_input/NotEqual"
  op: "NotEqual"
  input: "IteratorGetNext:3"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/to_sparse_input/ignore_value/x"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 26
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/to_sparse_input/indices"
  op: "Where"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/to_sparse_input/NotEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/to_sparse_input/values"
  op: "GatherNd"
  input: "IteratorGetNext:3"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/to_sparse_input/indices"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/to_sparse_input/dense_shape"
  op: "Shape"
  input: "IteratorGetNext:3"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/lookup"
  op: "StringToHashBucketFast"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/to_sparse_input/values"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "num_buckets"
    value {
      i: 3000
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\270\013\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3535533845424652
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0/Initializer/truncated_normal/TruncatedNormal"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0/Initializer/truncated_normal"
  op: "Add"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0/Initializer/truncated_normal/mul"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3000
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0/Assign"
  op: "Assign"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0/read"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Slice/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Slice/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Slice"
  op: "Slice"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/to_sparse_input/dense_shape"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Slice/begin"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Prod"
  op: "Prod"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Slice"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/GatherV2/indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/GatherV2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/GatherV2"
  op: "GatherV2"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/to_sparse_input/dense_shape"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/GatherV2/indices"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Cast/x"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Prod"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/GatherV2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/SparseReshape"
  op: "SparseReshape"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/to_sparse_input/indices"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/to_sparse_input/dense_shape"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Cast/x"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/SparseReshape/Identity"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/lookup"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/GreaterEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/GreaterEqual"
  op: "GreaterEqual"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/SparseReshape/Identity"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Where"
  op: "Where"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/GreaterEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Where"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/GatherV2_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/GatherV2_1"
  op: "GatherV2"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/SparseReshape"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/GatherV2_1/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/GatherV2_2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/GatherV2_2"
  op: "GatherV2"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/SparseReshape/Identity"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/GatherV2_2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Identity"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/SparseReshape:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/SparseFillEmptyRows/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows"
  op: "SparseFillEmptyRows"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/GatherV2_1"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/GatherV2_2"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Identity"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/SparseFillEmptyRows/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse/strided_slice"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse/Unique"
  op: "Unique"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_idx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse/embedding_lookup/axis"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse/embedding_lookup"
  op: "GatherV2"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0/read"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse/Unique"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse/embedding_lookup/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse/embedding_lookup/Identity"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse/embedding_lookup"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse"
  op: "SparseSegmentMean"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse/embedding_lookup/Identity"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse/Unique:1"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Reshape_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Reshape_1"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows:2"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Shape"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/stack/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/stack"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/stack/0"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/strided_slice"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Tile"
  op: "Tile"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Reshape_1"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/stack"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/zeros_like"
  op: "ZerosLike"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights"
  op: "Select"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Tile"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/zeros_like"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Cast_1"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/to_sparse_input/dense_shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Slice_1/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Slice_1/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Slice_1"
  op: "Slice"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Cast_1"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Slice_1/begin"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Shape_1"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Slice_2/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Slice_2/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Slice_2"
  op: "Slice"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Shape_1"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Slice_2/begin"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Slice_2/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/concat"
  op: "ConcatV2"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Slice_1"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Slice_2"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Reshape_2"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/Shape"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Reshape_2"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/to_sparse_input/ignore_value/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/to_sparse_input/NotEqual"
  op: "NotEqual"
  input: "IteratorGetNext:4"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/to_sparse_input/ignore_value/x"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 26
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/to_sparse_input/indices"
  op: "Where"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/to_sparse_input/NotEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/to_sparse_input/values"
  op: "GatherNd"
  input: "IteratorGetNext:4"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/to_sparse_input/indices"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/to_sparse_input/dense_shape"
  op: "Shape"
  input: "IteratorGetNext:4"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/lookup"
  op: "StringToHashBucketFast"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/to_sparse_input/values"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "num_buckets"
    value {
      i: 3000
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\270\013\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3535533845424652
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0/Initializer/truncated_normal/TruncatedNormal"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0/Initializer/truncated_normal"
  op: "Add"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0/Initializer/truncated_normal/mul"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3000
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0/Assign"
  op: "Assign"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0/read"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Slice/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Slice/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Slice"
  op: "Slice"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/to_sparse_input/dense_shape"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Slice/begin"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Prod"
  op: "Prod"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Slice"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/GatherV2/indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/GatherV2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/GatherV2"
  op: "GatherV2"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/to_sparse_input/dense_shape"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/GatherV2/indices"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Cast/x"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Prod"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/GatherV2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/SparseReshape"
  op: "SparseReshape"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/to_sparse_input/indices"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/to_sparse_input/dense_shape"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Cast/x"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/SparseReshape/Identity"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/lookup"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/GreaterEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/GreaterEqual"
  op: "GreaterEqual"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/SparseReshape/Identity"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Where"
  op: "Where"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/GreaterEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Where"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/GatherV2_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/GatherV2_1"
  op: "GatherV2"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/SparseReshape"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/GatherV2_1/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/GatherV2_2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/GatherV2_2"
  op: "GatherV2"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/SparseReshape/Identity"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/GatherV2_2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Identity"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/SparseReshape:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/SparseFillEmptyRows/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows"
  op: "SparseFillEmptyRows"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/GatherV2_1"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/GatherV2_2"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Identity"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/SparseFillEmptyRows/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse/strided_slice"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse/Unique"
  op: "Unique"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_idx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse/embedding_lookup/axis"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse/embedding_lookup"
  op: "GatherV2"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0/read"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse/Unique"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse/embedding_lookup/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse/embedding_lookup/Identity"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse/embedding_lookup"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse"
  op: "SparseSegmentMean"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse/embedding_lookup/Identity"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse/Unique:1"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Reshape_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Reshape_1"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows:2"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Shape"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/stack/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/stack"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/stack/0"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/strided_slice"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Tile"
  op: "Tile"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Reshape_1"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/stack"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/zeros_like"
  op: "ZerosLike"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights"
  op: "Select"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Tile"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/zeros_like"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Cast_1"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/to_sparse_input/dense_shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Slice_1/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Slice_1/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Slice_1"
  op: "Slice"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Cast_1"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Slice_1/begin"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Shape_1"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Slice_2/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Slice_2/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Slice_2"
  op: "Slice"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Shape_1"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Slice_2/begin"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Slice_2/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/concat"
  op: "ConcatV2"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Slice_1"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Slice_2"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Reshape_2"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/Shape"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Reshape_2"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concat"
  op: "ConcatV2"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/concat/axis"
  attr {
    key: "N"
    value {
      i: 5
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.18898223340511322
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.18898223340511322
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 40
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_0/bias/part_0"
  input: "dnn/hiddenlayer_0/bias/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel"
  op: "Identity"
  input: "dnn/hiddenlayer_0/kernel/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/MatMul"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_layer/concat"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias"
  op: "Identity"
  input: "dnn/hiddenlayer_0/bias/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_0/MatMul"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/Relu"
  op: "Relu"
  input: "dnn/hiddenlayer_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Size"
  op: "Size"
  input: "dnn/hiddenlayer_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/zero_fraction/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/LessEqual"
  op: "LessEqual"
  input: "dnn/zero_fraction/Size"
  input: "dnn/zero_fraction/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Switch"
  op: "Switch"
  input: "dnn/zero_fraction/LessEqual"
  input: "dnn/zero_fraction/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/switch_t"
  op: "Identity"
  input: "dnn/zero_fraction/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/switch_f"
  op: "Identity"
  input: "dnn/zero_fraction/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/pred_id"
  op: "Identity"
  input: "dnn/zero_fraction/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero/zeros"
  op: "Const"
  input: "^dnn/zero_fraction/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero/NotEqual"
  op: "NotEqual"
  input: "dnn/zero_fraction/cond/count_nonzero/NotEqual/Switch:1"
  input: "dnn/zero_fraction/cond/count_nonzero/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero/NotEqual/Switch"
  op: "Switch"
  input: "dnn/hiddenlayer_0/Relu"
  input: "dnn/zero_fraction/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero/Cast"
  op: "Cast"
  input: "dnn/zero_fraction/cond/count_nonzero/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero/Const"
  op: "Const"
  input: "^dnn/zero_fraction/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero/nonzero_count"
  op: "Sum"
  input: "dnn/zero_fraction/cond/count_nonzero/Cast"
  input: "dnn/zero_fraction/cond/count_nonzero/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Cast"
  op: "Cast"
  input: "dnn/zero_fraction/cond/count_nonzero/nonzero_count"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero_1/zeros"
  op: "Const"
  input: "^dnn/zero_fraction/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero_1/NotEqual"
  op: "NotEqual"
  input: "dnn/zero_fraction/cond/count_nonzero_1/NotEqual/Switch"
  input: "dnn/zero_fraction/cond/count_nonzero_1/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero_1/NotEqual/Switch"
  op: "Switch"
  input: "dnn/hiddenlayer_0/Relu"
  input: "dnn/zero_fraction/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero_1/Cast"
  op: "Cast"
  input: "dnn/zero_fraction/cond/count_nonzero_1/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero_1/Const"
  op: "Const"
  input: "^dnn/zero_fraction/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero_1/nonzero_count"
  op: "Sum"
  input: "dnn/zero_fraction/cond/count_nonzero_1/Cast"
  input: "dnn/zero_fraction/cond/count_nonzero_1/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Merge"
  op: "Merge"
  input: "dnn/zero_fraction/cond/count_nonzero_1/nonzero_count"
  input: "dnn/zero_fraction/cond/Cast"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/sub"
  op: "Sub"
  input: "dnn/zero_fraction/Size"
  input: "dnn/zero_fraction/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "dnn/zero_fraction/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "dnn/zero_fraction/counts_to_fraction/Cast"
  input: "dnn/zero_fraction/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/fraction"
  op: "Identity"
  input: "dnn/zero_fraction/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction/fraction"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_0/activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/activation"
  op: "HistogramSummary"
  input: "dnn/dnn/hiddenlayer_0/activation/tag"
  input: "dnn/hiddenlayer_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1767766922712326
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1767766922712326
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_1/bias/part_0"
  input: "dnn/hiddenlayer_1/bias/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel"
  op: "Identity"
  input: "dnn/hiddenlayer_1/kernel/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/Relu"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias"
  op: "Identity"
  input: "dnn/hiddenlayer_1/bias/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_1/MatMul"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/Relu"
  op: "Relu"
  input: "dnn/hiddenlayer_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Size"
  op: "Size"
  input: "dnn/hiddenlayer_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/zero_fraction_1/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/LessEqual"
  op: "LessEqual"
  input: "dnn/zero_fraction_1/Size"
  input: "dnn/zero_fraction_1/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Switch"
  op: "Switch"
  input: "dnn/zero_fraction_1/LessEqual"
  input: "dnn/zero_fraction_1/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/switch_t"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/switch_f"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/pred_id"
  op: "Identity"
  input: "dnn/zero_fraction_1/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero/zeros"
  op: "Const"
  input: "^dnn/zero_fraction_1/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero/NotEqual"
  op: "NotEqual"
  input: "dnn/zero_fraction_1/cond/count_nonzero/NotEqual/Switch:1"
  input: "dnn/zero_fraction_1/cond/count_nonzero/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero/NotEqual/Switch"
  op: "Switch"
  input: "dnn/hiddenlayer_1/Relu"
  input: "dnn/zero_fraction_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_1/cond/count_nonzero/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero/Const"
  op: "Const"
  input: "^dnn/zero_fraction_1/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero/nonzero_count"
  op: "Sum"
  input: "dnn/zero_fraction_1/cond/count_nonzero/Cast"
  input: "dnn/zero_fraction_1/cond/count_nonzero/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_1/cond/count_nonzero/nonzero_count"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero_1/zeros"
  op: "Const"
  input: "^dnn/zero_fraction_1/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero_1/NotEqual"
  op: "NotEqual"
  input: "dnn/zero_fraction_1/cond/count_nonzero_1/NotEqual/Switch"
  input: "dnn/zero_fraction_1/cond/count_nonzero_1/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero_1/NotEqual/Switch"
  op: "Switch"
  input: "dnn/hiddenlayer_1/Relu"
  input: "dnn/zero_fraction_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero_1/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_1/cond/count_nonzero_1/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero_1/Const"
  op: "Const"
  input: "^dnn/zero_fraction_1/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero_1/nonzero_count"
  op: "Sum"
  input: "dnn/zero_fraction_1/cond/count_nonzero_1/Cast"
  input: "dnn/zero_fraction_1/cond/count_nonzero_1/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Merge"
  op: "Merge"
  input: "dnn/zero_fraction_1/cond/count_nonzero_1/nonzero_count"
  input: "dnn/zero_fraction_1/cond/Cast"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/sub"
  op: "Sub"
  input: "dnn/zero_fraction_1/Size"
  input: "dnn/zero_fraction_1/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_1/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "dnn/zero_fraction_1/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "dnn/zero_fraction_1/counts_to_fraction/Cast"
  input: "dnn/zero_fraction_1/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/fraction"
  op: "Identity"
  input: "dnn/zero_fraction_1/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_1/fraction"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_1/activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/activation"
  op: "HistogramSummary"
  input: "dnn/dnn/hiddenlayer_1/activation/tag"
  input: "dnn/hiddenlayer_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.25
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.25
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_2/kernel/part_0"
  input: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_2/kernel/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/bias/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/bias/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/bias/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_2/bias/part_0"
  input: "dnn/hiddenlayer_2/bias/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/bias/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_2/bias/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel"
  op: "Identity"
  input: "dnn/hiddenlayer_2/kernel/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_1/Relu"
  input: "dnn/hiddenlayer_2/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/bias"
  op: "Identity"
  input: "dnn/hiddenlayer_2/bias/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_2/MatMul"
  input: "dnn/hiddenlayer_2/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/Relu"
  op: "Relu"
  input: "dnn/hiddenlayer_2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/Size"
  op: "Size"
  input: "dnn/hiddenlayer_2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/zero_fraction_2/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/LessEqual"
  op: "LessEqual"
  input: "dnn/zero_fraction_2/Size"
  input: "dnn/zero_fraction_2/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Switch"
  op: "Switch"
  input: "dnn/zero_fraction_2/LessEqual"
  input: "dnn/zero_fraction_2/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/switch_t"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/switch_f"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/pred_id"
  op: "Identity"
  input: "dnn/zero_fraction_2/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero/zeros"
  op: "Const"
  input: "^dnn/zero_fraction_2/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero/NotEqual"
  op: "NotEqual"
  input: "dnn/zero_fraction_2/cond/count_nonzero/NotEqual/Switch:1"
  input: "dnn/zero_fraction_2/cond/count_nonzero/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero/NotEqual/Switch"
  op: "Switch"
  input: "dnn/hiddenlayer_2/Relu"
  input: "dnn/zero_fraction_2/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_2/cond/count_nonzero/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero/Const"
  op: "Const"
  input: "^dnn/zero_fraction_2/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero/nonzero_count"
  op: "Sum"
  input: "dnn/zero_fraction_2/cond/count_nonzero/Cast"
  input: "dnn/zero_fraction_2/cond/count_nonzero/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_2/cond/count_nonzero/nonzero_count"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero_1/zeros"
  op: "Const"
  input: "^dnn/zero_fraction_2/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero_1/NotEqual"
  op: "NotEqual"
  input: "dnn/zero_fraction_2/cond/count_nonzero_1/NotEqual/Switch"
  input: "dnn/zero_fraction_2/cond/count_nonzero_1/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero_1/NotEqual/Switch"
  op: "Switch"
  input: "dnn/hiddenlayer_2/Relu"
  input: "dnn/zero_fraction_2/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero_1/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_2/cond/count_nonzero_1/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero_1/Const"
  op: "Const"
  input: "^dnn/zero_fraction_2/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero_1/nonzero_count"
  op: "Sum"
  input: "dnn/zero_fraction_2/cond/count_nonzero_1/Cast"
  input: "dnn/zero_fraction_2/cond/count_nonzero_1/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Merge"
  op: "Merge"
  input: "dnn/zero_fraction_2/cond/count_nonzero_1/nonzero_count"
  input: "dnn/zero_fraction_2/cond/Cast"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/sub"
  op: "Sub"
  input: "dnn/zero_fraction_2/Size"
  input: "dnn/zero_fraction_2/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_2/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "dnn/zero_fraction_2/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "dnn/zero_fraction_2/counts_to_fraction/Cast"
  input: "dnn/zero_fraction_2/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/fraction"
  op: "Identity"
  input: "dnn/zero_fraction_2/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_2/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/hiddenlayer_2/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_2/fraction"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_2/activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/activation"
  op: "HistogramSummary"
  input: "dnn/dnn/hiddenlayer_2/activation/tag"
  input: "dnn/hiddenlayer_2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.42640143632888794
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.42640143632888794
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/max"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/mul"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Assign"
  op: "Assign"
  input: "dnn/logits/kernel/part_0"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/read"
  op: "Identity"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/logits/bias/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/Assign"
  op: "Assign"
  input: "dnn/logits/bias/part_0"
  input: "dnn/logits/bias/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/read"
  op: "Identity"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel"
  op: "Identity"
  input: "dnn/logits/kernel/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_2/Relu"
  input: "dnn/logits/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/logits/bias"
  op: "Identity"
  input: "dnn/logits/bias/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/BiasAdd"
  op: "BiasAdd"
  input: "dnn/logits/MatMul"
  input: "dnn/logits/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/zero_fraction_3/Size"
  op: "Size"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/zero_fraction_3/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/LessEqual"
  op: "LessEqual"
  input: "dnn/zero_fraction_3/Size"
  input: "dnn/zero_fraction_3/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/cond/Switch"
  op: "Switch"
  input: "dnn/zero_fraction_3/LessEqual"
  input: "dnn/zero_fraction_3/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/cond/switch_t"
  op: "Identity"
  input: "dnn/zero_fraction_3/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/cond/switch_f"
  op: "Identity"
  input: "dnn/zero_fraction_3/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/cond/pred_id"
  op: "Identity"
  input: "dnn/zero_fraction_3/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/cond/count_nonzero/zeros"
  op: "Const"
  input: "^dnn/zero_fraction_3/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/cond/count_nonzero/NotEqual"
  op: "NotEqual"
  input: "dnn/zero_fraction_3/cond/count_nonzero/NotEqual/Switch:1"
  input: "dnn/zero_fraction_3/cond/count_nonzero/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/cond/count_nonzero/NotEqual/Switch"
  op: "Switch"
  input: "dnn/logits/BiasAdd"
  input: "dnn/zero_fraction_3/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/BiasAdd"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/cond/count_nonzero/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_3/cond/count_nonzero/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/cond/count_nonzero/Const"
  op: "Const"
  input: "^dnn/zero_fraction_3/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/cond/count_nonzero/nonzero_count"
  op: "Sum"
  input: "dnn/zero_fraction_3/cond/count_nonzero/Cast"
  input: "dnn/zero_fraction_3/cond/count_nonzero/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/zero_fraction_3/cond/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_3/cond/count_nonzero/nonzero_count"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/cond/count_nonzero_1/zeros"
  op: "Const"
  input: "^dnn/zero_fraction_3/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/cond/count_nonzero_1/NotEqual"
  op: "NotEqual"
  input: "dnn/zero_fraction_3/cond/count_nonzero_1/NotEqual/Switch"
  input: "dnn/zero_fraction_3/cond/count_nonzero_1/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/cond/count_nonzero_1/NotEqual/Switch"
  op: "Switch"
  input: "dnn/logits/BiasAdd"
  input: "dnn/zero_fraction_3/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/BiasAdd"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/cond/count_nonzero_1/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_3/cond/count_nonzero_1/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/cond/count_nonzero_1/Const"
  op: "Const"
  input: "^dnn/zero_fraction_3/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/cond/count_nonzero_1/nonzero_count"
  op: "Sum"
  input: "dnn/zero_fraction_3/cond/count_nonzero_1/Cast"
  input: "dnn/zero_fraction_3/cond/count_nonzero_1/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/zero_fraction_3/cond/Merge"
  op: "Merge"
  input: "dnn/zero_fraction_3/cond/count_nonzero_1/nonzero_count"
  input: "dnn/zero_fraction_3/cond/Cast"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/counts_to_fraction/sub"
  op: "Sub"
  input: "dnn/zero_fraction_3/Size"
  input: "dnn/zero_fraction_3/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/counts_to_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_3/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "dnn/zero_fraction_3/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "dnn/zero_fraction_3/counts_to_fraction/Cast"
  input: "dnn/zero_fraction_3/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/fraction"
  op: "Identity"
  input: "dnn/zero_fraction_3/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/logits/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/logits/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_3/fraction"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/logits/activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/activation"
  op: "HistogramSummary"
  input: "dnn/dnn/logits/activation/tag"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/w1/weights/part_0/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/w1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\270\013\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear_model/w1/weights/part_0/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/w1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/linear_model/w1/weights/part_0/Initializer/zeros"
  op: "Fill"
  input: "linear/linear_model/w1/weights/part_0/Initializer/zeros/shape_as_tensor"
  input: "linear/linear_model/w1/weights/part_0/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/w1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "linear/linear_model/w1/weights/part_0"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/w1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3000
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "linear/linear_model/w1/weights/part_0"
    }
  }
}
node {
  name: "linear/linear_model/w1/weights/part_0/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/w1/weights/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/w1/weights/part_0/Assign"
  op: "AssignVariableOp"
  input: "linear/linear_model/w1/weights/part_0"
  input: "linear/linear_model/w1/weights/part_0/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/w1/weights/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/w1/weights/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/w1/weights/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/w1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/to_sparse_input/ignore_value/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/to_sparse_input/NotEqual"
  op: "NotEqual"
  input: "IteratorGetNext:5"
  input: "linear/linear_model_1/linear_model/w1/to_sparse_input/ignore_value/x"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 26
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/to_sparse_input/indices"
  op: "Where"
  input: "linear/linear_model_1/linear_model/w1/to_sparse_input/NotEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/to_sparse_input/values"
  op: "GatherNd"
  input: "IteratorGetNext:5"
  input: "linear/linear_model_1/linear_model/w1/to_sparse_input/indices"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/to_sparse_input/dense_shape"
  op: "Shape"
  input: "IteratorGetNext:5"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/lookup"
  op: "StringToHashBucketFast"
  input: "linear/linear_model_1/linear_model/w1/to_sparse_input/values"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "num_buckets"
    value {
      i: 3000
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/Shape/Cast"
  op: "Cast"
  input: "linear/linear_model_1/linear_model/w1/to_sparse_input/dense_shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/strided_slice"
  op: "StridedSlice"
  input: "linear/linear_model_1/linear_model/w1/Shape/Cast"
  input: "linear/linear_model_1/linear_model/w1/strided_slice/stack"
  input: "linear/linear_model_1/linear_model/w1/strided_slice/stack_1"
  input: "linear/linear_model_1/linear_model/w1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/Cast/x/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/Cast/x"
  op: "Pack"
  input: "linear/linear_model_1/linear_model/w1/strided_slice"
  input: "linear/linear_model_1/linear_model/w1/Cast/x/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/Cast"
  op: "Cast"
  input: "linear/linear_model_1/linear_model/w1/Cast/x"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/SparseReshape"
  op: "SparseReshape"
  input: "linear/linear_model_1/linear_model/w1/to_sparse_input/indices"
  input: "linear/linear_model_1/linear_model/w1/to_sparse_input/dense_shape"
  input: "linear/linear_model_1/linear_model/w1/Cast"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/SparseReshape/Identity"
  op: "Identity"
  input: "linear/linear_model_1/linear_model/w1/lookup"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/w1/weights/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/Slice/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/Slice/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/Slice"
  op: "Slice"
  input: "linear/linear_model_1/linear_model/w1/SparseReshape:1"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/Slice/begin"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/Prod"
  op: "Prod"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/Slice"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/GatherV2/indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/GatherV2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/GatherV2"
  op: "GatherV2"
  input: "linear/linear_model_1/linear_model/w1/SparseReshape:1"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/GatherV2/indices"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/Cast/x"
  op: "Pack"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/Prod"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/GatherV2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/SparseReshape"
  op: "SparseReshape"
  input: "linear/linear_model_1/linear_model/w1/SparseReshape"
  input: "linear/linear_model_1/linear_model/w1/SparseReshape:1"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/Cast/x"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/SparseReshape/Identity"
  op: "Identity"
  input: "linear/linear_model_1/linear_model/w1/SparseReshape/Identity"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/GreaterEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/GreaterEqual"
  op: "GreaterEqual"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/SparseReshape/Identity"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/Where"
  op: "Where"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/GreaterEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/Reshape"
  op: "Reshape"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/Where"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/GatherV2_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/GatherV2_1"
  op: "GatherV2"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/SparseReshape"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/Reshape"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/GatherV2_1/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/GatherV2_2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/GatherV2_2"
  op: "GatherV2"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/SparseReshape/Identity"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/Reshape"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/GatherV2_2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/Identity"
  op: "Identity"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/SparseReshape:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/SparseFillEmptyRows/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/SparseFillEmptyRows/SparseFillEmptyRows"
  op: "SparseFillEmptyRows"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/GatherV2_1"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/GatherV2_2"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/Identity"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/SparseFillEmptyRows/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse/strided_slice"
  op: "StridedSlice"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/SparseFillEmptyRows/SparseFillEmptyRows"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse/strided_slice/stack"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse/strided_slice/stack_1"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse/Cast"
  op: "Cast"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse/strided_slice"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse/Unique"
  op: "Unique"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/SparseFillEmptyRows/SparseFillEmptyRows:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_idx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse/embedding_lookup/axis"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model_1/linear_model/w1/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse/embedding_lookup"
  op: "GatherV2"
  input: "linear/linear_model_1/linear_model/w1/ReadVariableOp"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse/Unique"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse/embedding_lookup/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model_1/linear_model/w1/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse/embedding_lookup/Identity"
  op: "Identity"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse/embedding_lookup"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse"
  op: "SparseSegmentSum"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse/embedding_lookup/Identity"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse/Unique:1"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/Reshape_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/Reshape_1"
  op: "Reshape"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/SparseFillEmptyRows/SparseFillEmptyRows:2"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/Shape"
  op: "Shape"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/strided_slice"
  op: "StridedSlice"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/Shape"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/strided_slice/stack"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/strided_slice/stack_1"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/stack/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/stack"
  op: "Pack"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/stack/0"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/strided_slice"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/Tile"
  op: "Tile"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/Reshape_1"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/stack"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/zeros_like"
  op: "ZerosLike"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum"
  op: "Select"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/Tile"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/zeros_like"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/Cast_1"
  op: "Cast"
  input: "linear/linear_model_1/linear_model/w1/SparseReshape:1"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/Slice_1/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/Slice_1/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/Slice_1"
  op: "Slice"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/Cast_1"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/Slice_1/begin"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/Shape_1"
  op: "Shape"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/Slice_2/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/Slice_2/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/Slice_2"
  op: "Slice"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/Shape_1"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/Slice_2/begin"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/Slice_2/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/concat"
  op: "ConcatV2"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/Slice_1"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/Slice_2"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/w1/weighted_sum/Reshape_2"
  op: "Reshape"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/weighted_sum_no_bias"
  op: "Identity"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/bias_weights/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/linear_model/bias_weights/part_0"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "linear/linear_model/bias_weights/part_0"
    }
  }
}
node {
  name: "linear/linear_model/bias_weights/part_0/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/bias_weights/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/bias_weights/part_0/Assign"
  op: "AssignVariableOp"
  input: "linear/linear_model/bias_weights/part_0"
  input: "linear/linear_model/bias_weights/part_0/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/bias_weights/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/bias_weights/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/bias_weights/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/bias_weights/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/bias_weights"
  op: "Identity"
  input: "linear/linear_model/bias_weights/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model_1/linear_model/weighted_sum"
  op: "BiasAdd"
  input: "linear/linear_model_1/linear_model/weighted_sum_no_bias"
  input: "linear/linear_model/bias_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "linear/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/bias_weights/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/strided_slice"
  op: "StridedSlice"
  input: "linear/ReadVariableOp"
  input: "linear/strided_slice/stack"
  input: "linear/strided_slice/stack_1"
  input: "linear/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "linear/bias/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/bias"
      }
    }
  }
}
node {
  name: "linear/bias"
  op: "ScalarSummary"
  input: "linear/bias/tags"
  input: "linear/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/Reshape/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/w1/weights/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "linear/Reshape"
  op: "Reshape"
  input: "linear/Reshape/ReadVariableOp"
  input: "linear/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
        }
      }
    }
  }
}
node {
  name: "linear/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/concat"
  op: "Identity"
  input: "linear/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/Size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 3000
      }
    }
  }
}
node {
  name: "linear/zero_fraction/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "linear/zero_fraction/LessEqual"
  op: "LessEqual"
  input: "linear/zero_fraction/Size"
  input: "linear/zero_fraction/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/cond/Switch"
  op: "Switch"
  input: "linear/zero_fraction/LessEqual"
  input: "linear/zero_fraction/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/cond/switch_t"
  op: "Identity"
  input: "linear/zero_fraction/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/cond/switch_f"
  op: "Identity"
  input: "linear/zero_fraction/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/cond/pred_id"
  op: "Identity"
  input: "linear/zero_fraction/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/cond/count_nonzero/zeros"
  op: "Const"
  input: "^linear/zero_fraction/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/zero_fraction/cond/count_nonzero/NotEqual"
  op: "NotEqual"
  input: "linear/zero_fraction/cond/count_nonzero/NotEqual/Switch:1"
  input: "linear/zero_fraction/cond/count_nonzero/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/cond/count_nonzero/NotEqual/Switch"
  op: "Switch"
  input: "linear/concat"
  input: "linear/zero_fraction/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
        }
        shape {
          dim {
            size: 3000
          }
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/cond/count_nonzero/Cast"
  op: "Cast"
  input: "linear/zero_fraction/cond/count_nonzero/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/cond/count_nonzero/Const"
  op: "Const"
  input: "^linear/zero_fraction/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/zero_fraction/cond/count_nonzero/nonzero_count"
  op: "Sum"
  input: "linear/zero_fraction/cond/count_nonzero/Cast"
  input: "linear/zero_fraction/cond/count_nonzero/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "linear/zero_fraction/cond/Cast"
  op: "Cast"
  input: "linear/zero_fraction/cond/count_nonzero/nonzero_count"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/cond/count_nonzero_1/zeros"
  op: "Const"
  input: "^linear/zero_fraction/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/zero_fraction/cond/count_nonzero_1/NotEqual"
  op: "NotEqual"
  input: "linear/zero_fraction/cond/count_nonzero_1/NotEqual/Switch"
  input: "linear/zero_fraction/cond/count_nonzero_1/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/cond/count_nonzero_1/NotEqual/Switch"
  op: "Switch"
  input: "linear/concat"
  input: "linear/zero_fraction/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
        }
        shape {
          dim {
            size: 3000
          }
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/cond/count_nonzero_1/Cast"
  op: "Cast"
  input: "linear/zero_fraction/cond/count_nonzero_1/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/cond/count_nonzero_1/Const"
  op: "Const"
  input: "^linear/zero_fraction/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/zero_fraction/cond/count_nonzero_1/nonzero_count"
  op: "Sum"
  input: "linear/zero_fraction/cond/count_nonzero_1/Cast"
  input: "linear/zero_fraction/cond/count_nonzero_1/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "linear/zero_fraction/cond/Merge"
  op: "Merge"
  input: "linear/zero_fraction/cond/count_nonzero_1/nonzero_count"
  input: "linear/zero_fraction/cond/Cast"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/counts_to_fraction/sub"
  op: "Sub"
  input: "linear/zero_fraction/Size"
  input: "linear/zero_fraction/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/counts_to_fraction/Cast"
  op: "Cast"
  input: "linear/zero_fraction/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "linear/zero_fraction/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "linear/zero_fraction/counts_to_fraction/Cast"
  input: "linear/zero_fraction/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction/fraction"
  op: "Identity"
  input: "linear/zero_fraction/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/fraction_of_zero_weights/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/fraction_of_zero_weights"
      }
    }
  }
}
node {
  name: "linear/fraction_of_zero_weights"
  op: "ScalarSummary"
  input: "linear/fraction_of_zero_weights/tags"
  input: "linear/zero_fraction/fraction"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction_1/Size"
  op: "Size"
  input: "linear/linear_model_1/linear_model/weighted_sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "linear/zero_fraction_1/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "linear/zero_fraction_1/LessEqual"
  op: "LessEqual"
  input: "linear/zero_fraction_1/Size"
  input: "linear/zero_fraction_1/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction_1/cond/Switch"
  op: "Switch"
  input: "linear/zero_fraction_1/LessEqual"
  input: "linear/zero_fraction_1/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction_1/cond/switch_t"
  op: "Identity"
  input: "linear/zero_fraction_1/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction_1/cond/switch_f"
  op: "Identity"
  input: "linear/zero_fraction_1/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction_1/cond/pred_id"
  op: "Identity"
  input: "linear/zero_fraction_1/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction_1/cond/count_nonzero/zeros"
  op: "Const"
  input: "^linear/zero_fraction_1/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/zero_fraction_1/cond/count_nonzero/NotEqual"
  op: "NotEqual"
  input: "linear/zero_fraction_1/cond/count_nonzero/NotEqual/Switch:1"
  input: "linear/zero_fraction_1/cond/count_nonzero/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction_1/cond/count_nonzero/NotEqual/Switch"
  op: "Switch"
  input: "linear/linear_model_1/linear_model/weighted_sum"
  input: "linear/zero_fraction_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model_1/linear_model/weighted_sum"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction_1/cond/count_nonzero/Cast"
  op: "Cast"
  input: "linear/zero_fraction_1/cond/count_nonzero/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction_1/cond/count_nonzero/Const"
  op: "Const"
  input: "^linear/zero_fraction_1/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/zero_fraction_1/cond/count_nonzero/nonzero_count"
  op: "Sum"
  input: "linear/zero_fraction_1/cond/count_nonzero/Cast"
  input: "linear/zero_fraction_1/cond/count_nonzero/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "linear/zero_fraction_1/cond/Cast"
  op: "Cast"
  input: "linear/zero_fraction_1/cond/count_nonzero/nonzero_count"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction_1/cond/count_nonzero_1/zeros"
  op: "Const"
  input: "^linear/zero_fraction_1/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/zero_fraction_1/cond/count_nonzero_1/NotEqual"
  op: "NotEqual"
  input: "linear/zero_fraction_1/cond/count_nonzero_1/NotEqual/Switch"
  input: "linear/zero_fraction_1/cond/count_nonzero_1/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction_1/cond/count_nonzero_1/NotEqual/Switch"
  op: "Switch"
  input: "linear/linear_model_1/linear_model/weighted_sum"
  input: "linear/zero_fraction_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model_1/linear_model/weighted_sum"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction_1/cond/count_nonzero_1/Cast"
  op: "Cast"
  input: "linear/zero_fraction_1/cond/count_nonzero_1/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction_1/cond/count_nonzero_1/Const"
  op: "Const"
  input: "^linear/zero_fraction_1/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/zero_fraction_1/cond/count_nonzero_1/nonzero_count"
  op: "Sum"
  input: "linear/zero_fraction_1/cond/count_nonzero_1/Cast"
  input: "linear/zero_fraction_1/cond/count_nonzero_1/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "linear/zero_fraction_1/cond/Merge"
  op: "Merge"
  input: "linear/zero_fraction_1/cond/count_nonzero_1/nonzero_count"
  input: "linear/zero_fraction_1/cond/Cast"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction_1/counts_to_fraction/sub"
  op: "Sub"
  input: "linear/zero_fraction_1/Size"
  input: "linear/zero_fraction_1/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction_1/counts_to_fraction/Cast"
  op: "Cast"
  input: "linear/zero_fraction_1/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction_1/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "linear/zero_fraction_1/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction_1/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "linear/zero_fraction_1/counts_to_fraction/Cast"
  input: "linear/zero_fraction_1/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/zero_fraction_1/fraction"
  op: "Identity"
  input: "linear/zero_fraction_1/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/linear/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "linear/linear/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "linear/linear/fraction_of_zero_values/tags"
  input: "linear/zero_fraction_1/fraction"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/linear/activation"
      }
    }
  }
}
node {
  name: "linear/linear/activation"
  op: "HistogramSummary"
  input: "linear/linear/activation/tag"
  input: "linear/linear_model_1/linear_model/weighted_sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "add"
  op: "Add"
  input: "dnn/logits/BiasAdd"
  input: "linear/linear_model_1/linear_model/weighted_sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/logits/Shape"
  op: "Shape"
  input: "add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/predictions/logits/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/predictions/logits/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "head/predictions/logits/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "head/predictions/logistic"
  op: "Sigmoid"
  input: "add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/zeros_like"
  op: "ZerosLike"
  input: "add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/two_class_logits/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/predictions/two_class_logits"
  op: "ConcatV2"
  input: "head/predictions/zeros_like"
  input: "add"
  input: "head/predictions/two_class_logits/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/probabilities"
  op: "Softmax"
  input: "head/predictions/two_class_logits"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/class_ids/dimension"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/predictions/class_ids"
  op: "ArgMax"
  input: "head/predictions/two_class_logits"
  input: "head/predictions/class_ids/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "head/predictions/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/predictions/ExpandDims"
  op: "ExpandDims"
  input: "head/predictions/class_ids"
  input: "head/predictions/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/class_string_lookup/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 2
          }
        }
        string_val: "0"
        string_val: "1"
      }
    }
  }
}
node {
  name: "head/predictions/class_string_lookup/Size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/predictions/class_string_lookup/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/class_string_lookup/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/class_string_lookup/range"
  op: "Range"
  input: "head/predictions/class_string_lookup/range/start"
  input: "head/predictions/class_string_lookup/Size"
  input: "head/predictions/class_string_lookup/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/class_string_lookup/ToInt64"
  op: "Cast"
  input: "head/predictions/class_string_lookup/range"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/class_string_lookup/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "UNK"
      }
    }
  }
}
node {
  name: "head/predictions/class_string_lookup"
  op: "HashTableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "key_dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
  attr {
    key: "use_node_name_sharing"
    value {
      b: false
    }
  }
  attr {
    key: "value_dtype"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "head/predictions/class_string_lookup/table_init"
  op: "LookupTableImportV2"
  input: "head/predictions/class_string_lookup"
  input: "head/predictions/class_string_lookup/ToInt64"
  input: "head/predictions/class_string_lookup/Const"
  attr {
    key: "Tin"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "head/predictions/class_string_lookup_Lookup"
  op: "LookupTableFindV2"
  input: "head/predictions/class_string_lookup"
  input: "head/predictions/ExpandDims"
  input: "head/predictions/class_string_lookup/Const_1"
  attr {
    key: "Tin"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/labels/Shape"
  op: "Shape"
  input: "IteratorGetNext:6"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/labels/Shape_1"
  op: "Shape"
  input: "add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/labels/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/labels/assert_rank_at_least/Shape"
  op: "Shape"
  input: "IteratorGetNext:6"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/labels/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "head/labels/strided_slice/stack"
  op: "Const"
  input: "^head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/labels/strided_slice/stack_1"
  op: "Const"
  input: "^head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/labels/strided_slice/stack_2"
  op: "Const"
  input: "^head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/labels/strided_slice"
  op: "StridedSlice"
  input: "head/labels/Shape_1"
  input: "head/labels/strided_slice/stack"
  input: "head/labels/strided_slice/stack_1"
  input: "head/labels/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "head/labels/concat/values_1"
  op: "Const"
  input: "^head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/labels/concat/axis"
  op: "Const"
  input: "^head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/labels/concat"
  op: "ConcatV2"
  input: "head/labels/strided_slice"
  input: "head/labels/concat/values_1"
  input: "head/labels/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/labels/assert_equal/Equal"
  op: "Equal"
  input: "head/labels/concat"
  input: "head/labels/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/labels/assert_equal/Const"
  op: "Const"
  input: "^head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/labels/assert_equal/All"
  op: "All"
  input: "head/labels/assert_equal/Equal"
  input: "head/labels/assert_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/labels/assert_equal/Assert/Const"
  op: "Const"
  input: "^head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "head/labels/assert_equal/Assert/Const_1"
  op: "Const"
  input: "^head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "head/labels/assert_equal/Assert/Assert/data_0"
  op: "Const"
  input: "^head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "head/labels/assert_equal/Assert/Assert/data_2"
  op: "Const"
  input: "^head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "head/labels/assert_equal/Assert/Assert"
  op: "Assert"
  input: "head/labels/assert_equal/All"
  input: "head/labels/assert_equal/Assert/Assert/data_0"
  input: "head/labels/concat"
  input: "head/labels/assert_equal/Assert/Assert/data_2"
  input: "head/labels/Shape"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "head/labels"
  op: "Identity"
  input: "IteratorGetNext:6"
  input: "^head/labels/assert_equal/Assert/Assert"
  input: "^head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/class_id_lookup/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 2
          }
        }
        string_val: "0"
        string_val: "1"
      }
    }
  }
}
node {
  name: "head/class_id_lookup/Size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/class_id_lookup/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/class_id_lookup/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/class_id_lookup/range"
  op: "Range"
  input: "head/class_id_lookup/range/start"
  input: "head/class_id_lookup/Size"
  input: "head/class_id_lookup/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/class_id_lookup/ToInt64"
  op: "Cast"
  input: "head/class_id_lookup/range"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/class_id_lookup/hash_table/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "head/class_id_lookup/hash_table"
  op: "HashTableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "key_dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
  attr {
    key: "use_node_name_sharing"
    value {
      b: false
    }
  }
  attr {
    key: "value_dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "head/class_id_lookup/hash_table/table_init"
  op: "LookupTableImportV2"
  input: "head/class_id_lookup/hash_table"
  input: "head/class_id_lookup/Const"
  input: "head/class_id_lookup/ToInt64"
  attr {
    key: "Tin"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "head/hash_table_Lookup"
  op: "LookupTableFindV2"
  input: "head/class_id_lookup/hash_table"
  input: "head/labels"
  input: "head/class_id_lookup/hash_table/Const"
  attr {
    key: "Tin"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/ToFloat"
  op: "Cast"
  input: "head/hash_table_Lookup"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/assert_range/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "head/ToFloat"
  input: "head/assert_range/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/All"
  op: "All"
  input: "head/assert_range/assert_less_equal/LessEqual"
  input: "head/assert_range/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Labels must <= n_classes - 1"
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x <= y did not hold element-wise:x (head/ToFloat:0) = "
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (head/assert_range/Const:0) = "
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "head/assert_range/assert_less_equal/All"
  input: "head/assert_range/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "head/assert_range/assert_less_equal/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "head/assert_range/assert_less_equal/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "head/assert_range/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^head/assert_range/assert_less_equal/Assert/AssertGuard/switch_t"
}
node {
  name: "head/assert_range/assert_less_equal/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "head/assert_range/assert_less_equal/Assert/AssertGuard/switch_t"
  input: "^head/assert_range/assert_less_equal/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/assert_range/assert_less_equal/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^head/assert_range/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Labels must <= n_classes - 1"
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^head/assert_range/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x <= y did not hold element-wise:x (head/ToFloat:0) = "
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/data_3"
  op: "Const"
  input: "^head/assert_range/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (head/assert_range/Const:0) = "
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  input: "head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  input: "head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  input: "head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  input: "head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/data_3"
  input: "head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/Switch_2"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_FLOAT
        type: DT_STRING
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "head/assert_range/assert_less_equal/All"
  input: "head/assert_range/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/assert_range/assert_less_equal/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "head/ToFloat"
  input: "head/assert_range/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/ToFloat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/Switch_2"
  op: "Switch"
  input: "head/assert_range/Const"
  input: "head/assert_range/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/assert_range/Const"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "head/assert_range/assert_less_equal/Assert/AssertGuard/switch_f"
  input: "^head/assert_range/assert_less_equal/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/assert_range/assert_less_equal/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "head/assert_range/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  input: "head/assert_range/assert_less_equal/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "head/assert_range/assert_non_negative/Const"
  input: "head/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/All"
  op: "All"
  input: "head/assert_range/assert_non_negative/assert_less_equal/LessEqual"
  input: "head/assert_range/assert_non_negative/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Labels must >= 0"
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (head/ToFloat:0) = "
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "head/assert_range/assert_non_negative/assert_less_equal/All"
  input: "head/assert_range/assert_non_negative/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "head/assert_range/assert_non_negative/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
  input: "^head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Labels must >= 0"
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (head/ToFloat:0) = "
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  input: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  input: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  input: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  input: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "head/assert_range/assert_non_negative/assert_less_equal/All"
  input: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/assert_range/assert_non_negative/assert_less_equal/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "head/ToFloat"
  input: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/ToFloat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  input: "^head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  input: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "head/assert_range/Identity"
  op: "Identity"
  input: "head/ToFloat"
  input: "^head/assert_range/assert_less_equal/Assert/AssertGuard/Merge"
  input: "^head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/logistic_loss/zeros_like"
  op: "ZerosLike"
  input: "add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/logistic_loss/GreaterEqual"
  op: "GreaterEqual"
  input: "add"
  input: "head/logistic_loss/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/logistic_loss/Select"
  op: "Select"
  input: "head/logistic_loss/GreaterEqual"
  input: "add"
  input: "head/logistic_loss/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/logistic_loss/Neg"
  op: "Neg"
  input: "add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/logistic_loss/Select_1"
  op: "Select"
  input: "head/logistic_loss/GreaterEqual"
  input: "head/logistic_loss/Neg"
  input: "add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/logistic_loss/mul"
  op: "Mul"
  input: "add"
  input: "head/assert_range/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/logistic_loss/sub"
  op: "Sub"
  input: "head/logistic_loss/Select"
  input: "head/logistic_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/logistic_loss/Exp"
  op: "Exp"
  input: "head/logistic_loss/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/logistic_loss/Log1p"
  op: "Log1p"
  input: "head/logistic_loss/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/logistic_loss"
  op: "Add"
  input: "head/logistic_loss/sub"
  input: "head/logistic_loss/Log1p"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/weighted_loss/assert_broadcastable/weights"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/weighted_loss/assert_broadcastable/weights/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "head/weighted_loss/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/weighted_loss/assert_broadcastable/values/shape"
  op: "Shape"
  input: "head/logistic_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/weighted_loss/assert_broadcastable/values/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
}
node {
  name: "head/weighted_loss/ToFloat/x"
  op: "Const"
  input: "^head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/weighted_loss/Mul"
  op: "Mul"
  input: "head/logistic_loss"
  input: "head/weighted_loss/ToFloat/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/weighted_loss/Const"
  op: "Const"
  input: "^head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "head/weighted_loss/Sum"
  op: "Sum"
  input: "head/weighted_loss/Mul"
  input: "head/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/gradients/Fill"
  op: "Fill"
  input: "head/gradients/Shape"
  input: "head/gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients/head/weighted_loss/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "head/gradients/head/weighted_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "head/gradients/Fill"
  input: "head/gradients/head/weighted_loss/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/weighted_loss/Sum_grad/Shape"
  op: "Shape"
  input: "head/weighted_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients/head/weighted_loss/Sum_grad/Tile"
  op: "Tile"
  input: "head/gradients/head/weighted_loss/Sum_grad/Reshape"
  input: "head/gradients/head/weighted_loss/Sum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/weighted_loss/Mul_grad/Shape"
  op: "Shape"
  input: "head/logistic_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients/head/weighted_loss/Mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/weighted_loss/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "head/gradients/head/weighted_loss/Mul_grad/Shape"
  input: "head/gradients/head/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/weighted_loss/Mul_grad/Mul"
  op: "Mul"
  input: "head/gradients/head/weighted_loss/Sum_grad/Tile"
  input: "head/weighted_loss/ToFloat/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/weighted_loss/Mul_grad/Sum"
  op: "Sum"
  input: "head/gradients/head/weighted_loss/Mul_grad/Mul"
  input: "head/gradients/head/weighted_loss/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients/head/weighted_loss/Mul_grad/Reshape"
  op: "Reshape"
  input: "head/gradients/head/weighted_loss/Mul_grad/Sum"
  input: "head/gradients/head/weighted_loss/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/weighted_loss/Mul_grad/Mul_1"
  op: "Mul"
  input: "head/logistic_loss"
  input: "head/gradients/head/weighted_loss/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/weighted_loss/Mul_grad/Sum_1"
  op: "Sum"
  input: "head/gradients/head/weighted_loss/Mul_grad/Mul_1"
  input: "head/gradients/head/weighted_loss/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients/head/weighted_loss/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "head/gradients/head/weighted_loss/Mul_grad/Sum_1"
  input: "head/gradients/head/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/weighted_loss/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients/head/weighted_loss/Mul_grad/Reshape"
  input: "^head/gradients/head/weighted_loss/Mul_grad/Reshape_1"
}
node {
  name: "head/gradients/head/weighted_loss/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients/head/weighted_loss/Mul_grad/Reshape"
  input: "^head/gradients/head/weighted_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/head/weighted_loss/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/weighted_loss/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients/head/weighted_loss/Mul_grad/Reshape_1"
  input: "^head/gradients/head/weighted_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/head/weighted_loss/Mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/logistic_loss_grad/Shape"
  op: "Shape"
  input: "head/logistic_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients/head/logistic_loss_grad/Shape_1"
  op: "Shape"
  input: "head/logistic_loss/Log1p"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients/head/logistic_loss_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "head/gradients/head/logistic_loss_grad/Shape"
  input: "head/gradients/head/logistic_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/logistic_loss_grad/Sum"
  op: "Sum"
  input: "head/gradients/head/weighted_loss/Mul_grad/tuple/control_dependency"
  input: "head/gradients/head/logistic_loss_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients/head/logistic_loss_grad/Reshape"
  op: "Reshape"
  input: "head/gradients/head/logistic_loss_grad/Sum"
  input: "head/gradients/head/logistic_loss_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/logistic_loss_grad/Sum_1"
  op: "Sum"
  input: "head/gradients/head/weighted_loss/Mul_grad/tuple/control_dependency"
  input: "head/gradients/head/logistic_loss_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients/head/logistic_loss_grad/Reshape_1"
  op: "Reshape"
  input: "head/gradients/head/logistic_loss_grad/Sum_1"
  input: "head/gradients/head/logistic_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/logistic_loss_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients/head/logistic_loss_grad/Reshape"
  input: "^head/gradients/head/logistic_loss_grad/Reshape_1"
}
node {
  name: "head/gradients/head/logistic_loss_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients/head/logistic_loss_grad/Reshape"
  input: "^head/gradients/head/logistic_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/head/logistic_loss_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/logistic_loss_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients/head/logistic_loss_grad/Reshape_1"
  input: "^head/gradients/head/logistic_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/head/logistic_loss_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/logistic_loss/sub_grad/Shape"
  op: "Shape"
  input: "head/logistic_loss/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients/head/logistic_loss/sub_grad/Shape_1"
  op: "Shape"
  input: "head/logistic_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients/head/logistic_loss/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "head/gradients/head/logistic_loss/sub_grad/Shape"
  input: "head/gradients/head/logistic_loss/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/logistic_loss/sub_grad/Sum"
  op: "Sum"
  input: "head/gradients/head/logistic_loss_grad/tuple/control_dependency"
  input: "head/gradients/head/logistic_loss/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients/head/logistic_loss/sub_grad/Reshape"
  op: "Reshape"
  input: "head/gradients/head/logistic_loss/sub_grad/Sum"
  input: "head/gradients/head/logistic_loss/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/logistic_loss/sub_grad/Sum_1"
  op: "Sum"
  input: "head/gradients/head/logistic_loss_grad/tuple/control_dependency"
  input: "head/gradients/head/logistic_loss/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients/head/logistic_loss/sub_grad/Neg"
  op: "Neg"
  input: "head/gradients/head/logistic_loss/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/logistic_loss/sub_grad/Reshape_1"
  op: "Reshape"
  input: "head/gradients/head/logistic_loss/sub_grad/Neg"
  input: "head/gradients/head/logistic_loss/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/logistic_loss/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients/head/logistic_loss/sub_grad/Reshape"
  input: "^head/gradients/head/logistic_loss/sub_grad/Reshape_1"
}
node {
  name: "head/gradients/head/logistic_loss/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients/head/logistic_loss/sub_grad/Reshape"
  input: "^head/gradients/head/logistic_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/head/logistic_loss/sub_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/logistic_loss/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients/head/logistic_loss/sub_grad/Reshape_1"
  input: "^head/gradients/head/logistic_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/head/logistic_loss/sub_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/logistic_loss/Log1p_grad/add/x"
  op: "Const"
  input: "^head/gradients/head/logistic_loss_grad/tuple/control_dependency_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/gradients/head/logistic_loss/Log1p_grad/add"
  op: "Add"
  input: "head/gradients/head/logistic_loss/Log1p_grad/add/x"
  input: "head/logistic_loss/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/logistic_loss/Log1p_grad/Reciprocal"
  op: "Reciprocal"
  input: "head/gradients/head/logistic_loss/Log1p_grad/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/logistic_loss/Log1p_grad/mul"
  op: "Mul"
  input: "head/gradients/head/logistic_loss_grad/tuple/control_dependency_1"
  input: "head/gradients/head/logistic_loss/Log1p_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/logistic_loss/Select_grad/zeros_like"
  op: "ZerosLike"
  input: "add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/logistic_loss/Select_grad/Select"
  op: "Select"
  input: "head/logistic_loss/GreaterEqual"
  input: "head/gradients/head/logistic_loss/sub_grad/tuple/control_dependency"
  input: "head/gradients/head/logistic_loss/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/logistic_loss/Select_grad/Select_1"
  op: "Select"
  input: "head/logistic_loss/GreaterEqual"
  input: "head/gradients/head/logistic_loss/Select_grad/zeros_like"
  input: "head/gradients/head/logistic_loss/sub_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/logistic_loss/Select_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients/head/logistic_loss/Select_grad/Select"
  input: "^head/gradients/head/logistic_loss/Select_grad/Select_1"
}
node {
  name: "head/gradients/head/logistic_loss/Select_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients/head/logistic_loss/Select_grad/Select"
  input: "^head/gradients/head/logistic_loss/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/head/logistic_loss/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/logistic_loss/Select_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients/head/logistic_loss/Select_grad/Select_1"
  input: "^head/gradients/head/logistic_loss/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/head/logistic_loss/Select_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/logistic_loss/mul_grad/Shape"
  op: "Shape"
  input: "add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients/head/logistic_loss/mul_grad/Shape_1"
  op: "Shape"
  input: "head/assert_range/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients/head/logistic_loss/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "head/gradients/head/logistic_loss/mul_grad/Shape"
  input: "head/gradients/head/logistic_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/logistic_loss/mul_grad/Mul"
  op: "Mul"
  input: "head/gradients/head/logistic_loss/sub_grad/tuple/control_dependency_1"
  input: "head/assert_range/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/logistic_loss/mul_grad/Sum"
  op: "Sum"
  input: "head/gradients/head/logistic_loss/mul_grad/Mul"
  input: "head/gradients/head/logistic_loss/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients/head/logistic_loss/mul_grad/Reshape"
  op: "Reshape"
  input: "head/gradients/head/logistic_loss/mul_grad/Sum"
  input: "head/gradients/head/logistic_loss/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/logistic_loss/mul_grad/Mul_1"
  op: "Mul"
  input: "add"
  input: "head/gradients/head/logistic_loss/sub_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/logistic_loss/mul_grad/Sum_1"
  op: "Sum"
  input: "head/gradients/head/logistic_loss/mul_grad/Mul_1"
  input: "head/gradients/head/logistic_loss/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients/head/logistic_loss/mul_grad/Reshape_1"
  op: "Reshape"
  input: "head/gradients/head/logistic_loss/mul_grad/Sum_1"
  input: "head/gradients/head/logistic_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/logistic_loss/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients/head/logistic_loss/mul_grad/Reshape"
  input: "^head/gradients/head/logistic_loss/mul_grad/Reshape_1"
}
node {
  name: "head/gradients/head/logistic_loss/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients/head/logistic_loss/mul_grad/Reshape"
  input: "^head/gradients/head/logistic_loss/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/head/logistic_loss/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/logistic_loss/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients/head/logistic_loss/mul_grad/Reshape_1"
  input: "^head/gradients/head/logistic_loss/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/head/logistic_loss/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/logistic_loss/Exp_grad/mul"
  op: "Mul"
  input: "head/gradients/head/logistic_loss/Log1p_grad/mul"
  input: "head/logistic_loss/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/logistic_loss/Select_1_grad/zeros_like"
  op: "ZerosLike"
  input: "head/logistic_loss/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/logistic_loss/Select_1_grad/Select"
  op: "Select"
  input: "head/logistic_loss/GreaterEqual"
  input: "head/gradients/head/logistic_loss/Exp_grad/mul"
  input: "head/gradients/head/logistic_loss/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/logistic_loss/Select_1_grad/Select_1"
  op: "Select"
  input: "head/logistic_loss/GreaterEqual"
  input: "head/gradients/head/logistic_loss/Select_1_grad/zeros_like"
  input: "head/gradients/head/logistic_loss/Exp_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/logistic_loss/Select_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients/head/logistic_loss/Select_1_grad/Select"
  input: "^head/gradients/head/logistic_loss/Select_1_grad/Select_1"
}
node {
  name: "head/gradients/head/logistic_loss/Select_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients/head/logistic_loss/Select_1_grad/Select"
  input: "^head/gradients/head/logistic_loss/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/head/logistic_loss/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/logistic_loss/Select_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients/head/logistic_loss/Select_1_grad/Select_1"
  input: "^head/gradients/head/logistic_loss/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/head/logistic_loss/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/head/logistic_loss/Neg_grad/Neg"
  op: "Neg"
  input: "head/gradients/head/logistic_loss/Select_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/AddN"
  op: "AddN"
  input: "head/gradients/head/logistic_loss/Select_grad/tuple/control_dependency"
  input: "head/gradients/head/logistic_loss/mul_grad/tuple/control_dependency"
  input: "head/gradients/head/logistic_loss/Select_1_grad/tuple/control_dependency_1"
  input: "head/gradients/head/logistic_loss/Neg_grad/Neg"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/head/logistic_loss/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/add_grad/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients/add_grad/Shape_1"
  op: "Shape"
  input: "linear/linear_model_1/linear_model/weighted_sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "head/gradients/add_grad/Shape"
  input: "head/gradients/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/add_grad/Sum"
  op: "Sum"
  input: "head/gradients/AddN"
  input: "head/gradients/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients/add_grad/Reshape"
  op: "Reshape"
  input: "head/gradients/add_grad/Sum"
  input: "head/gradients/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/add_grad/Sum_1"
  op: "Sum"
  input: "head/gradients/AddN"
  input: "head/gradients/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients/add_grad/Reshape_1"
  op: "Reshape"
  input: "head/gradients/add_grad/Sum_1"
  input: "head/gradients/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients/add_grad/Reshape"
  input: "^head/gradients/add_grad/Reshape_1"
}
node {
  name: "head/gradients/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients/add_grad/Reshape"
  input: "^head/gradients/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients/add_grad/Reshape_1"
  input: "^head/gradients/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "head/gradients/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "head/gradients/dnn/logits/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients/add_grad/tuple/control_dependency"
  input: "^head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients/add_grad/tuple/control_dependency"
  input: "^head/gradients/dnn/logits/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  input: "^head/gradients/dnn/logits/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/logits/MatMul_grad/MatMul"
  op: "MatMul"
  input: "head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/logits/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "head/gradients/dnn/logits/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_2/Relu"
  input: "head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients/dnn/logits/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients/dnn/logits/MatMul_grad/MatMul"
  input: "^head/gradients/dnn/logits/MatMul_grad/MatMul_1"
}
node {
  name: "head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients/dnn/logits/MatMul_grad/MatMul"
  input: "^head/gradients/dnn/logits/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/logits/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients/dnn/logits/MatMul_grad/MatMul_1"
  input: "^head/gradients/dnn/logits/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/logits/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/hiddenlayer_2/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/hiddenlayer_2/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "head/gradients/dnn/hiddenlayer_2/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "head/gradients/dnn/hiddenlayer_2/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients/dnn/hiddenlayer_2/BiasAdd_grad/BiasAddGrad"
  input: "^head/gradients/dnn/hiddenlayer_2/Relu_grad/ReluGrad"
}
node {
  name: "head/gradients/dnn/hiddenlayer_2/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients/dnn/hiddenlayer_2/Relu_grad/ReluGrad"
  input: "^head/gradients/dnn/hiddenlayer_2/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/hiddenlayer_2/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/hiddenlayer_2/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients/dnn/hiddenlayer_2/BiasAdd_grad/BiasAddGrad"
  input: "^head/gradients/dnn/hiddenlayer_2/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/hiddenlayer_2/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul"
  op: "MatMul"
  input: "head/gradients/dnn/hiddenlayer_2/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_2/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "head/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_1/Relu"
  input: "head/gradients/dnn/hiddenlayer_2/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients/dnn/hiddenlayer_2/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul"
  input: "^head/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul_1"
}
node {
  name: "head/gradients/dnn/hiddenlayer_2/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul"
  input: "^head/gradients/dnn/hiddenlayer_2/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/hiddenlayer_2/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul_1"
  input: "^head/gradients/dnn/hiddenlayer_2/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "head/gradients/dnn/hiddenlayer_2/MatMul_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "head/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  input: "^head/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
}
node {
  name: "head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
  input: "^head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  input: "^head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/Relu"
  input: "head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  input: "^head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
}
node {
  name: "head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  input: "^head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
  input: "^head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  input: "^head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
}
node {
  name: "head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  input: "^head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  input: "^head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  op: "MatMul"
  input: "head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_layer/concat"
  input: "head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  input: "^head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
}
node {
  name: "head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  input: "^head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  input: "^head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/mod"
  op: "FloorMod"
  input: "dnn/input_from_feature_columns/input_layer/concat/axis"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/ShapeN"
  op: "ShapeN"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/Reshape"
  attr {
    key: "N"
    value {
      i: 5
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/mod"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/ShapeN"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/ShapeN:1"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/ShapeN:2"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/ShapeN:3"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/ShapeN:4"
  attr {
    key: "N"
    value {
      i: 5
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/Slice"
  op: "Slice"
  input: "head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/ConcatOffset"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/Slice_1"
  op: "Slice"
  input: "head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/ConcatOffset:1"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/Slice_2"
  op: "Slice"
  input: "head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/ConcatOffset:2"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/ShapeN:2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/Slice_3"
  op: "Slice"
  input: "head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/ConcatOffset:3"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/ShapeN:3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/Slice_4"
  op: "Slice"
  input: "head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/ConcatOffset:4"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/ShapeN:4"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/Slice"
  input: "^head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/Slice_1"
  input: "^head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/Slice_2"
  input: "^head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/Slice_3"
  input: "^head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/Slice_4"
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/Slice"
  input: "^head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/Slice_1"
  input: "^head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/Slice_2"
  input: "^head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/Slice_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/Slice_3"
  input: "^head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/Slice_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/Slice_4"
  input: "^head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/Slice_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/Reshape_grad/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/Reshape_grad/Reshape"
  op: "Reshape"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/tuple/control_dependency"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/Reshape_grad/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/Reshape_grad/Reshape"
  op: "Reshape"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/tuple/control_dependency_1"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/Reshape_grad/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/Reshape_grad/Reshape"
  op: "Reshape"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/tuple/control_dependency_2"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/Reshape_grad/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/Reshape_grad/Reshape"
  op: "Reshape"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/tuple/control_dependency_3"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/Reshape_grad/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/Reshape_grad/Reshape"
  op: "Reshape"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/concat_grad/tuple/control_dependency_4"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Reshape_2_grad/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Reshape_2_grad/Reshape"
  op: "Reshape"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/Reshape_grad/Reshape"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Reshape_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Reshape_2_grad/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Reshape_2_grad/Reshape"
  op: "Reshape"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/Reshape_grad/Reshape"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Reshape_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Reshape_2_grad/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Reshape_2_grad/Reshape"
  op: "Reshape"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/Reshape_grad/Reshape"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Reshape_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Reshape_2_grad/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Reshape_2_grad/Reshape"
  op: "Reshape"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/Reshape_grad/Reshape"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Reshape_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Reshape_2_grad/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Reshape_2_grad/Reshape"
  op: "Reshape"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/Reshape_grad/Reshape"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Reshape_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights_grad/zeros_like"
  op: "ZerosLike"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights_grad/Select"
  op: "Select"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Tile"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Reshape_2_grad/Reshape"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights_grad/Select_1"
  op: "Select"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Tile"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights_grad/zeros_like"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/Reshape_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights_grad/Select"
  input: "^head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights_grad/Select_1"
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights_grad/Select"
  input: "^head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights_grad/Select_1"
  input: "^head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights_grad/zeros_like"
  op: "ZerosLike"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights_grad/Select"
  op: "Select"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Tile"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Reshape_2_grad/Reshape"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights_grad/Select_1"
  op: "Select"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Tile"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights_grad/zeros_like"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/Reshape_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights_grad/Select"
  input: "^head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights_grad/Select_1"
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights_grad/Select"
  input: "^head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights_grad/Select_1"
  input: "^head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights_grad/zeros_like"
  op: "ZerosLike"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights_grad/Select"
  op: "Select"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Tile"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Reshape_2_grad/Reshape"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights_grad/Select_1"
  op: "Select"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Tile"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights_grad/zeros_like"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/Reshape_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights_grad/Select"
  input: "^head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights_grad/Select_1"
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights_grad/Select"
  input: "^head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights_grad/Select_1"
  input: "^head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights_grad/zeros_like"
  op: "ZerosLike"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights_grad/Select"
  op: "Select"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Tile"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Reshape_2_grad/Reshape"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights_grad/Select_1"
  op: "Select"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Tile"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights_grad/zeros_like"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/Reshape_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights_grad/Select"
  input: "^head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights_grad/Select_1"
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights_grad/Select"
  input: "^head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights_grad/Select_1"
  input: "^head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights_grad/zeros_like"
  op: "ZerosLike"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights_grad/Select"
  op: "Select"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Tile"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Reshape_2_grad/Reshape"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights_grad/Select_1"
  op: "Select"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Tile"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights_grad/zeros_like"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/Reshape_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights_grad/Select"
  input: "^head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights_grad/Select_1"
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights_grad/Select"
  input: "^head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights_grad/Select_1"
  input: "^head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse_grad/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse/embedding_lookup/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse_grad/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse_grad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse_grad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse_grad/strided_slice"
  op: "StridedSlice"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse_grad/Shape"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse_grad/strided_slice/stack"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse_grad/strided_slice/stack_1"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse_grad/SparseSegmentMeanGrad"
  op: "SparseSegmentMeanGrad"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights_grad/tuple/control_dependency_1"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse/Unique:1"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse/Cast"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse_grad/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse_grad/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse/embedding_lookup/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse_grad/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse_grad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse_grad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse_grad/strided_slice"
  op: "StridedSlice"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse_grad/Shape"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse_grad/strided_slice/stack"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse_grad/strided_slice/stack_1"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse_grad/SparseSegmentMeanGrad"
  op: "SparseSegmentMeanGrad"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights_grad/tuple/control_dependency_1"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse/Unique:1"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse/Cast"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse_grad/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse_grad/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse/embedding_lookup/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse_grad/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse_grad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse_grad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse_grad/strided_slice"
  op: "StridedSlice"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse_grad/Shape"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse_grad/strided_slice/stack"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse_grad/strided_slice/stack_1"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse_grad/SparseSegmentMeanGrad"
  op: "SparseSegmentMeanGrad"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights_grad/tuple/control_dependency_1"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse/Unique:1"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse/Cast"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse_grad/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse_grad/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse/embedding_lookup/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse_grad/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse_grad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse_grad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse_grad/strided_slice"
  op: "StridedSlice"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse_grad/Shape"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse_grad/strided_slice/stack"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse_grad/strided_slice/stack_1"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse_grad/SparseSegmentMeanGrad"
  op: "SparseSegmentMeanGrad"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights_grad/tuple/control_dependency_1"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse/Unique:1"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse/Cast"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse_grad/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse_grad/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse/embedding_lookup/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse_grad/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse_grad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse_grad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse_grad/strided_slice"
  op: "StridedSlice"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse_grad/Shape"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse_grad/strided_slice/stack"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse_grad/strided_slice/stack_1"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse_grad/SparseSegmentMeanGrad"
  op: "SparseSegmentMeanGrad"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights_grad/tuple/control_dependency_1"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse/Unique:1"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse/Cast"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse_grad/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\270\013\000\000\000\000\000\000\010\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/ToInt32"
  op: "Cast"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Size"
  op: "Size"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse/Unique"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims"
  op: "ExpandDims"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Size"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice"
  op: "StridedSlice"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/ToInt32"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack_1"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/concat"
  op: "ConcatV2"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Reshape"
  op: "Reshape"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse_grad/SparseSegmentMeanGrad"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse/Unique"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\270\013\000\000\000\000\000\000\010\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/ToInt32"
  op: "Cast"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Size"
  op: "Size"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse/Unique"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims"
  op: "ExpandDims"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Size"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice"
  op: "StridedSlice"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/ToInt32"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack_1"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/concat"
  op: "ConcatV2"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Reshape"
  op: "Reshape"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse_grad/SparseSegmentMeanGrad"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse/Unique"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\270\013\000\000\000\000\000\000\010\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/ToInt32"
  op: "Cast"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Size"
  op: "Size"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse/Unique"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims"
  op: "ExpandDims"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Size"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice"
  op: "StridedSlice"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/ToInt32"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack_1"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/concat"
  op: "ConcatV2"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Reshape"
  op: "Reshape"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse_grad/SparseSegmentMeanGrad"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse/Unique"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\270\013\000\000\000\000\000\000\010\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/ToInt32"
  op: "Cast"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Size"
  op: "Size"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse/Unique"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims"
  op: "ExpandDims"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Size"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice"
  op: "StridedSlice"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/ToInt32"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack_1"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/concat"
  op: "ConcatV2"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Reshape"
  op: "Reshape"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse_grad/SparseSegmentMeanGrad"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse/Unique"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\270\013\000\000\000\000\000\000\010\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/ToInt32"
  op: "Cast"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Size"
  op: "Size"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse/Unique"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims"
  op: "ExpandDims"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Size"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice"
  op: "StridedSlice"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/ToInt32"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack_1"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/concat"
  op: "ConcatV2"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Reshape"
  op: "Reshape"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse_grad/SparseSegmentMeanGrad"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse/Unique"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3000
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0/Adagrad"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3000
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0/Adagrad"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3000
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0/Adagrad"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3000
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0/Adagrad"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3000
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0/Adagrad"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 40
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  input: "dnn/hiddenlayer_0/kernel/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_0/bias/part_0/Adagrad"
  input: "dnn/hiddenlayer_0/bias/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/hiddenlayer_0/bias/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_1/kernel/part_0/Adagrad"
  input: "dnn/hiddenlayer_1/kernel/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/hiddenlayer_1/kernel/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_1/bias/part_0/Adagrad"
  input: "dnn/hiddenlayer_1/bias/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/hiddenlayer_1/bias/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_2/kernel/part_0/Adagrad"
  input: "dnn/hiddenlayer_2/kernel/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/hiddenlayer_2/kernel/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/bias/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/bias/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/bias/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_2/bias/part_0/Adagrad"
  input: "dnn/hiddenlayer_2/bias/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/bias/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/hiddenlayer_2/bias/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/logits/kernel/part_0/Adagrad"
  input: "dnn/logits/kernel/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/logits/kernel/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/logits/bias/part_0/Adagrad"
  input: "dnn/logits/bias/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/logits/bias/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/Adagrad/learning_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0/Unique"
  op: "Unique"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_idx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0/Shape"
  op: "Shape"
  input: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0/Unique"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0/strided_slice/stack"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0/strided_slice"
  op: "StridedSlice"
  input: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0/Shape"
  input: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0/strided_slice/stack"
  input: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0/strided_slice/stack_1"
  input: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0/UnsortedSegmentSum"
  op: "UnsortedSegmentSum"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d0_embedding/d0_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Reshape"
  input: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0/Unique:1"
  input: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tnumsegments"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0/SparseApplyAdagrad"
  op: "SparseApplyAdagrad"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0/Adagrad"
  input: "head/Adagrad/learning_rate"
  input: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0/UnsortedSegmentSum"
  input: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0/Unique"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0/Unique"
  op: "Unique"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_idx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0/Shape"
  op: "Shape"
  input: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0/Unique"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0/strided_slice/stack"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0/strided_slice"
  op: "StridedSlice"
  input: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0/Shape"
  input: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0/strided_slice/stack"
  input: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0/strided_slice/stack_1"
  input: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0/UnsortedSegmentSum"
  op: "UnsortedSegmentSum"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d1_embedding/d1_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Reshape"
  input: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0/Unique:1"
  input: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tnumsegments"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0/SparseApplyAdagrad"
  op: "SparseApplyAdagrad"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0/Adagrad"
  input: "head/Adagrad/learning_rate"
  input: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0/UnsortedSegmentSum"
  input: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0/Unique"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0/Unique"
  op: "Unique"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_idx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0/Shape"
  op: "Shape"
  input: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0/Unique"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0/strided_slice/stack"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0/strided_slice"
  op: "StridedSlice"
  input: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0/Shape"
  input: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0/strided_slice/stack"
  input: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0/strided_slice/stack_1"
  input: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0/UnsortedSegmentSum"
  op: "UnsortedSegmentSum"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d2_embedding/d2_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Reshape"
  input: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0/Unique:1"
  input: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tnumsegments"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0/SparseApplyAdagrad"
  op: "SparseApplyAdagrad"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0/Adagrad"
  input: "head/Adagrad/learning_rate"
  input: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0/UnsortedSegmentSum"
  input: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0/Unique"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0/Unique"
  op: "Unique"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_idx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0/Shape"
  op: "Shape"
  input: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0/Unique"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0/strided_slice/stack"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0/strided_slice"
  op: "StridedSlice"
  input: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0/Shape"
  input: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0/strided_slice/stack"
  input: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0/strided_slice/stack_1"
  input: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0/UnsortedSegmentSum"
  op: "UnsortedSegmentSum"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d3_embedding/d3_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Reshape"
  input: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0/Unique:1"
  input: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tnumsegments"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0/SparseApplyAdagrad"
  op: "SparseApplyAdagrad"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0/Adagrad"
  input: "head/Adagrad/learning_rate"
  input: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0/UnsortedSegmentSum"
  input: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0/Unique"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0/Unique"
  op: "Unique"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_idx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0/Shape"
  op: "Shape"
  input: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0/Unique"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0/strided_slice/stack"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0/strided_slice"
  op: "StridedSlice"
  input: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0/Shape"
  input: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0/strided_slice/stack"
  input: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0/strided_slice/stack_1"
  input: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0/UnsortedSegmentSum"
  op: "UnsortedSegmentSum"
  input: "head/gradients/dnn/input_from_feature_columns/input_layer/d4_embedding/d4_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Reshape"
  input: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0/Unique:1"
  input: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tnumsegments"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0/SparseApplyAdagrad"
  op: "SparseApplyAdagrad"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0/Adagrad"
  input: "head/Adagrad/learning_rate"
  input: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0/UnsortedSegmentSum"
  input: "head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0/Unique"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/hiddenlayer_0/kernel/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  input: "dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  input: "head/Adagrad/learning_rate"
  input: "head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/hiddenlayer_0/bias/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/hiddenlayer_0/bias/part_0"
  input: "dnn/hiddenlayer_0/bias/part_0/Adagrad"
  input: "head/Adagrad/learning_rate"
  input: "head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/hiddenlayer_1/kernel/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  input: "dnn/hiddenlayer_1/kernel/part_0/Adagrad"
  input: "head/Adagrad/learning_rate"
  input: "head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/hiddenlayer_1/bias/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/hiddenlayer_1/bias/part_0"
  input: "dnn/hiddenlayer_1/bias/part_0/Adagrad"
  input: "head/Adagrad/learning_rate"
  input: "head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/hiddenlayer_2/kernel/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/hiddenlayer_2/kernel/part_0"
  input: "dnn/hiddenlayer_2/kernel/part_0/Adagrad"
  input: "head/Adagrad/learning_rate"
  input: "head/gradients/dnn/hiddenlayer_2/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/hiddenlayer_2/bias/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/hiddenlayer_2/bias/part_0"
  input: "dnn/hiddenlayer_2/bias/part_0/Adagrad"
  input: "head/Adagrad/learning_rate"
  input: "head/gradients/dnn/hiddenlayer_2/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/logits/kernel/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/logits/kernel/part_0"
  input: "dnn/logits/kernel/part_0/Adagrad"
  input: "head/Adagrad/learning_rate"
  input: "head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "head/Adagrad/update_dnn/logits/bias/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/logits/bias/part_0"
  input: "dnn/logits/bias/part_0/Adagrad"
  input: "head/Adagrad/learning_rate"
  input: "head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "head/Adagrad"
  op: "NoOp"
  input: "^head/Adagrad/update_dnn/hiddenlayer_0/bias/part_0/ApplyAdagrad"
  input: "^head/Adagrad/update_dnn/hiddenlayer_0/kernel/part_0/ApplyAdagrad"
  input: "^head/Adagrad/update_dnn/hiddenlayer_1/bias/part_0/ApplyAdagrad"
  input: "^head/Adagrad/update_dnn/hiddenlayer_1/kernel/part_0/ApplyAdagrad"
  input: "^head/Adagrad/update_dnn/hiddenlayer_2/bias/part_0/ApplyAdagrad"
  input: "^head/Adagrad/update_dnn/hiddenlayer_2/kernel/part_0/ApplyAdagrad"
  input: "^head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0/SparseApplyAdagrad"
  input: "^head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0/SparseApplyAdagrad"
  input: "^head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0/SparseApplyAdagrad"
  input: "^head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0/SparseApplyAdagrad"
  input: "^head/Adagrad/update_dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0/SparseApplyAdagrad"
  input: "^head/Adagrad/update_dnn/logits/bias/part_0/ApplyAdagrad"
  input: "^head/Adagrad/update_dnn/logits/kernel/part_0/ApplyAdagrad"
}
node {
  name: "head/gradients_1/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/grad_ys_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/gradients_1/Fill"
  op: "Fill"
  input: "head/gradients_1/Shape"
  input: "head/gradients_1/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients_1/head/weighted_loss/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "head/gradients_1/head/weighted_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "head/gradients_1/Fill"
  input: "head/gradients_1/head/weighted_loss/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/weighted_loss/Sum_grad/Shape"
  op: "Shape"
  input: "head/weighted_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients_1/head/weighted_loss/Sum_grad/Tile"
  op: "Tile"
  input: "head/gradients_1/head/weighted_loss/Sum_grad/Reshape"
  input: "head/gradients_1/head/weighted_loss/Sum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/weighted_loss/Mul_grad/Shape"
  op: "Shape"
  input: "head/logistic_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients_1/head/weighted_loss/Mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/weighted_loss/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "head/gradients_1/head/weighted_loss/Mul_grad/Shape"
  input: "head/gradients_1/head/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/weighted_loss/Mul_grad/Mul"
  op: "Mul"
  input: "head/gradients_1/head/weighted_loss/Sum_grad/Tile"
  input: "head/weighted_loss/ToFloat/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/weighted_loss/Mul_grad/Sum"
  op: "Sum"
  input: "head/gradients_1/head/weighted_loss/Mul_grad/Mul"
  input: "head/gradients_1/head/weighted_loss/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients_1/head/weighted_loss/Mul_grad/Reshape"
  op: "Reshape"
  input: "head/gradients_1/head/weighted_loss/Mul_grad/Sum"
  input: "head/gradients_1/head/weighted_loss/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/weighted_loss/Mul_grad/Mul_1"
  op: "Mul"
  input: "head/logistic_loss"
  input: "head/gradients_1/head/weighted_loss/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/weighted_loss/Mul_grad/Sum_1"
  op: "Sum"
  input: "head/gradients_1/head/weighted_loss/Mul_grad/Mul_1"
  input: "head/gradients_1/head/weighted_loss/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients_1/head/weighted_loss/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "head/gradients_1/head/weighted_loss/Mul_grad/Sum_1"
  input: "head/gradients_1/head/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/weighted_loss/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients_1/head/weighted_loss/Mul_grad/Reshape"
  input: "^head/gradients_1/head/weighted_loss/Mul_grad/Reshape_1"
}
node {
  name: "head/gradients_1/head/weighted_loss/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients_1/head/weighted_loss/Mul_grad/Reshape"
  input: "^head/gradients_1/head/weighted_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients_1/head/weighted_loss/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/weighted_loss/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients_1/head/weighted_loss/Mul_grad/Reshape_1"
  input: "^head/gradients_1/head/weighted_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients_1/head/weighted_loss/Mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/logistic_loss_grad/Shape"
  op: "Shape"
  input: "head/logistic_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients_1/head/logistic_loss_grad/Shape_1"
  op: "Shape"
  input: "head/logistic_loss/Log1p"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients_1/head/logistic_loss_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "head/gradients_1/head/logistic_loss_grad/Shape"
  input: "head/gradients_1/head/logistic_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/logistic_loss_grad/Sum"
  op: "Sum"
  input: "head/gradients_1/head/weighted_loss/Mul_grad/tuple/control_dependency"
  input: "head/gradients_1/head/logistic_loss_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients_1/head/logistic_loss_grad/Reshape"
  op: "Reshape"
  input: "head/gradients_1/head/logistic_loss_grad/Sum"
  input: "head/gradients_1/head/logistic_loss_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/logistic_loss_grad/Sum_1"
  op: "Sum"
  input: "head/gradients_1/head/weighted_loss/Mul_grad/tuple/control_dependency"
  input: "head/gradients_1/head/logistic_loss_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients_1/head/logistic_loss_grad/Reshape_1"
  op: "Reshape"
  input: "head/gradients_1/head/logistic_loss_grad/Sum_1"
  input: "head/gradients_1/head/logistic_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/logistic_loss_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients_1/head/logistic_loss_grad/Reshape"
  input: "^head/gradients_1/head/logistic_loss_grad/Reshape_1"
}
node {
  name: "head/gradients_1/head/logistic_loss_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients_1/head/logistic_loss_grad/Reshape"
  input: "^head/gradients_1/head/logistic_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients_1/head/logistic_loss_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/logistic_loss_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients_1/head/logistic_loss_grad/Reshape_1"
  input: "^head/gradients_1/head/logistic_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients_1/head/logistic_loss_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/logistic_loss/sub_grad/Shape"
  op: "Shape"
  input: "head/logistic_loss/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients_1/head/logistic_loss/sub_grad/Shape_1"
  op: "Shape"
  input: "head/logistic_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients_1/head/logistic_loss/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "head/gradients_1/head/logistic_loss/sub_grad/Shape"
  input: "head/gradients_1/head/logistic_loss/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/logistic_loss/sub_grad/Sum"
  op: "Sum"
  input: "head/gradients_1/head/logistic_loss_grad/tuple/control_dependency"
  input: "head/gradients_1/head/logistic_loss/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients_1/head/logistic_loss/sub_grad/Reshape"
  op: "Reshape"
  input: "head/gradients_1/head/logistic_loss/sub_grad/Sum"
  input: "head/gradients_1/head/logistic_loss/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/logistic_loss/sub_grad/Sum_1"
  op: "Sum"
  input: "head/gradients_1/head/logistic_loss_grad/tuple/control_dependency"
  input: "head/gradients_1/head/logistic_loss/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients_1/head/logistic_loss/sub_grad/Neg"
  op: "Neg"
  input: "head/gradients_1/head/logistic_loss/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/logistic_loss/sub_grad/Reshape_1"
  op: "Reshape"
  input: "head/gradients_1/head/logistic_loss/sub_grad/Neg"
  input: "head/gradients_1/head/logistic_loss/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/logistic_loss/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients_1/head/logistic_loss/sub_grad/Reshape"
  input: "^head/gradients_1/head/logistic_loss/sub_grad/Reshape_1"
}
node {
  name: "head/gradients_1/head/logistic_loss/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients_1/head/logistic_loss/sub_grad/Reshape"
  input: "^head/gradients_1/head/logistic_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients_1/head/logistic_loss/sub_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/logistic_loss/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients_1/head/logistic_loss/sub_grad/Reshape_1"
  input: "^head/gradients_1/head/logistic_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients_1/head/logistic_loss/sub_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/logistic_loss/Log1p_grad/add/x"
  op: "Const"
  input: "^head/gradients_1/head/logistic_loss_grad/tuple/control_dependency_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/gradients_1/head/logistic_loss/Log1p_grad/add"
  op: "Add"
  input: "head/gradients_1/head/logistic_loss/Log1p_grad/add/x"
  input: "head/logistic_loss/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/logistic_loss/Log1p_grad/Reciprocal"
  op: "Reciprocal"
  input: "head/gradients_1/head/logistic_loss/Log1p_grad/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/logistic_loss/Log1p_grad/mul"
  op: "Mul"
  input: "head/gradients_1/head/logistic_loss_grad/tuple/control_dependency_1"
  input: "head/gradients_1/head/logistic_loss/Log1p_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/logistic_loss/Select_grad/zeros_like"
  op: "ZerosLike"
  input: "add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/logistic_loss/Select_grad/Select"
  op: "Select"
  input: "head/logistic_loss/GreaterEqual"
  input: "head/gradients_1/head/logistic_loss/sub_grad/tuple/control_dependency"
  input: "head/gradients_1/head/logistic_loss/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/logistic_loss/Select_grad/Select_1"
  op: "Select"
  input: "head/logistic_loss/GreaterEqual"
  input: "head/gradients_1/head/logistic_loss/Select_grad/zeros_like"
  input: "head/gradients_1/head/logistic_loss/sub_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/logistic_loss/Select_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients_1/head/logistic_loss/Select_grad/Select"
  input: "^head/gradients_1/head/logistic_loss/Select_grad/Select_1"
}
node {
  name: "head/gradients_1/head/logistic_loss/Select_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients_1/head/logistic_loss/Select_grad/Select"
  input: "^head/gradients_1/head/logistic_loss/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients_1/head/logistic_loss/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/logistic_loss/Select_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients_1/head/logistic_loss/Select_grad/Select_1"
  input: "^head/gradients_1/head/logistic_loss/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients_1/head/logistic_loss/Select_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/logistic_loss/mul_grad/Shape"
  op: "Shape"
  input: "add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients_1/head/logistic_loss/mul_grad/Shape_1"
  op: "Shape"
  input: "head/assert_range/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients_1/head/logistic_loss/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "head/gradients_1/head/logistic_loss/mul_grad/Shape"
  input: "head/gradients_1/head/logistic_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/logistic_loss/mul_grad/Mul"
  op: "Mul"
  input: "head/gradients_1/head/logistic_loss/sub_grad/tuple/control_dependency_1"
  input: "head/assert_range/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/logistic_loss/mul_grad/Sum"
  op: "Sum"
  input: "head/gradients_1/head/logistic_loss/mul_grad/Mul"
  input: "head/gradients_1/head/logistic_loss/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients_1/head/logistic_loss/mul_grad/Reshape"
  op: "Reshape"
  input: "head/gradients_1/head/logistic_loss/mul_grad/Sum"
  input: "head/gradients_1/head/logistic_loss/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/logistic_loss/mul_grad/Mul_1"
  op: "Mul"
  input: "add"
  input: "head/gradients_1/head/logistic_loss/sub_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/logistic_loss/mul_grad/Sum_1"
  op: "Sum"
  input: "head/gradients_1/head/logistic_loss/mul_grad/Mul_1"
  input: "head/gradients_1/head/logistic_loss/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients_1/head/logistic_loss/mul_grad/Reshape_1"
  op: "Reshape"
  input: "head/gradients_1/head/logistic_loss/mul_grad/Sum_1"
  input: "head/gradients_1/head/logistic_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/logistic_loss/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients_1/head/logistic_loss/mul_grad/Reshape"
  input: "^head/gradients_1/head/logistic_loss/mul_grad/Reshape_1"
}
node {
  name: "head/gradients_1/head/logistic_loss/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients_1/head/logistic_loss/mul_grad/Reshape"
  input: "^head/gradients_1/head/logistic_loss/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients_1/head/logistic_loss/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/logistic_loss/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients_1/head/logistic_loss/mul_grad/Reshape_1"
  input: "^head/gradients_1/head/logistic_loss/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients_1/head/logistic_loss/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/logistic_loss/Exp_grad/mul"
  op: "Mul"
  input: "head/gradients_1/head/logistic_loss/Log1p_grad/mul"
  input: "head/logistic_loss/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/logistic_loss/Select_1_grad/zeros_like"
  op: "ZerosLike"
  input: "head/logistic_loss/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/logistic_loss/Select_1_grad/Select"
  op: "Select"
  input: "head/logistic_loss/GreaterEqual"
  input: "head/gradients_1/head/logistic_loss/Exp_grad/mul"
  input: "head/gradients_1/head/logistic_loss/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/logistic_loss/Select_1_grad/Select_1"
  op: "Select"
  input: "head/logistic_loss/GreaterEqual"
  input: "head/gradients_1/head/logistic_loss/Select_1_grad/zeros_like"
  input: "head/gradients_1/head/logistic_loss/Exp_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/logistic_loss/Select_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients_1/head/logistic_loss/Select_1_grad/Select"
  input: "^head/gradients_1/head/logistic_loss/Select_1_grad/Select_1"
}
node {
  name: "head/gradients_1/head/logistic_loss/Select_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients_1/head/logistic_loss/Select_1_grad/Select"
  input: "^head/gradients_1/head/logistic_loss/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients_1/head/logistic_loss/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/logistic_loss/Select_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients_1/head/logistic_loss/Select_1_grad/Select_1"
  input: "^head/gradients_1/head/logistic_loss/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients_1/head/logistic_loss/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/head/logistic_loss/Neg_grad/Neg"
  op: "Neg"
  input: "head/gradients_1/head/logistic_loss/Select_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/AddN"
  op: "AddN"
  input: "head/gradients_1/head/logistic_loss/Select_grad/tuple/control_dependency"
  input: "head/gradients_1/head/logistic_loss/mul_grad/tuple/control_dependency"
  input: "head/gradients_1/head/logistic_loss/Select_1_grad/tuple/control_dependency_1"
  input: "head/gradients_1/head/logistic_loss/Neg_grad/Neg"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients_1/head/logistic_loss/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/add_grad/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients_1/add_grad/Shape_1"
  op: "Shape"
  input: "linear/linear_model_1/linear_model/weighted_sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients_1/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "head/gradients_1/add_grad/Shape"
  input: "head/gradients_1/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/add_grad/Sum"
  op: "Sum"
  input: "head/gradients_1/AddN"
  input: "head/gradients_1/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients_1/add_grad/Reshape"
  op: "Reshape"
  input: "head/gradients_1/add_grad/Sum"
  input: "head/gradients_1/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/add_grad/Sum_1"
  op: "Sum"
  input: "head/gradients_1/AddN"
  input: "head/gradients_1/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/gradients_1/add_grad/Reshape_1"
  op: "Reshape"
  input: "head/gradients_1/add_grad/Sum_1"
  input: "head/gradients_1/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients_1/add_grad/Reshape"
  input: "^head/gradients_1/add_grad/Reshape_1"
}
node {
  name: "head/gradients_1/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients_1/add_grad/Reshape"
  input: "^head/gradients_1/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients_1/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients_1/add_grad/Reshape_1"
  input: "^head/gradients_1/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients_1/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model_1/linear_model/weighted_sum_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "head/gradients_1/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model_1/linear_model/weighted_sum_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients_1/add_grad/tuple/control_dependency_1"
  input: "^head/gradients_1/linear/linear_model_1/linear_model/weighted_sum_grad/BiasAddGrad"
}
node {
  name: "head/gradients_1/linear/linear_model_1/linear_model/weighted_sum_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients_1/add_grad/tuple/control_dependency_1"
  input: "^head/gradients_1/linear/linear_model_1/linear_model/weighted_sum_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients_1/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model_1/linear_model/weighted_sum_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients_1/linear/linear_model_1/linear_model/weighted_sum_grad/BiasAddGrad"
  input: "^head/gradients_1/linear/linear_model_1/linear_model/weighted_sum_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients_1/linear/linear_model_1/linear_model/weighted_sum_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum/Reshape_2_grad/Shape"
  op: "Shape"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum/Reshape_2_grad/Reshape"
  op: "Reshape"
  input: "head/gradients_1/linear/linear_model_1/linear_model/weighted_sum_grad/tuple/control_dependency"
  input: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum/Reshape_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum_grad/zeros_like"
  op: "ZerosLike"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum_grad/Select"
  op: "Select"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/Tile"
  input: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum/Reshape_2_grad/Reshape"
  input: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum_grad/Select_1"
  op: "Select"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/Tile"
  input: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum_grad/zeros_like"
  input: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum/Reshape_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum_grad/tuple/group_deps"
  op: "NoOp"
  input: "^head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum_grad/Select"
  input: "^head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum_grad/Select_1"
}
node {
  name: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum_grad/tuple/control_dependency"
  op: "Identity"
  input: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum_grad/Select"
  input: "^head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum_grad/Select_1"
  input: "^head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse_grad/Shape"
  op: "Shape"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse/embedding_lookup/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse_grad/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse_grad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse_grad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse_grad/strided_slice"
  op: "StridedSlice"
  input: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse_grad/Shape"
  input: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse_grad/strided_slice/stack"
  input: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse_grad/strided_slice/stack_1"
  input: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse_grad/GatherV2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse_grad/GatherV2"
  op: "GatherV2"
  input: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum_grad/tuple/control_dependency_1"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse/Cast"
  input: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse_grad/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse_grad/UnsortedSegmentSum"
  op: "UnsortedSegmentSum"
  input: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse_grad/GatherV2"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse/Unique:1"
  input: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse_grad/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tnumsegments"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model_1/linear_model/w1/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\270\013\000\000\000\000\000\000\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/ToInt32"
  op: "Cast"
  input: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model_1/linear_model/w1/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/Size"
  op: "Size"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse/Unique"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims"
  op: "ExpandDims"
  input: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/Size"
  input: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/strided_slice"
  op: "StridedSlice"
  input: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/ToInt32"
  input: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack"
  input: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack_1"
  input: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/concat"
  op: "ConcatV2"
  input: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims"
  input: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/strided_slice"
  input: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/Reshape"
  op: "Reshape"
  input: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse_grad/UnsortedSegmentSum"
  input: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/Reshape_1"
  op: "Reshape"
  input: "linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse/Unique"
  input: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "head/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/w1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3000
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "linear/linear_model/w1/weights/part_0/Ftrl"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/w1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3000
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "linear/linear_model/w1/weights/part_0/Ftrl"
    }
  }
}
node {
  name: "linear/linear_model/w1/weights/part_0/Ftrl/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/w1/weights/part_0/Ftrl"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/w1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/w1/weights/part_0/Ftrl/Assign"
  op: "AssignVariableOp"
  input: "linear/linear_model/w1/weights/part_0/Ftrl"
  input: "head/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/w1/weights/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/w1/weights/part_0/Ftrl/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/w1/weights/part_0/Ftrl"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/w1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/w1/weights/part_0/Ftrl_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/w1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\270\013\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear_model/w1/weights/part_0/Ftrl_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/w1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/linear_model/w1/weights/part_0/Ftrl_1/Initializer/zeros"
  op: "Fill"
  input: "linear/linear_model/w1/weights/part_0/Ftrl_1/Initializer/zeros/shape_as_tensor"
  input: "linear/linear_model/w1/weights/part_0/Ftrl_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/w1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "linear/linear_model/w1/weights/part_0/Ftrl_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/w1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3000
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "linear/linear_model/w1/weights/part_0/Ftrl_1"
    }
  }
}
node {
  name: "linear/linear_model/w1/weights/part_0/Ftrl_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/w1/weights/part_0/Ftrl_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/w1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/w1/weights/part_0/Ftrl_1/Assign"
  op: "AssignVariableOp"
  input: "linear/linear_model/w1/weights/part_0/Ftrl_1"
  input: "linear/linear_model/w1/weights/part_0/Ftrl_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/w1/weights/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/w1/weights/part_0/Ftrl_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/w1/weights/part_0/Ftrl_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/w1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "head/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "linear/linear_model/bias_weights/part_0/Ftrl"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "linear/linear_model/bias_weights/part_0/Ftrl"
    }
  }
}
node {
  name: "linear/linear_model/bias_weights/part_0/Ftrl/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/bias_weights/part_0/Ftrl"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/bias_weights/part_0/Ftrl/Assign"
  op: "AssignVariableOp"
  input: "linear/linear_model/bias_weights/part_0/Ftrl"
  input: "head/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/bias_weights/part_0/Ftrl/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/bias_weights/part_0/Ftrl"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/bias_weights/part_0/Ftrl_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/linear_model/bias_weights/part_0/Ftrl_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "linear/linear_model/bias_weights/part_0/Ftrl_1"
    }
  }
}
node {
  name: "linear/linear_model/bias_weights/part_0/Ftrl_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/bias_weights/part_0/Ftrl_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/bias_weights/part_0/Ftrl_1/Assign"
  op: "AssignVariableOp"
  input: "linear/linear_model/bias_weights/part_0/Ftrl_1"
  input: "linear/linear_model/bias_weights/part_0/Ftrl_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/bias_weights/part_0/Ftrl_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/bias_weights/part_0/Ftrl_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "head/Ftrl/learning_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.004999999888241291
      }
    }
  }
}
node {
  name: "head/Ftrl/l1_regularization_strength"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "head/Ftrl/l2_regularization_strength"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "head/Ftrl/l2_shrinkage_regularization_strength"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "head/Ftrl/learning_rate_power"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.5
      }
    }
  }
}
node {
  name: "head/Ftrl/update_linear/linear_model/w1/weights/part_0/Unique"
  op: "Unique"
  input: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/w1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_idx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/Ftrl/update_linear/linear_model/w1/weights/part_0/Shape"
  op: "Shape"
  input: "head/Ftrl/update_linear/linear_model/w1/weights/part_0/Unique"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/w1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/Ftrl/update_linear/linear_model/w1/weights/part_0/strided_slice/stack"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/w1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/Ftrl/update_linear/linear_model/w1/weights/part_0/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/w1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/Ftrl/update_linear/linear_model/w1/weights/part_0/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/w1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/Ftrl/update_linear/linear_model/w1/weights/part_0/strided_slice"
  op: "StridedSlice"
  input: "head/Ftrl/update_linear/linear_model/w1/weights/part_0/Shape"
  input: "head/Ftrl/update_linear/linear_model/w1/weights/part_0/strided_slice/stack"
  input: "head/Ftrl/update_linear/linear_model/w1/weights/part_0/strided_slice/stack_1"
  input: "head/Ftrl/update_linear/linear_model/w1/weights/part_0/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/w1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "head/Ftrl/update_linear/linear_model/w1/weights/part_0/UnsortedSegmentSum"
  op: "UnsortedSegmentSum"
  input: "head/gradients_1/linear/linear_model_1/linear_model/w1/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/Reshape"
  input: "head/Ftrl/update_linear/linear_model/w1/weights/part_0/Unique:1"
  input: "head/Ftrl/update_linear/linear_model/w1/weights/part_0/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tnumsegments"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/w1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/Ftrl/update_linear/linear_model/w1/weights/part_0/ResourceSparseApplyFtrl"
  op: "ResourceSparseApplyFtrl"
  input: "linear/linear_model/w1/weights/part_0"
  input: "linear/linear_model/w1/weights/part_0/Ftrl"
  input: "linear/linear_model/w1/weights/part_0/Ftrl_1"
  input: "head/Ftrl/update_linear/linear_model/w1/weights/part_0/UnsortedSegmentSum"
  input: "head/Ftrl/update_linear/linear_model/w1/weights/part_0/Unique"
  input: "head/Ftrl/learning_rate"
  input: "head/Ftrl/l1_regularization_strength"
  input: "head/Ftrl/l2_regularization_strength"
  input: "head/Ftrl/learning_rate_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/w1/weights/part_0"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "head/Ftrl/update_linear/linear_model/bias_weights/part_0/ResourceApplyFtrl"
  op: "ResourceApplyFtrl"
  input: "linear/linear_model/bias_weights/part_0"
  input: "linear/linear_model/bias_weights/part_0/Ftrl"
  input: "linear/linear_model/bias_weights/part_0/Ftrl_1"
  input: "head/gradients_1/linear/linear_model_1/linear_model/weighted_sum_grad/tuple/control_dependency_1"
  input: "head/Ftrl/learning_rate"
  input: "head/Ftrl/l1_regularization_strength"
  input: "head/Ftrl/l2_regularization_strength"
  input: "head/Ftrl/learning_rate_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights/part_0"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "head/Ftrl"
  op: "NoOp"
  input: "^head/Ftrl/update_linear/linear_model/bias_weights/part_0/ResourceApplyFtrl"
  input: "^head/Ftrl/update_linear/linear_model/w1/weights/part_0/ResourceSparseApplyFtrl"
}
node {
  name: "head/group_deps"
  op: "NoOp"
  input: "^head/Adagrad"
  input: "^head/Ftrl"
}
node {
  name: "head/AssignAdd/value"
  op: "Const"
  input: "^head/group_deps"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "head/AssignAdd"
  op: "AssignAdd"
  input: "global_step"
  input: "head/AssignAdd/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "head/ones_like/Shape"
  op: "Shape"
  input: "head/logistic_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/ones_like/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/ones_like"
  op: "Fill"
  input: "head/ones_like/Shape"
  input: "head/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/mul"
  op: "Mul"
  input: "head/mul/x"
  input: "head/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "head/Sum"
  op: "Sum"
  input: "head/mul"
  input: "head/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/truediv"
  op: "RealDiv"
  input: "head/weighted_loss/Sum"
  input: "head/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "loss"
  op: "ScalarSummary"
  input: "loss/tags"
  input: "head/weighted_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "average_loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "average_loss"
      }
    }
  }
}
node {
  name: "average_loss"
  op: "ScalarSummary"
  input: "average_loss/tags"
  input: "head/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^dnn/hiddenlayer_0/bias/part_0/Adagrad/Assign"
  input: "^dnn/hiddenlayer_0/bias/part_0/Assign"
  input: "^dnn/hiddenlayer_0/kernel/part_0/Adagrad/Assign"
  input: "^dnn/hiddenlayer_0/kernel/part_0/Assign"
  input: "^dnn/hiddenlayer_1/bias/part_0/Adagrad/Assign"
  input: "^dnn/hiddenlayer_1/bias/part_0/Assign"
  input: "^dnn/hiddenlayer_1/kernel/part_0/Adagrad/Assign"
  input: "^dnn/hiddenlayer_1/kernel/part_0/Assign"
  input: "^dnn/hiddenlayer_2/bias/part_0/Adagrad/Assign"
  input: "^dnn/hiddenlayer_2/bias/part_0/Assign"
  input: "^dnn/hiddenlayer_2/kernel/part_0/Adagrad/Assign"
  input: "^dnn/hiddenlayer_2/kernel/part_0/Assign"
  input: "^dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0/Adagrad/Assign"
  input: "^dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0/Assign"
  input: "^dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0/Adagrad/Assign"
  input: "^dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0/Assign"
  input: "^dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0/Adagrad/Assign"
  input: "^dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0/Assign"
  input: "^dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0/Adagrad/Assign"
  input: "^dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0/Assign"
  input: "^dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0/Adagrad/Assign"
  input: "^dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0/Assign"
  input: "^dnn/logits/bias/part_0/Adagrad/Assign"
  input: "^dnn/logits/bias/part_0/Assign"
  input: "^dnn/logits/kernel/part_0/Adagrad/Assign"
  input: "^dnn/logits/kernel/part_0/Assign"
  input: "^global_step/Assign"
  input: "^linear/linear_model/bias_weights/part_0/Assign"
  input: "^linear/linear_model/bias_weights/part_0/Ftrl/Assign"
  input: "^linear/linear_model/bias_weights/part_0/Ftrl_1/Assign"
  input: "^linear/linear_model/w1/weights/part_0/Assign"
  input: "^linear/linear_model/w1/weights/part_0/Ftrl/Assign"
  input: "^linear/linear_model/w1/weights/part_0/Ftrl_1/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_2/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_2/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/w1/weights/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/bias_weights/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_0/bias/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_1/kernel/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_1/bias/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_2/kernel/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_2/bias/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "dnn/logits/kernel/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "dnn/logits/bias/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/w1/weights/part_0/Ftrl"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/w1/weights/part_0/Ftrl_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/bias_weights/part_0/Ftrl"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/bias_weights/part_0/Ftrl_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/IsVariableInitialized"
  input: "report_uninitialized_variables/IsVariableInitialized_1"
  input: "report_uninitialized_variables/IsVariableInitialized_2"
  input: "report_uninitialized_variables/IsVariableInitialized_3"
  input: "report_uninitialized_variables/IsVariableInitialized_4"
  input: "report_uninitialized_variables/IsVariableInitialized_5"
  input: "report_uninitialized_variables/IsVariableInitialized_6"
  input: "report_uninitialized_variables/IsVariableInitialized_7"
  input: "report_uninitialized_variables/IsVariableInitialized_8"
  input: "report_uninitialized_variables/IsVariableInitialized_9"
  input: "report_uninitialized_variables/IsVariableInitialized_10"
  input: "report_uninitialized_variables/IsVariableInitialized_11"
  input: "report_uninitialized_variables/IsVariableInitialized_12"
  input: "report_uninitialized_variables/IsVariableInitialized_13"
  input: "report_uninitialized_variables/VarIsInitializedOp"
  input: "report_uninitialized_variables/VarIsInitializedOp_1"
  input: "report_uninitialized_variables/IsVariableInitialized_14"
  input: "report_uninitialized_variables/IsVariableInitialized_15"
  input: "report_uninitialized_variables/IsVariableInitialized_16"
  input: "report_uninitialized_variables/IsVariableInitialized_17"
  input: "report_uninitialized_variables/IsVariableInitialized_18"
  input: "report_uninitialized_variables/IsVariableInitialized_19"
  input: "report_uninitialized_variables/IsVariableInitialized_20"
  input: "report_uninitialized_variables/IsVariableInitialized_21"
  input: "report_uninitialized_variables/IsVariableInitialized_22"
  input: "report_uninitialized_variables/IsVariableInitialized_23"
  input: "report_uninitialized_variables/IsVariableInitialized_24"
  input: "report_uninitialized_variables/IsVariableInitialized_25"
  input: "report_uninitialized_variables/IsVariableInitialized_26"
  input: "report_uninitialized_variables/VarIsInitializedOp_2"
  input: "report_uninitialized_variables/VarIsInitializedOp_3"
  input: "report_uninitialized_variables/VarIsInitializedOp_4"
  input: "report_uninitialized_variables/VarIsInitializedOp_5"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 33
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 33
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 33
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 33
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 33
          }
        }
        string_val: "global_step"
        string_val: "dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0"
        string_val: "dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0"
        string_val: "dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0"
        string_val: "dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0"
        string_val: "dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0"
        string_val: "dnn/hiddenlayer_0/kernel/part_0"
        string_val: "dnn/hiddenlayer_0/bias/part_0"
        string_val: "dnn/hiddenlayer_1/kernel/part_0"
        string_val: "dnn/hiddenlayer_1/bias/part_0"
        string_val: "dnn/hiddenlayer_2/kernel/part_0"
        string_val: "dnn/hiddenlayer_2/bias/part_0"
        string_val: "dnn/logits/kernel/part_0"
        string_val: "dnn/logits/bias/part_0"
        string_val: "linear/linear_model/w1/weights/part_0"
        string_val: "linear/linear_model/bias_weights/part_0"
        string_val: "dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0/Adagrad"
        string_val: "dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0/Adagrad"
        string_val: "dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0/Adagrad"
        string_val: "dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0/Adagrad"
        string_val: "dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0/Adagrad"
        string_val: "dnn/hiddenlayer_0/kernel/part_0/Adagrad"
        string_val: "dnn/hiddenlayer_0/bias/part_0/Adagrad"
        string_val: "dnn/hiddenlayer_1/kernel/part_0/Adagrad"
        string_val: "dnn/hiddenlayer_1/bias/part_0/Adagrad"
        string_val: "dnn/hiddenlayer_2/kernel/part_0/Adagrad"
        string_val: "dnn/hiddenlayer_2/bias/part_0/Adagrad"
        string_val: "dnn/logits/kernel/part_0/Adagrad"
        string_val: "dnn/logits/bias/part_0/Adagrad"
        string_val: "linear/linear_model/w1/weights/part_0/Ftrl"
        string_val: "linear/linear_model/w1/weights/part_0/Ftrl_1"
        string_val: "linear/linear_model/bias_weights/part_0/Ftrl"
        string_val: "linear/linear_model/bias_weights/part_0/Ftrl_1"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 33
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 33
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 33
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 33
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 33
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/GatherV2"
  input: "report_uninitialized_resources/Const"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_2/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_2/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/w1/weights/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/bias_weights/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_0/bias/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_1/kernel/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_1/bias/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_2/kernel/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_2/bias/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "dnn/logits/kernel/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "dnn/logits/bias/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/w1/weights/part_0/Ftrl"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/w1/weights/part_0/Ftrl_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/bias_weights/part_0/Ftrl"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/bias_weights/part_0/Ftrl_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/IsVariableInitialized"
  input: "report_uninitialized_variables_1/IsVariableInitialized_1"
  input: "report_uninitialized_variables_1/IsVariableInitialized_2"
  input: "report_uninitialized_variables_1/IsVariableInitialized_3"
  input: "report_uninitialized_variables_1/IsVariableInitialized_4"
  input: "report_uninitialized_variables_1/IsVariableInitialized_5"
  input: "report_uninitialized_variables_1/IsVariableInitialized_6"
  input: "report_uninitialized_variables_1/IsVariableInitialized_7"
  input: "report_uninitialized_variables_1/IsVariableInitialized_8"
  input: "report_uninitialized_variables_1/IsVariableInitialized_9"
  input: "report_uninitialized_variables_1/IsVariableInitialized_10"
  input: "report_uninitialized_variables_1/IsVariableInitialized_11"
  input: "report_uninitialized_variables_1/IsVariableInitialized_12"
  input: "report_uninitialized_variables_1/IsVariableInitialized_13"
  input: "report_uninitialized_variables_1/VarIsInitializedOp"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  input: "report_uninitialized_variables_1/IsVariableInitialized_14"
  input: "report_uninitialized_variables_1/IsVariableInitialized_15"
  input: "report_uninitialized_variables_1/IsVariableInitialized_16"
  input: "report_uninitialized_variables_1/IsVariableInitialized_17"
  input: "report_uninitialized_variables_1/IsVariableInitialized_18"
  input: "report_uninitialized_variables_1/IsVariableInitialized_19"
  input: "report_uninitialized_variables_1/IsVariableInitialized_20"
  input: "report_uninitialized_variables_1/IsVariableInitialized_21"
  input: "report_uninitialized_variables_1/IsVariableInitialized_22"
  input: "report_uninitialized_variables_1/IsVariableInitialized_23"
  input: "report_uninitialized_variables_1/IsVariableInitialized_24"
  input: "report_uninitialized_variables_1/IsVariableInitialized_25"
  input: "report_uninitialized_variables_1/IsVariableInitialized_26"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 33
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 33
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 33
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 33
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 33
          }
        }
        string_val: "global_step"
        string_val: "dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0"
        string_val: "dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0"
        string_val: "dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0"
        string_val: "dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0"
        string_val: "dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0"
        string_val: "dnn/hiddenlayer_0/kernel/part_0"
        string_val: "dnn/hiddenlayer_0/bias/part_0"
        string_val: "dnn/hiddenlayer_1/kernel/part_0"
        string_val: "dnn/hiddenlayer_1/bias/part_0"
        string_val: "dnn/hiddenlayer_2/kernel/part_0"
        string_val: "dnn/hiddenlayer_2/bias/part_0"
        string_val: "dnn/logits/kernel/part_0"
        string_val: "dnn/logits/bias/part_0"
        string_val: "linear/linear_model/w1/weights/part_0"
        string_val: "linear/linear_model/bias_weights/part_0"
        string_val: "dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0/Adagrad"
        string_val: "dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0/Adagrad"
        string_val: "dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0/Adagrad"
        string_val: "dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0/Adagrad"
        string_val: "dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0/Adagrad"
        string_val: "dnn/hiddenlayer_0/kernel/part_0/Adagrad"
        string_val: "dnn/hiddenlayer_0/bias/part_0/Adagrad"
        string_val: "dnn/hiddenlayer_1/kernel/part_0/Adagrad"
        string_val: "dnn/hiddenlayer_1/bias/part_0/Adagrad"
        string_val: "dnn/hiddenlayer_2/kernel/part_0/Adagrad"
        string_val: "dnn/hiddenlayer_2/bias/part_0/Adagrad"
        string_val: "dnn/logits/kernel/part_0/Adagrad"
        string_val: "dnn/logits/bias/part_0/Adagrad"
        string_val: "linear/linear_model/w1/weights/part_0/Ftrl"
        string_val: "linear/linear_model/w1/weights/part_0/Ftrl_1"
        string_val: "linear/linear_model/bias_weights/part_0/Ftrl"
        string_val: "linear/linear_model/bias_weights/part_0/Ftrl_1"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 33
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 33
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 33
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 33
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 33
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat_1"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  input: "report_uninitialized_resources_1/Const"
  input: "concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
  input: "^head/class_id_lookup/hash_table/table_init"
  input: "^head/predictions/class_string_lookup/table_init"
}
node {
  name: "init_3"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_2"
  input: "^init_3"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values"
  input: "dnn/dnn/hiddenlayer_0/activation"
  input: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values"
  input: "dnn/dnn/hiddenlayer_1/activation"
  input: "dnn/dnn/hiddenlayer_2/fraction_of_zero_values"
  input: "dnn/dnn/hiddenlayer_2/activation"
  input: "dnn/dnn/logits/fraction_of_zero_values"
  input: "dnn/dnn/logits/activation"
  input: "linear/bias"
  input: "linear/fraction_of_zero_weights"
  input: "linear/linear/fraction_of_zero_values"
  input: "linear/linear/activation"
  input: "loss"
  input: "average_loss"
  attr {
    key: "N"
    value {
      i: 14
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/filename/input"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/filename"
  op: "PlaceholderWithDefault"
  input: "save/filename/input"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Const"
  op: "PlaceholderWithDefault"
  input: "save/filename"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/bias_weights/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_1"
  op: "Identity"
  input: "save/Identity"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/bias_weights/part_0/Ftrl"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_2"
  op: "Identity"
  input: "save/Read_1/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_3"
  op: "Identity"
  input: "save/Identity_2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_2/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/bias_weights/part_0/Ftrl_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_4"
  op: "Identity"
  input: "save/Read_2/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_5"
  op: "Identity"
  input: "save/Identity_4"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/w1/weights/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_6"
  op: "Identity"
  input: "save/Read_3/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_7"
  op: "Identity"
  input: "save/Identity_6"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_4/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/w1/weights/part_0/Ftrl"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_8"
  op: "Identity"
  input: "save/Read_4/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_9"
  op: "Identity"
  input: "save/Identity_8"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_5/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/w1/weights/part_0/Ftrl_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_10"
  op: "Identity"
  input: "save/Read_5/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_11"
  op: "Identity"
  input: "save/Identity_10"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/StringJoin/inputs_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp_c49a226ee8364c988f70ddb8dc78e142/part"
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/StringJoin/inputs_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 27
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 27
          }
        }
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_0/bias/Adagrad"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_0/kernel/Adagrad"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/hiddenlayer_1/bias/Adagrad"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/hiddenlayer_1/kernel/Adagrad"
        string_val: "dnn/hiddenlayer_2/bias"
        string_val: "dnn/hiddenlayer_2/bias/Adagrad"
        string_val: "dnn/hiddenlayer_2/kernel"
        string_val: "dnn/hiddenlayer_2/kernel/Adagrad"
        string_val: "dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights"
        string_val: "dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/Adagrad"
        string_val: "dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights"
        string_val: "dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/Adagrad"
        string_val: "dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights"
        string_val: "dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/Adagrad"
        string_val: "dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights"
        string_val: "dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/Adagrad"
        string_val: "dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights"
        string_val: "dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/Adagrad"
        string_val: "dnn/logits/bias"
        string_val: "dnn/logits/bias/Adagrad"
        string_val: "dnn/logits/kernel"
        string_val: "dnn/logits/kernel/Adagrad"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 27
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 27
          }
        }
        string_val: "128 0,128"
        string_val: "128 0,128"
        string_val: "40 128 0,40:0,128"
        string_val: "40 128 0,40:0,128"
        string_val: "64 0,64"
        string_val: "64 0,64"
        string_val: "128 64 0,128:0,64"
        string_val: "128 64 0,128:0,64"
        string_val: "32 0,32"
        string_val: "32 0,32"
        string_val: "64 32 0,64:0,32"
        string_val: "64 32 0,64:0,32"
        string_val: "3000 8 0,3000:0,8"
        string_val: "3000 8 0,3000:0,8"
        string_val: "3000 8 0,3000:0,8"
        string_val: "3000 8 0,3000:0,8"
        string_val: "3000 8 0,3000:0,8"
        string_val: "3000 8 0,3000:0,8"
        string_val: "3000 8 0,3000:0,8"
        string_val: "3000 8 0,3000:0,8"
        string_val: "3000 8 0,3000:0,8"
        string_val: "3000 8 0,3000:0,8"
        string_val: "1 0,1"
        string_val: "1 0,1"
        string_val: "32 1 0,32:0,1"
        string_val: "32 1 0,32:0,1"
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "dnn/hiddenlayer_0/bias/part_0/read"
  input: "dnn/hiddenlayer_0/bias/part_0/Adagrad/read"
  input: "dnn/hiddenlayer_0/kernel/part_0/read"
  input: "dnn/hiddenlayer_0/kernel/part_0/Adagrad/read"
  input: "dnn/hiddenlayer_1/bias/part_0/read"
  input: "dnn/hiddenlayer_1/bias/part_0/Adagrad/read"
  input: "dnn/hiddenlayer_1/kernel/part_0/read"
  input: "dnn/hiddenlayer_1/kernel/part_0/Adagrad/read"
  input: "dnn/hiddenlayer_2/bias/part_0/read"
  input: "dnn/hiddenlayer_2/bias/part_0/Adagrad/read"
  input: "dnn/hiddenlayer_2/kernel/part_0/read"
  input: "dnn/hiddenlayer_2/kernel/part_0/Adagrad/read"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0/read"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0/Adagrad/read"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0/read"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0/Adagrad/read"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0/read"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0/Adagrad/read"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0/read"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0/Adagrad/read"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0/read"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0/Adagrad/read"
  input: "dnn/logits/bias/part_0/read"
  input: "dnn/logits/bias/part_0/Adagrad/read"
  input: "dnn/logits/kernel/part_0/read"
  input: "dnn/logits/kernel/part_0/Adagrad/read"
  input: "global_step"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/ShardedFilename_1/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename_1"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename_1/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/Read_6/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/bias_weights/part_0"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_12"
  op: "Identity"
  input: "save/Read_6/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_13"
  op: "Identity"
  input: "save/Identity_12"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_7/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/bias_weights/part_0/Ftrl"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_14"
  op: "Identity"
  input: "save/Read_7/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_15"
  op: "Identity"
  input: "save/Identity_14"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_8/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/bias_weights/part_0/Ftrl_1"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_16"
  op: "Identity"
  input: "save/Read_8/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_17"
  op: "Identity"
  input: "save/Identity_16"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_9/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/w1/weights/part_0"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_18"
  op: "Identity"
  input: "save/Read_9/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_19"
  op: "Identity"
  input: "save/Identity_18"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_10/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/w1/weights/part_0/Ftrl"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_20"
  op: "Identity"
  input: "save/Read_10/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_21"
  op: "Identity"
  input: "save/Identity_20"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_11/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/w1/weights/part_0/Ftrl_1"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_22"
  op: "Identity"
  input: "save/Read_11/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_23"
  op: "Identity"
  input: "save/Identity_22"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/SaveV2_1/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 6
          }
        }
        string_val: "linear/linear_model/bias_weights"
        string_val: "linear/linear_model/bias_weights/Ftrl"
        string_val: "linear/linear_model/bias_weights/Ftrl_1"
        string_val: "linear/linear_model/w1/weights"
        string_val: "linear/linear_model/w1/weights/Ftrl"
        string_val: "linear/linear_model/w1/weights/Ftrl_1"
      }
    }
  }
}
node {
  name: "save/SaveV2_1/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 6
          }
        }
        string_val: "1 0,1"
        string_val: "1 0,1"
        string_val: "1 0,1"
        string_val: "3000 1 0,3000:0,1"
        string_val: "3000 1 0,3000:0,1"
        string_val: "3000 1 0,3000:0,1"
      }
    }
  }
}
node {
  name: "save/SaveV2_1"
  op: "SaveV2"
  input: "save/ShardedFilename_1"
  input: "save/SaveV2_1/tensor_names"
  input: "save/SaveV2_1/shape_and_slices"
  input: "save/Identity_13"
  input: "save/Identity_15"
  input: "save/Identity_17"
  input: "save/Identity_19"
  input: "save/Identity_21"
  input: "save/Identity_23"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency_1"
  op: "Identity"
  input: "save/ShardedFilename_1"
  input: "^save/SaveV2_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "save/ShardedFilename_1"
  input: "^save/control_dependency"
  input: "^save/control_dependency_1"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  device: "/device:CPU:0"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity_24"
  op: "Identity"
  input: "save/Const"
  input: "^save/MergeV2Checkpoints"
  input: "^save/control_dependency"
  input: "^save/control_dependency_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 27
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 27
          }
        }
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_0/bias/Adagrad"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_0/kernel/Adagrad"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/hiddenlayer_1/bias/Adagrad"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/hiddenlayer_1/kernel/Adagrad"
        string_val: "dnn/hiddenlayer_2/bias"
        string_val: "dnn/hiddenlayer_2/bias/Adagrad"
        string_val: "dnn/hiddenlayer_2/kernel"
        string_val: "dnn/hiddenlayer_2/kernel/Adagrad"
        string_val: "dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights"
        string_val: "dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/Adagrad"
        string_val: "dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights"
        string_val: "dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/Adagrad"
        string_val: "dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights"
        string_val: "dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/Adagrad"
        string_val: "dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights"
        string_val: "dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/Adagrad"
        string_val: "dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights"
        string_val: "dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/Adagrad"
        string_val: "dnn/logits/bias"
        string_val: "dnn/logits/bias/Adagrad"
        string_val: "dnn/logits/kernel"
        string_val: "dnn/logits/kernel/Adagrad"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 27
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 27
          }
        }
        string_val: "128 0,128"
        string_val: "128 0,128"
        string_val: "40 128 0,40:0,128"
        string_val: "40 128 0,40:0,128"
        string_val: "64 0,64"
        string_val: "64 0,64"
        string_val: "128 64 0,128:0,64"
        string_val: "128 64 0,128:0,64"
        string_val: "32 0,32"
        string_val: "32 0,32"
        string_val: "64 32 0,64:0,32"
        string_val: "64 32 0,64:0,32"
        string_val: "3000 8 0,3000:0,8"
        string_val: "3000 8 0,3000:0,8"
        string_val: "3000 8 0,3000:0,8"
        string_val: "3000 8 0,3000:0,8"
        string_val: "3000 8 0,3000:0,8"
        string_val: "3000 8 0,3000:0,8"
        string_val: "3000 8 0,3000:0,8"
        string_val: "3000 8 0,3000:0,8"
        string_val: "3000 8 0,3000:0,8"
        string_val: "3000 8 0,3000:0,8"
        string_val: "1 0,1"
        string_val: "1 0,1"
        string_val: "32 1 0,32:0,1"
        string_val: "32 1 0,32:0,1"
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
        shape {
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 1
          }
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_0/bias/part_0"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "dnn/hiddenlayer_0/bias/part_0/Adagrad"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "dnn/hiddenlayer_1/bias/part_0"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "dnn/hiddenlayer_1/bias/part_0/Adagrad"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "dnn/hiddenlayer_1/kernel/part_0/Adagrad"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "dnn/hiddenlayer_2/bias/part_0"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "dnn/hiddenlayer_2/bias/part_0/Adagrad"
  input: "save/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "dnn/hiddenlayer_2/kernel/part_0"
  input: "save/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "dnn/hiddenlayer_2/kernel/part_0/Adagrad"
  input: "save/RestoreV2:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0"
  input: "save/RestoreV2:12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0/Adagrad"
  input: "save/RestoreV2:13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d0_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0"
  input: "save/RestoreV2:14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0/Adagrad"
  input: "save/RestoreV2:15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d1_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0"
  input: "save/RestoreV2:16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0/Adagrad"
  input: "save/RestoreV2:17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d2_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0"
  input: "save/RestoreV2:18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0/Adagrad"
  input: "save/RestoreV2:19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d3_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0"
  input: "save/RestoreV2:20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0/Adagrad"
  input: "save/RestoreV2:21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/d4_embedding/embedding_weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_22"
  op: "Assign"
  input: "dnn/logits/bias/part_0"
  input: "save/RestoreV2:22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_23"
  op: "Assign"
  input: "dnn/logits/bias/part_0/Adagrad"
  input: "save/RestoreV2:23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_24"
  op: "Assign"
  input: "dnn/logits/kernel/part_0"
  input: "save/RestoreV2:24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_25"
  op: "Assign"
  input: "dnn/logits/kernel/part_0/Adagrad"
  input: "save/RestoreV2:25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_26"
  op: "Assign"
  input: "global_step"
  input: "save/RestoreV2:26"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
  input: "^save/Assign_18"
  input: "^save/Assign_19"
  input: "^save/Assign_2"
  input: "^save/Assign_20"
  input: "^save/Assign_21"
  input: "^save/Assign_22"
  input: "^save/Assign_23"
  input: "^save/Assign_24"
  input: "^save/Assign_25"
  input: "^save/Assign_26"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
}
node {
  name: "save/RestoreV2_1/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 6
          }
        }
        string_val: "linear/linear_model/bias_weights"
        string_val: "linear/linear_model/bias_weights/Ftrl"
        string_val: "linear/linear_model/bias_weights/Ftrl_1"
        string_val: "linear/linear_model/w1/weights"
        string_val: "linear/linear_model/w1/weights/Ftrl"
        string_val: "linear/linear_model/w1/weights/Ftrl_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_1/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 6
          }
        }
        string_val: "1 0,1"
        string_val: "1 0,1"
        string_val: "1 0,1"
        string_val: "3000 1 0,3000:0,1"
        string_val: "3000 1 0,3000:0,1"
        string_val: "3000 1 0,3000:0,1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_1"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_1/tensor_names"
  input: "save/RestoreV2_1/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Identity_25"
  op: "Identity"
  input: "save/RestoreV2_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp"
  op: "AssignVariableOp"
  input: "linear/linear_model/bias_weights/part_0"
  input: "save/Identity_25"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_26"
  op: "Identity"
  input: "save/RestoreV2_1:1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_1"
  op: "AssignVariableOp"
  input: "linear/linear_model/bias_weights/part_0/Ftrl"
  input: "save/Identity_26"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_27"
  op: "Identity"
  input: "save/RestoreV2_1:2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_2"
  op: "AssignVariableOp"
  input: "linear/linear_model/bias_weights/part_0/Ftrl_1"
  input: "save/Identity_27"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_28"
  op: "Identity"
  input: "save/RestoreV2_1:3"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_3"
  op: "AssignVariableOp"
  input: "linear/linear_model/w1/weights/part_0"
  input: "save/Identity_28"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_29"
  op: "Identity"
  input: "save/RestoreV2_1:4"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_4"
  op: "AssignVariableOp"
  input: "linear/linear_model/w1/weights/part_0/Ftrl"
  input: "save/Identity_29"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_30"
  op: "Identity"
  input: "save/RestoreV2_1:5"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3000
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_5"
  op: "AssignVariableOp"
  input: "linear/linear_model/w1/weights/part_0/Ftrl_1"
  input: "save/Identity_30"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/restore_shard_1"
  op: "NoOp"
  input: "^save/AssignVariableOp"
  input: "^save/AssignVariableOp_1"
  input: "^save/AssignVariableOp_2"
  input: "^save/AssignVariableOp_3"
  input: "^save/AssignVariableOp_4"
  input: "^save/AssignVariableOp_5"
  device: "/device:CPU:0"
}
node {
  name: "save/restore_all/NoOp"
  op: "NoOp"
  input: "^save/restore_shard"
}
node {
  name: "save/restore_all/NoOp_1"
  op: "NoOp"
  input: "^save/restore_shard_1"
  device: "/device:CPU:0"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_all/NoOp"
  input: "^save/restore_all/NoOp_1"
}
library {
  function {
    signature {
      name: "Dataset_map_parse_one_batch_26"
      input_arg {
        name: "arg0"
        type: DT_STRING
      }
      output_arg {
        name: "cond_1_merge"
        type: DT_STRING
      }
      output_arg {
        name: "cond_2_merge"
        type: DT_STRING
      }
      output_arg {
        name: "cond_3_merge"
        type: DT_STRING
      }
      output_arg {
        name: "cond_4_merge"
        type: DT_STRING
      }
      output_arg {
        name: "cond_5_merge"
        type: DT_STRING
      }
      output_arg {
        name: "cond_merge"
        type: DT_STRING
      }
      output_arg {
        name: "stack"
        type: DT_STRING
      }
      description: "Wrapper for passing nested structures to and from tf.data functions."
      is_stateful: true
    }
    node_def {
      name: "DecodeCSV/record_defaults_0"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node_def {
      name: "DecodeCSV/record_defaults_1"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node_def {
      name: "DecodeCSV/record_defaults_2"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node_def {
      name: "DecodeCSV/record_defaults_3"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node_def {
      name: "DecodeCSV/record_defaults_4"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node_def {
      name: "DecodeCSV/record_defaults_5"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node_def {
      name: "DecodeCSV/record_defaults_6"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node_def {
      name: "DecodeCSV"
      op: "DecodeCSV"
      input: "arg0"
      input: "DecodeCSV/record_defaults_0:output:0"
      input: "DecodeCSV/record_defaults_1:output:0"
      input: "DecodeCSV/record_defaults_2:output:0"
      input: "DecodeCSV/record_defaults_3:output:0"
      input: "DecodeCSV/record_defaults_4:output:0"
      input: "DecodeCSV/record_defaults_5:output:0"
      input: "DecodeCSV/record_defaults_6:output:0"
      device: "/device:CPU:0"
      attr {
        key: "OUT_TYPE"
        value {
          list {
            type: DT_STRING
            type: DT_STRING
            type: DT_STRING
            type: DT_STRING
            type: DT_STRING
            type: DT_STRING
            type: DT_STRING
          }
        }
      }
      attr {
        key: "field_delim"
        value {
          s: ","
        }
      }
      attr {
        key: "na_value"
        value {
          s: ""
        }
      }
      attr {
        key: "select_cols"
        value {
          list {
          }
        }
      }
      attr {
        key: "use_quote_delim"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: ":"
          }
        }
      }
    }
    node_def {
      name: "StringSplit"
      op: "StringSplit"
      input: "DecodeCSV:output:0"
      input: "Const:output:0"
      device: "/device:CPU:0"
      attr {
        key: "skip_empty"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "Equal/x"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "w1"
          }
        }
      }
    }
    node_def {
      name: "Equal/y"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "w1"
          }
        }
      }
    }
    node_def {
      name: "Equal"
      op: "Equal"
      input: "Equal/x:output:0"
      input: "Equal/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
    }
    node_def {
      name: "cond/Switch"
      op: "Switch"
      input: "Equal:z:0"
      input: "Equal:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
    }
    node_def {
      name: "cond/switch_t"
      op: "Identity"
      input: "cond/Switch:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
    }
    node_def {
      name: "cond/switch_f"
      op: "Identity"
      input: "cond/Switch:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
    }
    node_def {
      name: "cond/pred_id"
      op: "Identity"
      input: "Equal:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
    }
    node_def {
      name: "cond/StringToNumber"
      op: "StringToNumber"
      input: "cond/StringToNumber/Switch:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "out_type"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond/StringToNumber/Switch"
      op: "Switch"
      input: "StringSplit:values:0"
      input: "cond/pred_id:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@StringSplit"
          }
        }
      }
    }
    node_def {
      name: "cond/Reshape/shape"
      op: "Const"
      input: "^cond/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\032\000\000\000\002\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond/Reshape"
      op: "Reshape"
      input: "cond/StringToNumber:output:0"
      input: "cond/Reshape/shape:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map/elem"
      op: "Const"
      input: "^cond/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 26
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\021\000\000\000\000\000\000\000\022\000\000\000\000\000\000\000\023\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\025\000\000\000\000\000\000\000\026\000\000\000\000\000\000\000\027\000\000\000\000\000\000\000\030\000\000\000\000\000\000\000\031\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond/map/TensorArray/size"
      op: "Const"
      input: "^cond/switch_t"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond/map/TensorArray"
      op: "TensorArrayV3"
      input: "cond/map/TensorArray/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond/map/TensorArray_1/size"
      op: "Const"
      input: "^cond/switch_t"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond/map/TensorArray_1"
      op: "TensorArrayV3"
      input: "cond/map/TensorArray_1/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond/map/TensorArrayUnstack/Shape"
      op: "Const"
      input: "^cond/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond/map/TensorArrayUnstack/strided_slice/stack"
      op: "Const"
      input: "^cond/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond/map/TensorArrayUnstack/strided_slice/stack_1"
      op: "Const"
      input: "^cond/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond/map/TensorArrayUnstack/strided_slice/stack_2"
      op: "Const"
      input: "^cond/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond/map/TensorArrayUnstack/strided_slice"
      op: "StridedSlice"
      input: "cond/map/TensorArrayUnstack/Shape:output:0"
      input: "cond/map/TensorArrayUnstack/strided_slice/stack:output:0"
      input: "cond/map/TensorArrayUnstack/strided_slice/stack_1:output:0"
      input: "cond/map/TensorArrayUnstack/strided_slice/stack_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "cond/map/TensorArrayUnstack/range/start"
      op: "Const"
      input: "^cond/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond/map/TensorArrayUnstack/range/delta"
      op: "Const"
      input: "^cond/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond/map/TensorArrayUnstack/range"
      op: "Range"
      input: "cond/map/TensorArrayUnstack/range/start:output:0"
      input: "cond/map/TensorArrayUnstack/strided_slice:output:0"
      input: "cond/map/TensorArrayUnstack/range/delta:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
      op: "TensorArrayScatterV3"
      input: "cond/map/TensorArray:handle:0"
      input: "cond/map/TensorArrayUnstack/range:output:0"
      input: "cond/map/elem:output:0"
      input: "cond/map/TensorArray:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map/elem"
          }
        }
      }
    }
    node_def {
      name: "cond/map/TensorArrayUnstack_1/Shape"
      op: "Const"
      input: "^cond/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\032\000\000\000\002\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond/map/TensorArrayUnstack_1/strided_slice/stack"
      op: "Const"
      input: "^cond/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond/map/TensorArrayUnstack_1/strided_slice/stack_1"
      op: "Const"
      input: "^cond/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond/map/TensorArrayUnstack_1/strided_slice/stack_2"
      op: "Const"
      input: "^cond/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond/map/TensorArrayUnstack_1/strided_slice"
      op: "StridedSlice"
      input: "cond/map/TensorArrayUnstack_1/Shape:output:0"
      input: "cond/map/TensorArrayUnstack_1/strided_slice/stack:output:0"
      input: "cond/map/TensorArrayUnstack_1/strided_slice/stack_1:output:0"
      input: "cond/map/TensorArrayUnstack_1/strided_slice/stack_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "cond/map/TensorArrayUnstack_1/range/start"
      op: "Const"
      input: "^cond/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond/map/TensorArrayUnstack_1/range/delta"
      op: "Const"
      input: "^cond/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond/map/TensorArrayUnstack_1/range"
      op: "Range"
      input: "cond/map/TensorArrayUnstack_1/range/start:output:0"
      input: "cond/map/TensorArrayUnstack_1/strided_slice:output:0"
      input: "cond/map/TensorArrayUnstack_1/range/delta:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
      op: "TensorArrayScatterV3"
      input: "cond/map/TensorArray_1:handle:0"
      input: "cond/map/TensorArrayUnstack_1/range:output:0"
      input: "cond/Reshape:output:0"
      input: "cond/map/TensorArray_1:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/Reshape"
          }
        }
      }
    }
    node_def {
      name: "cond/map/Const"
      op: "Const"
      input: "^cond/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond/map/TensorArray_2/size"
      op: "Const"
      input: "^cond/switch_t"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond/map/TensorArray_2"
      op: "TensorArrayV3"
      input: "cond/map/TensorArray_2/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond/map/TensorArray_3/size"
      op: "Const"
      input: "^cond/switch_t"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond/map/TensorArray_3"
      op: "TensorArrayV3"
      input: "cond/map/TensorArray_3/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond/map/while/maximum_iterations"
      op: "Const"
      input: "^cond/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond/map/while/iteration_counter"
      op: "Const"
      input: "^cond/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond/map/while/Enter"
      op: "Enter"
      input: "cond/map/while/iteration_counter:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond/map/while/Enter_1"
      op: "Enter"
      input: "cond/map/Const:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond/map/while/Enter_2"
      op: "Enter"
      input: "cond/map/TensorArray_2:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond/map/while/Enter_3"
      op: "Enter"
      input: "cond/map/TensorArray_3:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond/map/while/Merge"
      op: "Merge"
      input: "cond/map/while/Enter:output:0"
      input: "cond/map/while/NextIteration:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map/while/Merge_1"
      op: "Merge"
      input: "cond/map/while/Enter_1:output:0"
      input: "cond/map/while/NextIteration_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map/while/Merge_2"
      op: "Merge"
      input: "cond/map/while/Enter_2:output:0"
      input: "cond/map/while/NextIteration_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond/map/while/Merge_3"
      op: "Merge"
      input: "cond/map/while/Enter_3:output:0"
      input: "cond/map/while/NextIteration_3:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond/map/while/Less"
      op: "Less"
      input: "cond/map/while/Merge:output:0"
      input: "cond/map/while/Less/Enter:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map/while/Less/Enter"
      op: "Enter"
      input: "cond/map/while/maximum_iterations:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond/map/while/Less_1/y"
      op: "Const"
      input: "^cond/map/while/Merge"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond/map/while/Less_1"
      op: "Less"
      input: "cond/map/while/Merge_1:output:0"
      input: "cond/map/while/Less_1/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map/while/LogicalAnd"
      op: "LogicalAnd"
      input: "cond/map/while/Less:z:0"
      input: "cond/map/while/Less_1:z:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "cond/map/while/LoopCond"
      op: "LoopCond"
      input: "cond/map/while/LogicalAnd:z:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "cond/map/while/Switch"
      op: "Switch"
      input: "cond/map/while/Merge:output:0"
      input: "cond/map/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map/while/Merge"
          }
        }
      }
    }
    node_def {
      name: "cond/map/while/Switch_1"
      op: "Switch"
      input: "cond/map/while/Merge_1:output:0"
      input: "cond/map/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map/while/Merge_1"
          }
        }
      }
    }
    node_def {
      name: "cond/map/while/Switch_2"
      op: "Switch"
      input: "cond/map/while/Merge_2:output:0"
      input: "cond/map/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map/while/Merge_2"
          }
        }
      }
    }
    node_def {
      name: "cond/map/while/Switch_3"
      op: "Switch"
      input: "cond/map/while/Merge_3:output:0"
      input: "cond/map/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map/while/Merge_3"
          }
        }
      }
    }
    node_def {
      name: "cond/map/while/Identity"
      op: "Identity"
      input: "cond/map/while/Switch:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map/while/Identity_1"
      op: "Identity"
      input: "cond/map/while/Switch_1:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map/while/Identity_2"
      op: "Identity"
      input: "cond/map/while/Switch_2:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond/map/while/Identity_3"
      op: "Identity"
      input: "cond/map/while/Switch_3:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond/map/while/add/y"
      op: "Const"
      input: "^cond/map/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond/map/while/add"
      op: "Add"
      input: "cond/map/while/Identity:output:0"
      input: "cond/map/while/add/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map/while/TensorArrayReadV3"
      op: "TensorArrayReadV3"
      input: "cond/map/while/TensorArrayReadV3/Enter:output:0"
      input: "cond/map/while/Identity_1:output:0"
      input: "cond/map/while/TensorArrayReadV3/Enter_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
    }
    node_def {
      name: "cond/map/while/TensorArrayReadV3/Enter"
      op: "Enter"
      input: "cond/map/TensorArray:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond/map/while/TensorArrayReadV3/Enter_1"
      op: "Enter"
      input: "cond/map/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond/map/while/TensorArrayReadV3_1"
      op: "TensorArrayReadV3"
      input: "cond/map/while/TensorArrayReadV3_1/Enter:output:0"
      input: "cond/map/while/Identity_1:output:0"
      input: "cond/map/while/TensorArrayReadV3_1/Enter_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond/map/while/TensorArrayReadV3_1/Enter"
      op: "Enter"
      input: "cond/map/TensorArray_1:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond/map/while/TensorArrayReadV3_1/Enter_1"
      op: "Enter"
      input: "cond/map/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond/map/while/strided_slice/stack"
      op: "Const"
      input: "^cond/map/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond/map/while/strided_slice/stack_1"
      op: "Const"
      input: "^cond/map/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond/map/while/strided_slice/stack_2"
      op: "Const"
      input: "^cond/map/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond/map/while/strided_slice"
      op: "StridedSlice"
      input: "cond/map/while/TensorArrayReadV3_1:value:0"
      input: "cond/map/while/strided_slice/stack:output:0"
      input: "cond/map/while/strided_slice/stack_1:output:0"
      input: "cond/map/while/strided_slice/stack_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "cond/map/while/ToInt64"
      op: "Cast"
      input: "cond/map/while/strided_slice:output:0"
      device: "/device:CPU:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "cond/map/while/TensorArrayWrite/TensorArrayWriteV3"
      op: "TensorArrayWriteV3"
      input: "cond/map/while/TensorArrayWrite/TensorArrayWriteV3/Enter:output:0"
      input: "cond/map/while/Identity_1:output:0"
      input: "cond/map/while/TensorArrayReadV3:value:0"
      input: "cond/map/while/Identity_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map/while/TensorArrayReadV3"
          }
        }
      }
    }
    node_def {
      name: "cond/map/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
      op: "Enter"
      input: "cond/map/TensorArray_2:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map/while/TensorArrayReadV3"
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond/map/while/TensorArrayWrite_1/TensorArrayWriteV3"
      op: "TensorArrayWriteV3"
      input: "cond/map/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter:output:0"
      input: "cond/map/while/Identity_1:output:0"
      input: "cond/map/while/ToInt64:y:0"
      input: "cond/map/while/Identity_3:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map/while/ToInt64"
          }
        }
      }
    }
    node_def {
      name: "cond/map/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
      op: "Enter"
      input: "cond/map/TensorArray_3:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map/while/ToInt64"
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond/map/while/add_1/y"
      op: "Const"
      input: "^cond/map/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond/map/while/add_1"
      op: "Add"
      input: "cond/map/while/Identity_1:output:0"
      input: "cond/map/while/add_1/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map/while/NextIteration"
      op: "NextIteration"
      input: "cond/map/while/add:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map/while/NextIteration_1"
      op: "NextIteration"
      input: "cond/map/while/add_1:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map/while/NextIteration_2"
      op: "NextIteration"
      input: "cond/map/while/TensorArrayWrite/TensorArrayWriteV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond/map/while/NextIteration_3"
      op: "NextIteration"
      input: "cond/map/while/TensorArrayWrite_1/TensorArrayWriteV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond/map/while/Exit"
      op: "Exit"
      input: "cond/map/while/Switch:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map/while/Exit_1"
      op: "Exit"
      input: "cond/map/while/Switch_1:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map/while/Exit_2"
      op: "Exit"
      input: "cond/map/while/Switch_2:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond/map/while/Exit_3"
      op: "Exit"
      input: "cond/map/while/Switch_3:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond/map/TensorArrayStack/TensorArraySizeV3"
      op: "TensorArraySizeV3"
      input: "cond/map/TensorArray_2:handle:0"
      input: "cond/map/while/Exit_2:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map/TensorArray_2"
          }
        }
      }
    }
    node_def {
      name: "cond/map/TensorArrayStack/range/start"
      op: "Const"
      input: "^cond/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond/map/TensorArrayStack/range/delta"
      op: "Const"
      input: "^cond/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond/map/TensorArrayStack/range"
      op: "Range"
      input: "cond/map/TensorArrayStack/range/start:output:0"
      input: "cond/map/TensorArrayStack/TensorArraySizeV3:size:0"
      input: "cond/map/TensorArrayStack/range/delta:output:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map/TensorArray_2"
          }
        }
      }
    }
    node_def {
      name: "cond/map/TensorArrayStack/TensorArrayGatherV3"
      op: "TensorArrayGatherV3"
      input: "cond/map/TensorArray_2:handle:0"
      input: "cond/map/TensorArrayStack/range:output:0"
      input: "cond/map/while/Exit_2:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
          }
        }
      }
    }
    node_def {
      name: "cond/map/TensorArrayStack_1/TensorArraySizeV3"
      op: "TensorArraySizeV3"
      input: "cond/map/TensorArray_3:handle:0"
      input: "cond/map/while/Exit_3:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map/TensorArray_3"
          }
        }
      }
    }
    node_def {
      name: "cond/map/TensorArrayStack_1/range/start"
      op: "Const"
      input: "^cond/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map/TensorArray_3"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond/map/TensorArrayStack_1/range/delta"
      op: "Const"
      input: "^cond/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map/TensorArray_3"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond/map/TensorArrayStack_1/range"
      op: "Range"
      input: "cond/map/TensorArrayStack_1/range/start:output:0"
      input: "cond/map/TensorArrayStack_1/TensorArraySizeV3:size:0"
      input: "cond/map/TensorArrayStack_1/range/delta:output:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map/TensorArray_3"
          }
        }
      }
    }
    node_def {
      name: "cond/map/TensorArrayStack_1/TensorArrayGatherV3"
      op: "TensorArrayGatherV3"
      input: "cond/map/TensorArray_3:handle:0"
      input: "cond/map/TensorArrayStack_1/range:output:0"
      input: "cond/map/while/Exit_3:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map/TensorArray_3"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
          }
        }
      }
    }
    node_def {
      name: "cond/transpose/a"
      op: "Pack"
      input: "cond/map/TensorArrayStack/TensorArrayGatherV3:value:0"
      input: "cond/map/TensorArrayStack_1/TensorArrayGatherV3:value:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "cond/transpose/perm"
      op: "Const"
      input: "^cond/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond/transpose"
      op: "Transpose"
      input: "cond/transpose/a:output:0"
      input: "cond/transpose/perm:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/AsString"
      op: "AsString"
      input: "cond/Reshape:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "fill"
        value {
          s: ""
        }
      }
      attr {
        key: "precision"
        value {
          i: -1
        }
      }
      attr {
        key: "scientific"
        value {
          b: false
        }
      }
      attr {
        key: "shortest"
        value {
          b: false
        }
      }
      attr {
        key: "width"
        value {
          i: -1
        }
      }
    }
    node_def {
      name: "cond/map_1/TensorArray/size"
      op: "Const"
      input: "^cond/switch_t"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond/map_1/TensorArray"
      op: "TensorArrayV3"
      input: "cond/map_1/TensorArray/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond/map_1/TensorArrayUnstack/Shape"
      op: "Const"
      input: "^cond/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\032\000\000\000\002\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond/map_1/TensorArrayUnstack/strided_slice/stack"
      op: "Const"
      input: "^cond/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond/map_1/TensorArrayUnstack/strided_slice/stack_1"
      op: "Const"
      input: "^cond/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond/map_1/TensorArrayUnstack/strided_slice/stack_2"
      op: "Const"
      input: "^cond/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond/map_1/TensorArrayUnstack/strided_slice"
      op: "StridedSlice"
      input: "cond/map_1/TensorArrayUnstack/Shape:output:0"
      input: "cond/map_1/TensorArrayUnstack/strided_slice/stack:output:0"
      input: "cond/map_1/TensorArrayUnstack/strided_slice/stack_1:output:0"
      input: "cond/map_1/TensorArrayUnstack/strided_slice/stack_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "cond/map_1/TensorArrayUnstack/range/start"
      op: "Const"
      input: "^cond/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond/map_1/TensorArrayUnstack/range/delta"
      op: "Const"
      input: "^cond/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond/map_1/TensorArrayUnstack/range"
      op: "Range"
      input: "cond/map_1/TensorArrayUnstack/range/start:output:0"
      input: "cond/map_1/TensorArrayUnstack/strided_slice:output:0"
      input: "cond/map_1/TensorArrayUnstack/range/delta:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
      op: "TensorArrayScatterV3"
      input: "cond/map_1/TensorArray:handle:0"
      input: "cond/map_1/TensorArrayUnstack/range:output:0"
      input: "cond/AsString:output:0"
      input: "cond/map_1/TensorArray:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/AsString"
          }
        }
      }
    }
    node_def {
      name: "cond/map_1/Const"
      op: "Const"
      input: "^cond/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond/map_1/TensorArray_1/size"
      op: "Const"
      input: "^cond/switch_t"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond/map_1/TensorArray_1"
      op: "TensorArrayV3"
      input: "cond/map_1/TensorArray_1/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond/map_1/while/maximum_iterations"
      op: "Const"
      input: "^cond/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond/map_1/while/iteration_counter"
      op: "Const"
      input: "^cond/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond/map_1/while/Enter"
      op: "Enter"
      input: "cond/map_1/while/iteration_counter:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond/map_1/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond/map_1/while/Enter_1"
      op: "Enter"
      input: "cond/map_1/Const:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond/map_1/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond/map_1/while/Enter_2"
      op: "Enter"
      input: "cond/map_1/TensorArray_1:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond/map_1/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond/map_1/while/Merge"
      op: "Merge"
      input: "cond/map_1/while/Enter:output:0"
      input: "cond/map_1/while/NextIteration:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map_1/while/Merge_1"
      op: "Merge"
      input: "cond/map_1/while/Enter_1:output:0"
      input: "cond/map_1/while/NextIteration_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map_1/while/Merge_2"
      op: "Merge"
      input: "cond/map_1/while/Enter_2:output:0"
      input: "cond/map_1/while/NextIteration_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond/map_1/while/Less"
      op: "Less"
      input: "cond/map_1/while/Merge:output:0"
      input: "cond/map_1/while/Less/Enter:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map_1/while/Less/Enter"
      op: "Enter"
      input: "cond/map_1/while/maximum_iterations:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond/map_1/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond/map_1/while/Less_1/y"
      op: "Const"
      input: "^cond/map_1/while/Merge"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond/map_1/while/Less_1"
      op: "Less"
      input: "cond/map_1/while/Merge_1:output:0"
      input: "cond/map_1/while/Less_1/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map_1/while/LogicalAnd"
      op: "LogicalAnd"
      input: "cond/map_1/while/Less:z:0"
      input: "cond/map_1/while/Less_1:z:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "cond/map_1/while/LoopCond"
      op: "LoopCond"
      input: "cond/map_1/while/LogicalAnd:z:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "cond/map_1/while/Switch"
      op: "Switch"
      input: "cond/map_1/while/Merge:output:0"
      input: "cond/map_1/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map_1/while/Merge"
          }
        }
      }
    }
    node_def {
      name: "cond/map_1/while/Switch_1"
      op: "Switch"
      input: "cond/map_1/while/Merge_1:output:0"
      input: "cond/map_1/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map_1/while/Merge_1"
          }
        }
      }
    }
    node_def {
      name: "cond/map_1/while/Switch_2"
      op: "Switch"
      input: "cond/map_1/while/Merge_2:output:0"
      input: "cond/map_1/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map_1/while/Merge_2"
          }
        }
      }
    }
    node_def {
      name: "cond/map_1/while/Identity"
      op: "Identity"
      input: "cond/map_1/while/Switch:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map_1/while/Identity_1"
      op: "Identity"
      input: "cond/map_1/while/Switch_1:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map_1/while/Identity_2"
      op: "Identity"
      input: "cond/map_1/while/Switch_2:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond/map_1/while/add/y"
      op: "Const"
      input: "^cond/map_1/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond/map_1/while/add"
      op: "Add"
      input: "cond/map_1/while/Identity:output:0"
      input: "cond/map_1/while/add/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map_1/while/TensorArrayReadV3"
      op: "TensorArrayReadV3"
      input: "cond/map_1/while/TensorArrayReadV3/Enter:output:0"
      input: "cond/map_1/while/Identity_1:output:0"
      input: "cond/map_1/while/TensorArrayReadV3/Enter_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
    }
    node_def {
      name: "cond/map_1/while/TensorArrayReadV3/Enter"
      op: "Enter"
      input: "cond/map_1/TensorArray:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond/map_1/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond/map_1/while/TensorArrayReadV3/Enter_1"
      op: "Enter"
      input: "cond/map_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond/map_1/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond/map_1/while/strided_slice/stack"
      op: "Const"
      input: "^cond/map_1/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond/map_1/while/strided_slice/stack_1"
      op: "Const"
      input: "^cond/map_1/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node_def {
      name: "cond/map_1/while/strided_slice/stack_2"
      op: "Const"
      input: "^cond/map_1/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond/map_1/while/strided_slice"
      op: "StridedSlice"
      input: "cond/map_1/while/TensorArrayReadV3:value:0"
      input: "cond/map_1/while/strided_slice/stack:output:0"
      input: "cond/map_1/while/strided_slice/stack_1:output:0"
      input: "cond/map_1/while/strided_slice/stack_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "cond/map_1/while/TensorArrayWrite/TensorArrayWriteV3"
      op: "TensorArrayWriteV3"
      input: "cond/map_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter:output:0"
      input: "cond/map_1/while/Identity_1:output:0"
      input: "cond/map_1/while/strided_slice:output:0"
      input: "cond/map_1/while/Identity_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map_1/while/strided_slice"
          }
        }
      }
    }
    node_def {
      name: "cond/map_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
      op: "Enter"
      input: "cond/map_1/TensorArray_1:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map_1/while/strided_slice"
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond/map_1/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond/map_1/while/add_1/y"
      op: "Const"
      input: "^cond/map_1/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond/map_1/while/add_1"
      op: "Add"
      input: "cond/map_1/while/Identity_1:output:0"
      input: "cond/map_1/while/add_1/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map_1/while/NextIteration"
      op: "NextIteration"
      input: "cond/map_1/while/add:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map_1/while/NextIteration_1"
      op: "NextIteration"
      input: "cond/map_1/while/add_1:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map_1/while/NextIteration_2"
      op: "NextIteration"
      input: "cond/map_1/while/TensorArrayWrite/TensorArrayWriteV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond/map_1/while/Exit"
      op: "Exit"
      input: "cond/map_1/while/Switch:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map_1/while/Exit_1"
      op: "Exit"
      input: "cond/map_1/while/Switch_1:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map_1/while/Exit_2"
      op: "Exit"
      input: "cond/map_1/while/Switch_2:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond/map_1/TensorArrayStack/TensorArraySizeV3"
      op: "TensorArraySizeV3"
      input: "cond/map_1/TensorArray_1:handle:0"
      input: "cond/map_1/while/Exit_2:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map_1/TensorArray_1"
          }
        }
      }
    }
    node_def {
      name: "cond/map_1/TensorArrayStack/range/start"
      op: "Const"
      input: "^cond/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map_1/TensorArray_1"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond/map_1/TensorArrayStack/range/delta"
      op: "Const"
      input: "^cond/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map_1/TensorArray_1"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond/map_1/TensorArrayStack/range"
      op: "Range"
      input: "cond/map_1/TensorArrayStack/range/start:output:0"
      input: "cond/map_1/TensorArrayStack/TensorArraySizeV3:size:0"
      input: "cond/map_1/TensorArrayStack/range/delta:output:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map_1/TensorArray_1"
          }
        }
      }
    }
    node_def {
      name: "cond/map_1/TensorArrayStack/TensorArrayGatherV3"
      op: "TensorArrayGatherV3"
      input: "cond/map_1/TensorArray_1:handle:0"
      input: "cond/map_1/TensorArrayStack/range:output:0"
      input: "cond/map_1/while/Exit_2:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map_1/TensorArray_1"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
          }
        }
      }
    }
    node_def {
      name: "cond/SparseTensor/dense_shape"
      op: "Const"
      input: "^cond/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\032\000\000\000\000\000\000\000d\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond/SparseToDense/default_value"
      op: "Const"
      input: "^cond/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "0"
          }
        }
      }
    }
    node_def {
      name: "cond/SparseToDense"
      op: "SparseToDense"
      input: "cond/transpose:y:0"
      input: "cond/SparseTensor/dense_shape:output:0"
      input: "cond/map_1/TensorArrayStack/TensorArrayGatherV3:value:0"
      input: "cond/SparseToDense/default_value:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "cond/StringToNumber_1"
      op: "StringToNumber"
      input: "cond/StringToNumber_1/Switch:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "out_type"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond/StringToNumber_1/Switch"
      op: "Switch"
      input: "StringSplit:values:0"
      input: "cond/pred_id:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@StringSplit"
          }
        }
      }
    }
    node_def {
      name: "cond/Cast"
      op: "Cast"
      input: "cond/StringToNumber_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "cond/Reshape_1/shape"
      op: "Const"
      input: "^cond/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\032\000\000\000\n\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond/Reshape_1"
      op: "Reshape"
      input: "cond/Cast:y:0"
      input: "cond/Reshape_1/shape:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map_2/elem"
      op: "Const"
      input: "^cond/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 26
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\021\000\000\000\000\000\000\000\022\000\000\000\000\000\000\000\023\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\025\000\000\000\000\000\000\000\026\000\000\000\000\000\000\000\027\000\000\000\000\000\000\000\030\000\000\000\000\000\000\000\031\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/TensorArray/size"
      op: "Const"
      input: "^cond/switch_f"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/TensorArray"
      op: "TensorArrayV3"
      input: "cond/map_2/TensorArray/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond/map_2/TensorArray_1/size"
      op: "Const"
      input: "^cond/switch_f"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/TensorArray_1"
      op: "TensorArrayV3"
      input: "cond/map_2/TensorArray_1/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond/map_2/TensorArrayUnstack/Shape"
      op: "Const"
      input: "^cond/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/TensorArrayUnstack/strided_slice/stack"
      op: "Const"
      input: "^cond/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/TensorArrayUnstack/strided_slice/stack_1"
      op: "Const"
      input: "^cond/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/TensorArrayUnstack/strided_slice/stack_2"
      op: "Const"
      input: "^cond/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/TensorArrayUnstack/strided_slice"
      op: "StridedSlice"
      input: "cond/map_2/TensorArrayUnstack/Shape:output:0"
      input: "cond/map_2/TensorArrayUnstack/strided_slice/stack:output:0"
      input: "cond/map_2/TensorArrayUnstack/strided_slice/stack_1:output:0"
      input: "cond/map_2/TensorArrayUnstack/strided_slice/stack_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "cond/map_2/TensorArrayUnstack/range/start"
      op: "Const"
      input: "^cond/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/TensorArrayUnstack/range/delta"
      op: "Const"
      input: "^cond/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/TensorArrayUnstack/range"
      op: "Range"
      input: "cond/map_2/TensorArrayUnstack/range/start:output:0"
      input: "cond/map_2/TensorArrayUnstack/strided_slice:output:0"
      input: "cond/map_2/TensorArrayUnstack/range/delta:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
      op: "TensorArrayScatterV3"
      input: "cond/map_2/TensorArray:handle:0"
      input: "cond/map_2/TensorArrayUnstack/range:output:0"
      input: "cond/map_2/elem:output:0"
      input: "cond/map_2/TensorArray:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map_2/elem"
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/TensorArrayUnstack_1/Shape"
      op: "Const"
      input: "^cond/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\032\000\000\000\n\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/TensorArrayUnstack_1/strided_slice/stack"
      op: "Const"
      input: "^cond/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/TensorArrayUnstack_1/strided_slice/stack_1"
      op: "Const"
      input: "^cond/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/TensorArrayUnstack_1/strided_slice/stack_2"
      op: "Const"
      input: "^cond/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/TensorArrayUnstack_1/strided_slice"
      op: "StridedSlice"
      input: "cond/map_2/TensorArrayUnstack_1/Shape:output:0"
      input: "cond/map_2/TensorArrayUnstack_1/strided_slice/stack:output:0"
      input: "cond/map_2/TensorArrayUnstack_1/strided_slice/stack_1:output:0"
      input: "cond/map_2/TensorArrayUnstack_1/strided_slice/stack_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "cond/map_2/TensorArrayUnstack_1/range/start"
      op: "Const"
      input: "^cond/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/TensorArrayUnstack_1/range/delta"
      op: "Const"
      input: "^cond/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/TensorArrayUnstack_1/range"
      op: "Range"
      input: "cond/map_2/TensorArrayUnstack_1/range/start:output:0"
      input: "cond/map_2/TensorArrayUnstack_1/strided_slice:output:0"
      input: "cond/map_2/TensorArrayUnstack_1/range/delta:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map_2/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
      op: "TensorArrayScatterV3"
      input: "cond/map_2/TensorArray_1:handle:0"
      input: "cond/map_2/TensorArrayUnstack_1/range:output:0"
      input: "cond/Reshape_1:output:0"
      input: "cond/map_2/TensorArray_1:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/Reshape_1"
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/Const"
      op: "Const"
      input: "^cond/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/TensorArray_2/size"
      op: "Const"
      input: "^cond/switch_f"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/TensorArray_2"
      op: "TensorArrayV3"
      input: "cond/map_2/TensorArray_2/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond/map_2/TensorArray_3/size"
      op: "Const"
      input: "^cond/switch_f"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/TensorArray_3"
      op: "TensorArrayV3"
      input: "cond/map_2/TensorArray_3/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond/map_2/while/maximum_iterations"
      op: "Const"
      input: "^cond/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/while/iteration_counter"
      op: "Const"
      input: "^cond/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/while/Enter"
      op: "Enter"
      input: "cond/map_2/while/iteration_counter:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond/map_2/while/Enter_1"
      op: "Enter"
      input: "cond/map_2/Const:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond/map_2/while/Enter_2"
      op: "Enter"
      input: "cond/map_2/TensorArray_2:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond/map_2/while/Enter_3"
      op: "Enter"
      input: "cond/map_2/TensorArray_3:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond/map_2/while/Merge"
      op: "Merge"
      input: "cond/map_2/while/Enter:output:0"
      input: "cond/map_2/while/NextIteration:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map_2/while/Merge_1"
      op: "Merge"
      input: "cond/map_2/while/Enter_1:output:0"
      input: "cond/map_2/while/NextIteration_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map_2/while/Merge_2"
      op: "Merge"
      input: "cond/map_2/while/Enter_2:output:0"
      input: "cond/map_2/while/NextIteration_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond/map_2/while/Merge_3"
      op: "Merge"
      input: "cond/map_2/while/Enter_3:output:0"
      input: "cond/map_2/while/NextIteration_3:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond/map_2/while/Less"
      op: "Less"
      input: "cond/map_2/while/Merge:output:0"
      input: "cond/map_2/while/Less/Enter:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map_2/while/Less/Enter"
      op: "Enter"
      input: "cond/map_2/while/maximum_iterations:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond/map_2/while/Less_1/y"
      op: "Const"
      input: "^cond/map_2/while/Merge"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/while/Less_1"
      op: "Less"
      input: "cond/map_2/while/Merge_1:output:0"
      input: "cond/map_2/while/Less_1/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map_2/while/LogicalAnd"
      op: "LogicalAnd"
      input: "cond/map_2/while/Less:z:0"
      input: "cond/map_2/while/Less_1:z:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "cond/map_2/while/LoopCond"
      op: "LoopCond"
      input: "cond/map_2/while/LogicalAnd:z:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "cond/map_2/while/Switch"
      op: "Switch"
      input: "cond/map_2/while/Merge:output:0"
      input: "cond/map_2/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map_2/while/Merge"
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/while/Switch_1"
      op: "Switch"
      input: "cond/map_2/while/Merge_1:output:0"
      input: "cond/map_2/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map_2/while/Merge_1"
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/while/Switch_2"
      op: "Switch"
      input: "cond/map_2/while/Merge_2:output:0"
      input: "cond/map_2/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map_2/while/Merge_2"
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/while/Switch_3"
      op: "Switch"
      input: "cond/map_2/while/Merge_3:output:0"
      input: "cond/map_2/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map_2/while/Merge_3"
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/while/Identity"
      op: "Identity"
      input: "cond/map_2/while/Switch:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map_2/while/Identity_1"
      op: "Identity"
      input: "cond/map_2/while/Switch_1:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map_2/while/Identity_2"
      op: "Identity"
      input: "cond/map_2/while/Switch_2:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond/map_2/while/Identity_3"
      op: "Identity"
      input: "cond/map_2/while/Switch_3:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond/map_2/while/add/y"
      op: "Const"
      input: "^cond/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/while/add"
      op: "Add"
      input: "cond/map_2/while/Identity:output:0"
      input: "cond/map_2/while/add/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map_2/while/TensorArrayReadV3"
      op: "TensorArrayReadV3"
      input: "cond/map_2/while/TensorArrayReadV3/Enter:output:0"
      input: "cond/map_2/while/Identity_1:output:0"
      input: "cond/map_2/while/TensorArrayReadV3/Enter_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
    }
    node_def {
      name: "cond/map_2/while/TensorArrayReadV3/Enter"
      op: "Enter"
      input: "cond/map_2/TensorArray:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond/map_2/while/TensorArrayReadV3/Enter_1"
      op: "Enter"
      input: "cond/map_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond/map_2/while/TensorArrayReadV3_1"
      op: "TensorArrayReadV3"
      input: "cond/map_2/while/TensorArrayReadV3_1/Enter:output:0"
      input: "cond/map_2/while/Identity_1:output:0"
      input: "cond/map_2/while/TensorArrayReadV3_1/Enter_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
    }
    node_def {
      name: "cond/map_2/while/TensorArrayReadV3_1/Enter"
      op: "Enter"
      input: "cond/map_2/TensorArray_1:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond/map_2/while/TensorArrayReadV3_1/Enter_1"
      op: "Enter"
      input: "cond/map_2/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/TensorArray/size"
      op: "Const"
      input: "^cond/map_2/while/Identity"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 10
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/TensorArray"
      op: "TensorArrayV3"
      input: "cond/map_2/while/map/TensorArray/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/TensorArrayUnstack/Shape"
      op: "Const"
      input: "^cond/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 10
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/TensorArrayUnstack/strided_slice/stack"
      op: "Const"
      input: "^cond/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/TensorArrayUnstack/strided_slice/stack_1"
      op: "Const"
      input: "^cond/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/TensorArrayUnstack/strided_slice/stack_2"
      op: "Const"
      input: "^cond/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/TensorArrayUnstack/strided_slice"
      op: "StridedSlice"
      input: "cond/map_2/while/map/TensorArrayUnstack/Shape:output:0"
      input: "cond/map_2/while/map/TensorArrayUnstack/strided_slice/stack:output:0"
      input: "cond/map_2/while/map/TensorArrayUnstack/strided_slice/stack_1:output:0"
      input: "cond/map_2/while/map/TensorArrayUnstack/strided_slice/stack_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/TensorArrayUnstack/range/start"
      op: "Const"
      input: "^cond/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/TensorArrayUnstack/range/delta"
      op: "Const"
      input: "^cond/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/TensorArrayUnstack/range"
      op: "Range"
      input: "cond/map_2/while/map/TensorArrayUnstack/range/start:output:0"
      input: "cond/map_2/while/map/TensorArrayUnstack/strided_slice:output:0"
      input: "cond/map_2/while/map/TensorArrayUnstack/range/delta:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
      op: "TensorArrayScatterV3"
      input: "cond/map_2/while/map/TensorArray:handle:0"
      input: "cond/map_2/while/map/TensorArrayUnstack/range:output:0"
      input: "cond/map_2/while/TensorArrayReadV3_1:value:0"
      input: "cond/map_2/while/map/TensorArray:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map_2/while/TensorArrayReadV3_1"
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/Const"
      op: "Const"
      input: "^cond/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/TensorArray_1/size"
      op: "Const"
      input: "^cond/map_2/while/Identity"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 10
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/TensorArray_1"
      op: "TensorArrayV3"
      input: "cond/map_2/while/map/TensorArray_1/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/TensorArray_2/size"
      op: "Const"
      input: "^cond/map_2/while/Identity"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 10
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/TensorArray_2"
      op: "TensorArrayV3"
      input: "cond/map_2/while/map/TensorArray_2/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/while/maximum_iterations"
      op: "Const"
      input: "^cond/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 10
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/while/iteration_counter"
      op: "Const"
      input: "^cond/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/while/Enter"
      op: "Enter"
      input: "cond/map_2/while/map/while/iteration_counter:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/while/Enter_1"
      op: "Enter"
      input: "cond/map_2/while/map/Const:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/while/Enter_2"
      op: "Enter"
      input: "cond/map_2/while/map/TensorArray_1:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/while/Enter_3"
      op: "Enter"
      input: "cond/map_2/while/map/TensorArray_2:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/while/Merge"
      op: "Merge"
      input: "cond/map_2/while/map/while/Enter:output:0"
      input: "cond/map_2/while/map/while/NextIteration:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/while/Merge_1"
      op: "Merge"
      input: "cond/map_2/while/map/while/Enter_1:output:0"
      input: "cond/map_2/while/map/while/NextIteration_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/while/Merge_2"
      op: "Merge"
      input: "cond/map_2/while/map/while/Enter_2:output:0"
      input: "cond/map_2/while/map/while/NextIteration_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/while/Merge_3"
      op: "Merge"
      input: "cond/map_2/while/map/while/Enter_3:output:0"
      input: "cond/map_2/while/map/while/NextIteration_3:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/while/Less"
      op: "Less"
      input: "cond/map_2/while/map/while/Merge:output:0"
      input: "cond/map_2/while/map/while/Less/Enter:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/while/Less/Enter"
      op: "Enter"
      input: "cond/map_2/while/map/while/maximum_iterations:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/while/Less_1/y"
      op: "Const"
      input: "^cond/map_2/while/map/while/Merge"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 10
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/while/Less_1"
      op: "Less"
      input: "cond/map_2/while/map/while/Merge_1:output:0"
      input: "cond/map_2/while/map/while/Less_1/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/while/LogicalAnd"
      op: "LogicalAnd"
      input: "cond/map_2/while/map/while/Less:z:0"
      input: "cond/map_2/while/map/while/Less_1:z:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "cond/map_2/while/map/while/LoopCond"
      op: "LoopCond"
      input: "cond/map_2/while/map/while/LogicalAnd:z:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "cond/map_2/while/map/while/Switch"
      op: "Switch"
      input: "cond/map_2/while/map/while/Merge:output:0"
      input: "cond/map_2/while/map/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map_2/while/map/while/Merge"
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/while/Switch_1"
      op: "Switch"
      input: "cond/map_2/while/map/while/Merge_1:output:0"
      input: "cond/map_2/while/map/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map_2/while/map/while/Merge_1"
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/while/Switch_2"
      op: "Switch"
      input: "cond/map_2/while/map/while/Merge_2:output:0"
      input: "cond/map_2/while/map/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map_2/while/map/while/Merge_2"
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/while/Switch_3"
      op: "Switch"
      input: "cond/map_2/while/map/while/Merge_3:output:0"
      input: "cond/map_2/while/map/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map_2/while/map/while/Merge_3"
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/while/Identity"
      op: "Identity"
      input: "cond/map_2/while/map/while/Switch:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/while/Identity_1"
      op: "Identity"
      input: "cond/map_2/while/map/while/Switch_1:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/while/Identity_2"
      op: "Identity"
      input: "cond/map_2/while/map/while/Switch_2:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/while/Identity_3"
      op: "Identity"
      input: "cond/map_2/while/map/while/Switch_3:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/while/add/y"
      op: "Const"
      input: "^cond/map_2/while/map/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/while/add"
      op: "Add"
      input: "cond/map_2/while/map/while/Identity:output:0"
      input: "cond/map_2/while/map/while/add/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/while/TensorArrayReadV3"
      op: "TensorArrayReadV3"
      input: "cond/map_2/while/map/while/TensorArrayReadV3/Enter:output:0"
      input: "cond/map_2/while/map/while/Identity_1:output:0"
      input: "cond/map_2/while/map/while/TensorArrayReadV3/Enter_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/while/TensorArrayReadV3/Enter"
      op: "Enter"
      input: "cond/map_2/while/map/TensorArray:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/while/TensorArrayReadV3/Enter_1"
      op: "Enter"
      input: "cond/map_2/while/map/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/while/TensorArrayWrite/TensorArrayWriteV3"
      op: "TensorArrayWriteV3"
      input: "cond/map_2/while/map/while/TensorArrayWrite/TensorArrayWriteV3/Enter:output:0"
      input: "cond/map_2/while/map/while/Identity_1:output:0"
      input: "cond/map_2/while/map/while/TensorArrayWrite/TensorArrayWriteV3/Enter_1:output:0"
      input: "cond/map_2/while/map/while/Identity_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map_2/while/TensorArrayReadV3"
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
      op: "Enter"
      input: "cond/map_2/while/map/TensorArray_1:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map_2/while/TensorArrayReadV3"
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/while/TensorArrayWrite/TensorArrayWriteV3/Enter_1"
      op: "Enter"
      input: "cond/map_2/while/TensorArrayReadV3:value:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map_2/while/TensorArrayReadV3"
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/while/TensorArrayWrite_1/TensorArrayWriteV3"
      op: "TensorArrayWriteV3"
      input: "cond/map_2/while/map/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter:output:0"
      input: "cond/map_2/while/map/while/Identity_1:output:0"
      input: "cond/map_2/while/map/while/TensorArrayReadV3:value:0"
      input: "cond/map_2/while/map/while/Identity_3:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map_2/while/map/while/TensorArrayReadV3"
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
      op: "Enter"
      input: "cond/map_2/while/map/TensorArray_2:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map_2/while/map/while/TensorArrayReadV3"
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/while/add_1/y"
      op: "Const"
      input: "^cond/map_2/while/map/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/while/add_1"
      op: "Add"
      input: "cond/map_2/while/map/while/Identity_1:output:0"
      input: "cond/map_2/while/map/while/add_1/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/while/NextIteration"
      op: "NextIteration"
      input: "cond/map_2/while/map/while/add:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/while/NextIteration_1"
      op: "NextIteration"
      input: "cond/map_2/while/map/while/add_1:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/while/NextIteration_2"
      op: "NextIteration"
      input: "cond/map_2/while/map/while/TensorArrayWrite/TensorArrayWriteV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/while/NextIteration_3"
      op: "NextIteration"
      input: "cond/map_2/while/map/while/TensorArrayWrite_1/TensorArrayWriteV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/while/Exit"
      op: "Exit"
      input: "cond/map_2/while/map/while/Switch:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/while/Exit_1"
      op: "Exit"
      input: "cond/map_2/while/map/while/Switch_1:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/while/Exit_2"
      op: "Exit"
      input: "cond/map_2/while/map/while/Switch_2:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/while/Exit_3"
      op: "Exit"
      input: "cond/map_2/while/map/while/Switch_3:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/TensorArrayStack/TensorArraySizeV3"
      op: "TensorArraySizeV3"
      input: "cond/map_2/while/map/TensorArray_1:handle:0"
      input: "cond/map_2/while/map/while/Exit_2:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map_2/while/map/TensorArray_1"
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/TensorArrayStack/range/start"
      op: "Const"
      input: "^cond/map_2/while/Identity"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map_2/while/map/TensorArray_1"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/TensorArrayStack/range/delta"
      op: "Const"
      input: "^cond/map_2/while/Identity"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map_2/while/map/TensorArray_1"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/TensorArrayStack/range"
      op: "Range"
      input: "cond/map_2/while/map/TensorArrayStack/range/start:output:0"
      input: "cond/map_2/while/map/TensorArrayStack/TensorArraySizeV3:size:0"
      input: "cond/map_2/while/map/TensorArrayStack/range/delta:output:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map_2/while/map/TensorArray_1"
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/TensorArrayStack/TensorArrayGatherV3"
      op: "TensorArrayGatherV3"
      input: "cond/map_2/while/map/TensorArray_1:handle:0"
      input: "cond/map_2/while/map/TensorArrayStack/range:output:0"
      input: "cond/map_2/while/map/while/Exit_2:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map_2/while/map/TensorArray_1"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/TensorArrayStack_1/TensorArraySizeV3"
      op: "TensorArraySizeV3"
      input: "cond/map_2/while/map/TensorArray_2:handle:0"
      input: "cond/map_2/while/map/while/Exit_3:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map_2/while/map/TensorArray_2"
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/TensorArrayStack_1/range/start"
      op: "Const"
      input: "^cond/map_2/while/Identity"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map_2/while/map/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/TensorArrayStack_1/range/delta"
      op: "Const"
      input: "^cond/map_2/while/Identity"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map_2/while/map/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/TensorArrayStack_1/range"
      op: "Range"
      input: "cond/map_2/while/map/TensorArrayStack_1/range/start:output:0"
      input: "cond/map_2/while/map/TensorArrayStack_1/TensorArraySizeV3:size:0"
      input: "cond/map_2/while/map/TensorArrayStack_1/range/delta:output:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map_2/while/map/TensorArray_2"
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/while/map/TensorArrayStack_1/TensorArrayGatherV3"
      op: "TensorArrayGatherV3"
      input: "cond/map_2/while/map/TensorArray_2:handle:0"
      input: "cond/map_2/while/map/TensorArrayStack_1/range:output:0"
      input: "cond/map_2/while/map/while/Exit_3:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map_2/while/map/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/while/TensorArrayWrite/TensorArrayWriteV3"
      op: "TensorArrayWriteV3"
      input: "cond/map_2/while/TensorArrayWrite/TensorArrayWriteV3/Enter:output:0"
      input: "cond/map_2/while/Identity_1:output:0"
      input: "cond/map_2/while/map/TensorArrayStack/TensorArrayGatherV3:value:0"
      input: "cond/map_2/while/Identity_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map_2/while/map/TensorArray_1"
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
      op: "Enter"
      input: "cond/map_2/TensorArray_2:handle:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map_2/while/map/TensorArray_1"
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond/map_2/while/TensorArrayWrite_1/TensorArrayWriteV3"
      op: "TensorArrayWriteV3"
      input: "cond/map_2/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter:output:0"
      input: "cond/map_2/while/Identity_1:output:0"
      input: "cond/map_2/while/map/TensorArrayStack_1/TensorArrayGatherV3:value:0"
      input: "cond/map_2/while/Identity_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map_2/while/map/TensorArray_2"
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
      op: "Enter"
      input: "cond/map_2/TensorArray_3:handle:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map_2/while/map/TensorArray_2"
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond/map_2/while/add_1/y"
      op: "Const"
      input: "^cond/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/while/add_1"
      op: "Add"
      input: "cond/map_2/while/Identity_1:output:0"
      input: "cond/map_2/while/add_1/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map_2/while/NextIteration"
      op: "NextIteration"
      input: "cond/map_2/while/add:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map_2/while/NextIteration_1"
      op: "NextIteration"
      input: "cond/map_2/while/add_1:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map_2/while/NextIteration_2"
      op: "NextIteration"
      input: "cond/map_2/while/TensorArrayWrite/TensorArrayWriteV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond/map_2/while/NextIteration_3"
      op: "NextIteration"
      input: "cond/map_2/while/TensorArrayWrite_1/TensorArrayWriteV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond/map_2/while/Exit"
      op: "Exit"
      input: "cond/map_2/while/Switch:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map_2/while/Exit_1"
      op: "Exit"
      input: "cond/map_2/while/Switch_1:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/map_2/while/Exit_2"
      op: "Exit"
      input: "cond/map_2/while/Switch_2:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond/map_2/while/Exit_3"
      op: "Exit"
      input: "cond/map_2/while/Switch_3:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond/map_2/TensorArrayStack/TensorArraySizeV3"
      op: "TensorArraySizeV3"
      input: "cond/map_2/TensorArray_2:handle:0"
      input: "cond/map_2/while/Exit_2:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map_2/TensorArray_2"
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/TensorArrayStack/range/start"
      op: "Const"
      input: "^cond/switch_f"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map_2/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/TensorArrayStack/range/delta"
      op: "Const"
      input: "^cond/switch_f"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map_2/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/TensorArrayStack/range"
      op: "Range"
      input: "cond/map_2/TensorArrayStack/range/start:output:0"
      input: "cond/map_2/TensorArrayStack/TensorArraySizeV3:size:0"
      input: "cond/map_2/TensorArrayStack/range/delta:output:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map_2/TensorArray_2"
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/TensorArrayStack/TensorArrayGatherV3"
      op: "TensorArrayGatherV3"
      input: "cond/map_2/TensorArray_2:handle:0"
      input: "cond/map_2/TensorArrayStack/range:output:0"
      input: "cond/map_2/while/Exit_2:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map_2/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            dim {
              size: 10
            }
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/TensorArrayStack_1/TensorArraySizeV3"
      op: "TensorArraySizeV3"
      input: "cond/map_2/TensorArray_3:handle:0"
      input: "cond/map_2/while/Exit_3:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map_2/TensorArray_3"
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/TensorArrayStack_1/range/start"
      op: "Const"
      input: "^cond/switch_f"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map_2/TensorArray_3"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/TensorArrayStack_1/range/delta"
      op: "Const"
      input: "^cond/switch_f"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map_2/TensorArray_3"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/TensorArrayStack_1/range"
      op: "Range"
      input: "cond/map_2/TensorArrayStack_1/range/start:output:0"
      input: "cond/map_2/TensorArrayStack_1/TensorArraySizeV3:size:0"
      input: "cond/map_2/TensorArrayStack_1/range/delta:output:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map_2/TensorArray_3"
          }
        }
      }
    }
    node_def {
      name: "cond/map_2/TensorArrayStack_1/TensorArrayGatherV3"
      op: "TensorArrayGatherV3"
      input: "cond/map_2/TensorArray_3:handle:0"
      input: "cond/map_2/TensorArrayStack_1/range:output:0"
      input: "cond/map_2/while/Exit_3:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond/map_2/TensorArray_3"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            dim {
              size: 10
            }
          }
        }
      }
    }
    node_def {
      name: "cond/transpose_1/a"
      op: "Pack"
      input: "cond/map_2/TensorArrayStack/TensorArrayGatherV3:value:0"
      input: "cond/map_2/TensorArrayStack_1/TensorArrayGatherV3:value:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "cond/transpose_1/perm"
      op: "Const"
      input: "^cond/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\002\000\000\000\001\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond/transpose_1"
      op: "Transpose"
      input: "cond/transpose_1/a:output:0"
      input: "cond/transpose_1/perm:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/Reshape_2/shape"
      op: "Const"
      input: "^cond/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\004\001\000\000\002\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond/Reshape_2"
      op: "Reshape"
      input: "cond/transpose_1:y:0"
      input: "cond/Reshape_2/shape:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond/SparseTensor_1/values"
      op: "Const"
      input: "^cond/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 260
              }
            }
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
          }
        }
      }
    }
    node_def {
      name: "cond/SparseTensor_1/dense_shape"
      op: "Const"
      input: "^cond/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\032\000\000\000\000\000\000\000\270\013\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond/SparseReorder"
      op: "SparseReorder"
      input: "cond/Reshape_2:output:0"
      input: "cond/SparseTensor_1/values:output:0"
      input: "cond/SparseTensor_1/dense_shape:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
    }
    node_def {
      name: "cond/SparseTensor_2/dense_shape"
      op: "Const"
      input: "^cond/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\032\000\000\000\000\000\000\000\270\013\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond/SparseToDense_1/default_value"
      op: "Const"
      input: "^cond/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "0"
          }
        }
      }
    }
    node_def {
      name: "cond/SparseToDense_1"
      op: "SparseToDense"
      input: "cond/SparseReorder:output_indices:0"
      input: "cond/SparseTensor_2/dense_shape:output:0"
      input: "cond/SparseReorder:output_values:0"
      input: "cond/SparseToDense_1/default_value:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "cond/Merge"
      op: "Merge"
      input: "cond/SparseToDense_1:dense:0"
      input: "cond/SparseToDense:dense:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
    }
    node_def {
      name: "Const_1"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: ":"
          }
        }
      }
    }
    node_def {
      name: "StringSplit_1"
      op: "StringSplit"
      input: "DecodeCSV:output:1"
      input: "Const_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "skip_empty"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "Equal_1/x"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "d0"
          }
        }
      }
    }
    node_def {
      name: "Equal_1/y"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "w1"
          }
        }
      }
    }
    node_def {
      name: "Equal_1"
      op: "Equal"
      input: "Equal_1/x:output:0"
      input: "Equal_1/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
    }
    node_def {
      name: "cond_1/Switch"
      op: "Switch"
      input: "Equal_1:z:0"
      input: "Equal_1:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
    }
    node_def {
      name: "cond_1/switch_t"
      op: "Identity"
      input: "cond_1/Switch:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
    }
    node_def {
      name: "cond_1/switch_f"
      op: "Identity"
      input: "cond_1/Switch:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
    }
    node_def {
      name: "cond_1/pred_id"
      op: "Identity"
      input: "Equal_1:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
    }
    node_def {
      name: "cond_1/StringToNumber"
      op: "StringToNumber"
      input: "cond_1/StringToNumber/Switch:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "out_type"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_1/StringToNumber/Switch"
      op: "Switch"
      input: "StringSplit_1:values:0"
      input: "cond_1/pred_id:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@StringSplit_1"
          }
        }
      }
    }
    node_def {
      name: "cond_1/Reshape/shape"
      op: "Const"
      input: "^cond_1/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\032\000\000\000\002\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_1/Reshape"
      op: "Reshape"
      input: "cond_1/StringToNumber:output:0"
      input: "cond_1/Reshape/shape:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map/elem"
      op: "Const"
      input: "^cond_1/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 26
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\021\000\000\000\000\000\000\000\022\000\000\000\000\000\000\000\023\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\025\000\000\000\000\000\000\000\026\000\000\000\000\000\000\000\027\000\000\000\000\000\000\000\030\000\000\000\000\000\000\000\031\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_1/map/TensorArray/size"
      op: "Const"
      input: "^cond_1/switch_t"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_1/map/TensorArray"
      op: "TensorArrayV3"
      input: "cond_1/map/TensorArray/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_1/map/TensorArray_1/size"
      op: "Const"
      input: "^cond_1/switch_t"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_1/map/TensorArray_1"
      op: "TensorArrayV3"
      input: "cond_1/map/TensorArray_1/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_1/map/TensorArrayUnstack/Shape"
      op: "Const"
      input: "^cond_1/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_1/map/TensorArrayUnstack/strided_slice/stack"
      op: "Const"
      input: "^cond_1/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_1/map/TensorArrayUnstack/strided_slice/stack_1"
      op: "Const"
      input: "^cond_1/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_1/map/TensorArrayUnstack/strided_slice/stack_2"
      op: "Const"
      input: "^cond_1/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_1/map/TensorArrayUnstack/strided_slice"
      op: "StridedSlice"
      input: "cond_1/map/TensorArrayUnstack/Shape:output:0"
      input: "cond_1/map/TensorArrayUnstack/strided_slice/stack:output:0"
      input: "cond_1/map/TensorArrayUnstack/strided_slice/stack_1:output:0"
      input: "cond_1/map/TensorArrayUnstack/strided_slice/stack_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "cond_1/map/TensorArrayUnstack/range/start"
      op: "Const"
      input: "^cond_1/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_1/map/TensorArrayUnstack/range/delta"
      op: "Const"
      input: "^cond_1/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_1/map/TensorArrayUnstack/range"
      op: "Range"
      input: "cond_1/map/TensorArrayUnstack/range/start:output:0"
      input: "cond_1/map/TensorArrayUnstack/strided_slice:output:0"
      input: "cond_1/map/TensorArrayUnstack/range/delta:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
      op: "TensorArrayScatterV3"
      input: "cond_1/map/TensorArray:handle:0"
      input: "cond_1/map/TensorArrayUnstack/range:output:0"
      input: "cond_1/map/elem:output:0"
      input: "cond_1/map/TensorArray:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map/elem"
          }
        }
      }
    }
    node_def {
      name: "cond_1/map/TensorArrayUnstack_1/Shape"
      op: "Const"
      input: "^cond_1/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\032\000\000\000\002\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_1/map/TensorArrayUnstack_1/strided_slice/stack"
      op: "Const"
      input: "^cond_1/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_1/map/TensorArrayUnstack_1/strided_slice/stack_1"
      op: "Const"
      input: "^cond_1/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_1/map/TensorArrayUnstack_1/strided_slice/stack_2"
      op: "Const"
      input: "^cond_1/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_1/map/TensorArrayUnstack_1/strided_slice"
      op: "StridedSlice"
      input: "cond_1/map/TensorArrayUnstack_1/Shape:output:0"
      input: "cond_1/map/TensorArrayUnstack_1/strided_slice/stack:output:0"
      input: "cond_1/map/TensorArrayUnstack_1/strided_slice/stack_1:output:0"
      input: "cond_1/map/TensorArrayUnstack_1/strided_slice/stack_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "cond_1/map/TensorArrayUnstack_1/range/start"
      op: "Const"
      input: "^cond_1/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_1/map/TensorArrayUnstack_1/range/delta"
      op: "Const"
      input: "^cond_1/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_1/map/TensorArrayUnstack_1/range"
      op: "Range"
      input: "cond_1/map/TensorArrayUnstack_1/range/start:output:0"
      input: "cond_1/map/TensorArrayUnstack_1/strided_slice:output:0"
      input: "cond_1/map/TensorArrayUnstack_1/range/delta:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
      op: "TensorArrayScatterV3"
      input: "cond_1/map/TensorArray_1:handle:0"
      input: "cond_1/map/TensorArrayUnstack_1/range:output:0"
      input: "cond_1/Reshape:output:0"
      input: "cond_1/map/TensorArray_1:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/Reshape"
          }
        }
      }
    }
    node_def {
      name: "cond_1/map/Const"
      op: "Const"
      input: "^cond_1/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_1/map/TensorArray_2/size"
      op: "Const"
      input: "^cond_1/switch_t"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_1/map/TensorArray_2"
      op: "TensorArrayV3"
      input: "cond_1/map/TensorArray_2/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_1/map/TensorArray_3/size"
      op: "Const"
      input: "^cond_1/switch_t"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_1/map/TensorArray_3"
      op: "TensorArrayV3"
      input: "cond_1/map/TensorArray_3/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_1/map/while/maximum_iterations"
      op: "Const"
      input: "^cond_1/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_1/map/while/iteration_counter"
      op: "Const"
      input: "^cond_1/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_1/map/while/Enter"
      op: "Enter"
      input: "cond_1/map/while/iteration_counter:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_1/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_1/map/while/Enter_1"
      op: "Enter"
      input: "cond_1/map/Const:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_1/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_1/map/while/Enter_2"
      op: "Enter"
      input: "cond_1/map/TensorArray_2:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_1/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_1/map/while/Enter_3"
      op: "Enter"
      input: "cond_1/map/TensorArray_3:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_1/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_1/map/while/Merge"
      op: "Merge"
      input: "cond_1/map/while/Enter:output:0"
      input: "cond_1/map/while/NextIteration:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map/while/Merge_1"
      op: "Merge"
      input: "cond_1/map/while/Enter_1:output:0"
      input: "cond_1/map/while/NextIteration_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map/while/Merge_2"
      op: "Merge"
      input: "cond_1/map/while/Enter_2:output:0"
      input: "cond_1/map/while/NextIteration_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_1/map/while/Merge_3"
      op: "Merge"
      input: "cond_1/map/while/Enter_3:output:0"
      input: "cond_1/map/while/NextIteration_3:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_1/map/while/Less"
      op: "Less"
      input: "cond_1/map/while/Merge:output:0"
      input: "cond_1/map/while/Less/Enter:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map/while/Less/Enter"
      op: "Enter"
      input: "cond_1/map/while/maximum_iterations:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_1/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_1/map/while/Less_1/y"
      op: "Const"
      input: "^cond_1/map/while/Merge"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_1/map/while/Less_1"
      op: "Less"
      input: "cond_1/map/while/Merge_1:output:0"
      input: "cond_1/map/while/Less_1/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map/while/LogicalAnd"
      op: "LogicalAnd"
      input: "cond_1/map/while/Less:z:0"
      input: "cond_1/map/while/Less_1:z:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "cond_1/map/while/LoopCond"
      op: "LoopCond"
      input: "cond_1/map/while/LogicalAnd:z:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "cond_1/map/while/Switch"
      op: "Switch"
      input: "cond_1/map/while/Merge:output:0"
      input: "cond_1/map/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map/while/Merge"
          }
        }
      }
    }
    node_def {
      name: "cond_1/map/while/Switch_1"
      op: "Switch"
      input: "cond_1/map/while/Merge_1:output:0"
      input: "cond_1/map/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map/while/Merge_1"
          }
        }
      }
    }
    node_def {
      name: "cond_1/map/while/Switch_2"
      op: "Switch"
      input: "cond_1/map/while/Merge_2:output:0"
      input: "cond_1/map/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map/while/Merge_2"
          }
        }
      }
    }
    node_def {
      name: "cond_1/map/while/Switch_3"
      op: "Switch"
      input: "cond_1/map/while/Merge_3:output:0"
      input: "cond_1/map/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map/while/Merge_3"
          }
        }
      }
    }
    node_def {
      name: "cond_1/map/while/Identity"
      op: "Identity"
      input: "cond_1/map/while/Switch:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map/while/Identity_1"
      op: "Identity"
      input: "cond_1/map/while/Switch_1:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map/while/Identity_2"
      op: "Identity"
      input: "cond_1/map/while/Switch_2:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_1/map/while/Identity_3"
      op: "Identity"
      input: "cond_1/map/while/Switch_3:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_1/map/while/add/y"
      op: "Const"
      input: "^cond_1/map/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_1/map/while/add"
      op: "Add"
      input: "cond_1/map/while/Identity:output:0"
      input: "cond_1/map/while/add/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map/while/TensorArrayReadV3"
      op: "TensorArrayReadV3"
      input: "cond_1/map/while/TensorArrayReadV3/Enter:output:0"
      input: "cond_1/map/while/Identity_1:output:0"
      input: "cond_1/map/while/TensorArrayReadV3/Enter_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
    }
    node_def {
      name: "cond_1/map/while/TensorArrayReadV3/Enter"
      op: "Enter"
      input: "cond_1/map/TensorArray:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_1/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_1/map/while/TensorArrayReadV3/Enter_1"
      op: "Enter"
      input: "cond_1/map/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_1/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_1/map/while/TensorArrayReadV3_1"
      op: "TensorArrayReadV3"
      input: "cond_1/map/while/TensorArrayReadV3_1/Enter:output:0"
      input: "cond_1/map/while/Identity_1:output:0"
      input: "cond_1/map/while/TensorArrayReadV3_1/Enter_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_1/map/while/TensorArrayReadV3_1/Enter"
      op: "Enter"
      input: "cond_1/map/TensorArray_1:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_1/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_1/map/while/TensorArrayReadV3_1/Enter_1"
      op: "Enter"
      input: "cond_1/map/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_1/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_1/map/while/strided_slice/stack"
      op: "Const"
      input: "^cond_1/map/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_1/map/while/strided_slice/stack_1"
      op: "Const"
      input: "^cond_1/map/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_1/map/while/strided_slice/stack_2"
      op: "Const"
      input: "^cond_1/map/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_1/map/while/strided_slice"
      op: "StridedSlice"
      input: "cond_1/map/while/TensorArrayReadV3_1:value:0"
      input: "cond_1/map/while/strided_slice/stack:output:0"
      input: "cond_1/map/while/strided_slice/stack_1:output:0"
      input: "cond_1/map/while/strided_slice/stack_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "cond_1/map/while/ToInt64"
      op: "Cast"
      input: "cond_1/map/while/strided_slice:output:0"
      device: "/device:CPU:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "cond_1/map/while/TensorArrayWrite/TensorArrayWriteV3"
      op: "TensorArrayWriteV3"
      input: "cond_1/map/while/TensorArrayWrite/TensorArrayWriteV3/Enter:output:0"
      input: "cond_1/map/while/Identity_1:output:0"
      input: "cond_1/map/while/TensorArrayReadV3:value:0"
      input: "cond_1/map/while/Identity_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map/while/TensorArrayReadV3"
          }
        }
      }
    }
    node_def {
      name: "cond_1/map/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
      op: "Enter"
      input: "cond_1/map/TensorArray_2:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map/while/TensorArrayReadV3"
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_1/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_1/map/while/TensorArrayWrite_1/TensorArrayWriteV3"
      op: "TensorArrayWriteV3"
      input: "cond_1/map/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter:output:0"
      input: "cond_1/map/while/Identity_1:output:0"
      input: "cond_1/map/while/ToInt64:y:0"
      input: "cond_1/map/while/Identity_3:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map/while/ToInt64"
          }
        }
      }
    }
    node_def {
      name: "cond_1/map/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
      op: "Enter"
      input: "cond_1/map/TensorArray_3:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map/while/ToInt64"
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_1/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_1/map/while/add_1/y"
      op: "Const"
      input: "^cond_1/map/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_1/map/while/add_1"
      op: "Add"
      input: "cond_1/map/while/Identity_1:output:0"
      input: "cond_1/map/while/add_1/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map/while/NextIteration"
      op: "NextIteration"
      input: "cond_1/map/while/add:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map/while/NextIteration_1"
      op: "NextIteration"
      input: "cond_1/map/while/add_1:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map/while/NextIteration_2"
      op: "NextIteration"
      input: "cond_1/map/while/TensorArrayWrite/TensorArrayWriteV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_1/map/while/NextIteration_3"
      op: "NextIteration"
      input: "cond_1/map/while/TensorArrayWrite_1/TensorArrayWriteV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_1/map/while/Exit"
      op: "Exit"
      input: "cond_1/map/while/Switch:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map/while/Exit_1"
      op: "Exit"
      input: "cond_1/map/while/Switch_1:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map/while/Exit_2"
      op: "Exit"
      input: "cond_1/map/while/Switch_2:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_1/map/while/Exit_3"
      op: "Exit"
      input: "cond_1/map/while/Switch_3:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_1/map/TensorArrayStack/TensorArraySizeV3"
      op: "TensorArraySizeV3"
      input: "cond_1/map/TensorArray_2:handle:0"
      input: "cond_1/map/while/Exit_2:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map/TensorArray_2"
          }
        }
      }
    }
    node_def {
      name: "cond_1/map/TensorArrayStack/range/start"
      op: "Const"
      input: "^cond_1/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_1/map/TensorArrayStack/range/delta"
      op: "Const"
      input: "^cond_1/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_1/map/TensorArrayStack/range"
      op: "Range"
      input: "cond_1/map/TensorArrayStack/range/start:output:0"
      input: "cond_1/map/TensorArrayStack/TensorArraySizeV3:size:0"
      input: "cond_1/map/TensorArrayStack/range/delta:output:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map/TensorArray_2"
          }
        }
      }
    }
    node_def {
      name: "cond_1/map/TensorArrayStack/TensorArrayGatherV3"
      op: "TensorArrayGatherV3"
      input: "cond_1/map/TensorArray_2:handle:0"
      input: "cond_1/map/TensorArrayStack/range:output:0"
      input: "cond_1/map/while/Exit_2:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
          }
        }
      }
    }
    node_def {
      name: "cond_1/map/TensorArrayStack_1/TensorArraySizeV3"
      op: "TensorArraySizeV3"
      input: "cond_1/map/TensorArray_3:handle:0"
      input: "cond_1/map/while/Exit_3:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map/TensorArray_3"
          }
        }
      }
    }
    node_def {
      name: "cond_1/map/TensorArrayStack_1/range/start"
      op: "Const"
      input: "^cond_1/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map/TensorArray_3"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_1/map/TensorArrayStack_1/range/delta"
      op: "Const"
      input: "^cond_1/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map/TensorArray_3"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_1/map/TensorArrayStack_1/range"
      op: "Range"
      input: "cond_1/map/TensorArrayStack_1/range/start:output:0"
      input: "cond_1/map/TensorArrayStack_1/TensorArraySizeV3:size:0"
      input: "cond_1/map/TensorArrayStack_1/range/delta:output:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map/TensorArray_3"
          }
        }
      }
    }
    node_def {
      name: "cond_1/map/TensorArrayStack_1/TensorArrayGatherV3"
      op: "TensorArrayGatherV3"
      input: "cond_1/map/TensorArray_3:handle:0"
      input: "cond_1/map/TensorArrayStack_1/range:output:0"
      input: "cond_1/map/while/Exit_3:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map/TensorArray_3"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
          }
        }
      }
    }
    node_def {
      name: "cond_1/transpose/a"
      op: "Pack"
      input: "cond_1/map/TensorArrayStack/TensorArrayGatherV3:value:0"
      input: "cond_1/map/TensorArrayStack_1/TensorArrayGatherV3:value:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "cond_1/transpose/perm"
      op: "Const"
      input: "^cond_1/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_1/transpose"
      op: "Transpose"
      input: "cond_1/transpose/a:output:0"
      input: "cond_1/transpose/perm:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/AsString"
      op: "AsString"
      input: "cond_1/Reshape:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "fill"
        value {
          s: ""
        }
      }
      attr {
        key: "precision"
        value {
          i: -1
        }
      }
      attr {
        key: "scientific"
        value {
          b: false
        }
      }
      attr {
        key: "shortest"
        value {
          b: false
        }
      }
      attr {
        key: "width"
        value {
          i: -1
        }
      }
    }
    node_def {
      name: "cond_1/map_1/TensorArray/size"
      op: "Const"
      input: "^cond_1/switch_t"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_1/TensorArray"
      op: "TensorArrayV3"
      input: "cond_1/map_1/TensorArray/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_1/map_1/TensorArrayUnstack/Shape"
      op: "Const"
      input: "^cond_1/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\032\000\000\000\002\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_1/TensorArrayUnstack/strided_slice/stack"
      op: "Const"
      input: "^cond_1/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_1/TensorArrayUnstack/strided_slice/stack_1"
      op: "Const"
      input: "^cond_1/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_1/TensorArrayUnstack/strided_slice/stack_2"
      op: "Const"
      input: "^cond_1/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_1/TensorArrayUnstack/strided_slice"
      op: "StridedSlice"
      input: "cond_1/map_1/TensorArrayUnstack/Shape:output:0"
      input: "cond_1/map_1/TensorArrayUnstack/strided_slice/stack:output:0"
      input: "cond_1/map_1/TensorArrayUnstack/strided_slice/stack_1:output:0"
      input: "cond_1/map_1/TensorArrayUnstack/strided_slice/stack_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "cond_1/map_1/TensorArrayUnstack/range/start"
      op: "Const"
      input: "^cond_1/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_1/TensorArrayUnstack/range/delta"
      op: "Const"
      input: "^cond_1/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_1/TensorArrayUnstack/range"
      op: "Range"
      input: "cond_1/map_1/TensorArrayUnstack/range/start:output:0"
      input: "cond_1/map_1/TensorArrayUnstack/strided_slice:output:0"
      input: "cond_1/map_1/TensorArrayUnstack/range/delta:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
      op: "TensorArrayScatterV3"
      input: "cond_1/map_1/TensorArray:handle:0"
      input: "cond_1/map_1/TensorArrayUnstack/range:output:0"
      input: "cond_1/AsString:output:0"
      input: "cond_1/map_1/TensorArray:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/AsString"
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_1/Const"
      op: "Const"
      input: "^cond_1/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_1/TensorArray_1/size"
      op: "Const"
      input: "^cond_1/switch_t"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_1/TensorArray_1"
      op: "TensorArrayV3"
      input: "cond_1/map_1/TensorArray_1/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_1/map_1/while/maximum_iterations"
      op: "Const"
      input: "^cond_1/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_1/while/iteration_counter"
      op: "Const"
      input: "^cond_1/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_1/while/Enter"
      op: "Enter"
      input: "cond_1/map_1/while/iteration_counter:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_1/map_1/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_1/map_1/while/Enter_1"
      op: "Enter"
      input: "cond_1/map_1/Const:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_1/map_1/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_1/map_1/while/Enter_2"
      op: "Enter"
      input: "cond_1/map_1/TensorArray_1:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_1/map_1/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_1/map_1/while/Merge"
      op: "Merge"
      input: "cond_1/map_1/while/Enter:output:0"
      input: "cond_1/map_1/while/NextIteration:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map_1/while/Merge_1"
      op: "Merge"
      input: "cond_1/map_1/while/Enter_1:output:0"
      input: "cond_1/map_1/while/NextIteration_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map_1/while/Merge_2"
      op: "Merge"
      input: "cond_1/map_1/while/Enter_2:output:0"
      input: "cond_1/map_1/while/NextIteration_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_1/map_1/while/Less"
      op: "Less"
      input: "cond_1/map_1/while/Merge:output:0"
      input: "cond_1/map_1/while/Less/Enter:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map_1/while/Less/Enter"
      op: "Enter"
      input: "cond_1/map_1/while/maximum_iterations:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_1/map_1/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_1/map_1/while/Less_1/y"
      op: "Const"
      input: "^cond_1/map_1/while/Merge"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_1/while/Less_1"
      op: "Less"
      input: "cond_1/map_1/while/Merge_1:output:0"
      input: "cond_1/map_1/while/Less_1/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map_1/while/LogicalAnd"
      op: "LogicalAnd"
      input: "cond_1/map_1/while/Less:z:0"
      input: "cond_1/map_1/while/Less_1:z:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "cond_1/map_1/while/LoopCond"
      op: "LoopCond"
      input: "cond_1/map_1/while/LogicalAnd:z:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "cond_1/map_1/while/Switch"
      op: "Switch"
      input: "cond_1/map_1/while/Merge:output:0"
      input: "cond_1/map_1/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map_1/while/Merge"
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_1/while/Switch_1"
      op: "Switch"
      input: "cond_1/map_1/while/Merge_1:output:0"
      input: "cond_1/map_1/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map_1/while/Merge_1"
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_1/while/Switch_2"
      op: "Switch"
      input: "cond_1/map_1/while/Merge_2:output:0"
      input: "cond_1/map_1/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map_1/while/Merge_2"
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_1/while/Identity"
      op: "Identity"
      input: "cond_1/map_1/while/Switch:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map_1/while/Identity_1"
      op: "Identity"
      input: "cond_1/map_1/while/Switch_1:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map_1/while/Identity_2"
      op: "Identity"
      input: "cond_1/map_1/while/Switch_2:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_1/map_1/while/add/y"
      op: "Const"
      input: "^cond_1/map_1/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_1/while/add"
      op: "Add"
      input: "cond_1/map_1/while/Identity:output:0"
      input: "cond_1/map_1/while/add/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map_1/while/TensorArrayReadV3"
      op: "TensorArrayReadV3"
      input: "cond_1/map_1/while/TensorArrayReadV3/Enter:output:0"
      input: "cond_1/map_1/while/Identity_1:output:0"
      input: "cond_1/map_1/while/TensorArrayReadV3/Enter_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
    }
    node_def {
      name: "cond_1/map_1/while/TensorArrayReadV3/Enter"
      op: "Enter"
      input: "cond_1/map_1/TensorArray:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_1/map_1/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_1/map_1/while/TensorArrayReadV3/Enter_1"
      op: "Enter"
      input: "cond_1/map_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_1/map_1/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_1/map_1/while/strided_slice/stack"
      op: "Const"
      input: "^cond_1/map_1/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_1/while/strided_slice/stack_1"
      op: "Const"
      input: "^cond_1/map_1/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_1/while/strided_slice/stack_2"
      op: "Const"
      input: "^cond_1/map_1/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_1/while/strided_slice"
      op: "StridedSlice"
      input: "cond_1/map_1/while/TensorArrayReadV3:value:0"
      input: "cond_1/map_1/while/strided_slice/stack:output:0"
      input: "cond_1/map_1/while/strided_slice/stack_1:output:0"
      input: "cond_1/map_1/while/strided_slice/stack_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "cond_1/map_1/while/TensorArrayWrite/TensorArrayWriteV3"
      op: "TensorArrayWriteV3"
      input: "cond_1/map_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter:output:0"
      input: "cond_1/map_1/while/Identity_1:output:0"
      input: "cond_1/map_1/while/strided_slice:output:0"
      input: "cond_1/map_1/while/Identity_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map_1/while/strided_slice"
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
      op: "Enter"
      input: "cond_1/map_1/TensorArray_1:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map_1/while/strided_slice"
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_1/map_1/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_1/map_1/while/add_1/y"
      op: "Const"
      input: "^cond_1/map_1/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_1/while/add_1"
      op: "Add"
      input: "cond_1/map_1/while/Identity_1:output:0"
      input: "cond_1/map_1/while/add_1/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map_1/while/NextIteration"
      op: "NextIteration"
      input: "cond_1/map_1/while/add:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map_1/while/NextIteration_1"
      op: "NextIteration"
      input: "cond_1/map_1/while/add_1:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map_1/while/NextIteration_2"
      op: "NextIteration"
      input: "cond_1/map_1/while/TensorArrayWrite/TensorArrayWriteV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_1/map_1/while/Exit"
      op: "Exit"
      input: "cond_1/map_1/while/Switch:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map_1/while/Exit_1"
      op: "Exit"
      input: "cond_1/map_1/while/Switch_1:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map_1/while/Exit_2"
      op: "Exit"
      input: "cond_1/map_1/while/Switch_2:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_1/map_1/TensorArrayStack/TensorArraySizeV3"
      op: "TensorArraySizeV3"
      input: "cond_1/map_1/TensorArray_1:handle:0"
      input: "cond_1/map_1/while/Exit_2:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map_1/TensorArray_1"
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_1/TensorArrayStack/range/start"
      op: "Const"
      input: "^cond_1/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map_1/TensorArray_1"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_1/TensorArrayStack/range/delta"
      op: "Const"
      input: "^cond_1/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map_1/TensorArray_1"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_1/TensorArrayStack/range"
      op: "Range"
      input: "cond_1/map_1/TensorArrayStack/range/start:output:0"
      input: "cond_1/map_1/TensorArrayStack/TensorArraySizeV3:size:0"
      input: "cond_1/map_1/TensorArrayStack/range/delta:output:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map_1/TensorArray_1"
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_1/TensorArrayStack/TensorArrayGatherV3"
      op: "TensorArrayGatherV3"
      input: "cond_1/map_1/TensorArray_1:handle:0"
      input: "cond_1/map_1/TensorArrayStack/range:output:0"
      input: "cond_1/map_1/while/Exit_2:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map_1/TensorArray_1"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
          }
        }
      }
    }
    node_def {
      name: "cond_1/SparseTensor/dense_shape"
      op: "Const"
      input: "^cond_1/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\032\000\000\000\000\000\000\000d\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_1/SparseToDense/default_value"
      op: "Const"
      input: "^cond_1/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "0"
          }
        }
      }
    }
    node_def {
      name: "cond_1/SparseToDense"
      op: "SparseToDense"
      input: "cond_1/transpose:y:0"
      input: "cond_1/SparseTensor/dense_shape:output:0"
      input: "cond_1/map_1/TensorArrayStack/TensorArrayGatherV3:value:0"
      input: "cond_1/SparseToDense/default_value:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "cond_1/StringToNumber_1"
      op: "StringToNumber"
      input: "cond_1/StringToNumber_1/Switch:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "out_type"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_1/StringToNumber_1/Switch"
      op: "Switch"
      input: "StringSplit_1:values:0"
      input: "cond_1/pred_id:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@StringSplit_1"
          }
        }
      }
    }
    node_def {
      name: "cond_1/Cast"
      op: "Cast"
      input: "cond_1/StringToNumber_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "cond_1/Reshape_1/shape"
      op: "Const"
      input: "^cond_1/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\032\000\000\000\n\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_1/Reshape_1"
      op: "Reshape"
      input: "cond_1/Cast:y:0"
      input: "cond_1/Reshape_1/shape:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map_2/elem"
      op: "Const"
      input: "^cond_1/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 26
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\021\000\000\000\000\000\000\000\022\000\000\000\000\000\000\000\023\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\025\000\000\000\000\000\000\000\026\000\000\000\000\000\000\000\027\000\000\000\000\000\000\000\030\000\000\000\000\000\000\000\031\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/TensorArray/size"
      op: "Const"
      input: "^cond_1/switch_f"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/TensorArray"
      op: "TensorArrayV3"
      input: "cond_1/map_2/TensorArray/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_1/map_2/TensorArray_1/size"
      op: "Const"
      input: "^cond_1/switch_f"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/TensorArray_1"
      op: "TensorArrayV3"
      input: "cond_1/map_2/TensorArray_1/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_1/map_2/TensorArrayUnstack/Shape"
      op: "Const"
      input: "^cond_1/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/TensorArrayUnstack/strided_slice/stack"
      op: "Const"
      input: "^cond_1/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/TensorArrayUnstack/strided_slice/stack_1"
      op: "Const"
      input: "^cond_1/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/TensorArrayUnstack/strided_slice/stack_2"
      op: "Const"
      input: "^cond_1/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/TensorArrayUnstack/strided_slice"
      op: "StridedSlice"
      input: "cond_1/map_2/TensorArrayUnstack/Shape:output:0"
      input: "cond_1/map_2/TensorArrayUnstack/strided_slice/stack:output:0"
      input: "cond_1/map_2/TensorArrayUnstack/strided_slice/stack_1:output:0"
      input: "cond_1/map_2/TensorArrayUnstack/strided_slice/stack_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "cond_1/map_2/TensorArrayUnstack/range/start"
      op: "Const"
      input: "^cond_1/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/TensorArrayUnstack/range/delta"
      op: "Const"
      input: "^cond_1/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/TensorArrayUnstack/range"
      op: "Range"
      input: "cond_1/map_2/TensorArrayUnstack/range/start:output:0"
      input: "cond_1/map_2/TensorArrayUnstack/strided_slice:output:0"
      input: "cond_1/map_2/TensorArrayUnstack/range/delta:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
      op: "TensorArrayScatterV3"
      input: "cond_1/map_2/TensorArray:handle:0"
      input: "cond_1/map_2/TensorArrayUnstack/range:output:0"
      input: "cond_1/map_2/elem:output:0"
      input: "cond_1/map_2/TensorArray:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map_2/elem"
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/TensorArrayUnstack_1/Shape"
      op: "Const"
      input: "^cond_1/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\032\000\000\000\n\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/TensorArrayUnstack_1/strided_slice/stack"
      op: "Const"
      input: "^cond_1/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/TensorArrayUnstack_1/strided_slice/stack_1"
      op: "Const"
      input: "^cond_1/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/TensorArrayUnstack_1/strided_slice/stack_2"
      op: "Const"
      input: "^cond_1/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/TensorArrayUnstack_1/strided_slice"
      op: "StridedSlice"
      input: "cond_1/map_2/TensorArrayUnstack_1/Shape:output:0"
      input: "cond_1/map_2/TensorArrayUnstack_1/strided_slice/stack:output:0"
      input: "cond_1/map_2/TensorArrayUnstack_1/strided_slice/stack_1:output:0"
      input: "cond_1/map_2/TensorArrayUnstack_1/strided_slice/stack_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "cond_1/map_2/TensorArrayUnstack_1/range/start"
      op: "Const"
      input: "^cond_1/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/TensorArrayUnstack_1/range/delta"
      op: "Const"
      input: "^cond_1/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/TensorArrayUnstack_1/range"
      op: "Range"
      input: "cond_1/map_2/TensorArrayUnstack_1/range/start:output:0"
      input: "cond_1/map_2/TensorArrayUnstack_1/strided_slice:output:0"
      input: "cond_1/map_2/TensorArrayUnstack_1/range/delta:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map_2/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
      op: "TensorArrayScatterV3"
      input: "cond_1/map_2/TensorArray_1:handle:0"
      input: "cond_1/map_2/TensorArrayUnstack_1/range:output:0"
      input: "cond_1/Reshape_1:output:0"
      input: "cond_1/map_2/TensorArray_1:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/Reshape_1"
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/Const"
      op: "Const"
      input: "^cond_1/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/TensorArray_2/size"
      op: "Const"
      input: "^cond_1/switch_f"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/TensorArray_2"
      op: "TensorArrayV3"
      input: "cond_1/map_2/TensorArray_2/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_1/map_2/TensorArray_3/size"
      op: "Const"
      input: "^cond_1/switch_f"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/TensorArray_3"
      op: "TensorArrayV3"
      input: "cond_1/map_2/TensorArray_3/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/maximum_iterations"
      op: "Const"
      input: "^cond_1/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/iteration_counter"
      op: "Const"
      input: "^cond_1/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/Enter"
      op: "Enter"
      input: "cond_1/map_2/while/iteration_counter:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_1/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/Enter_1"
      op: "Enter"
      input: "cond_1/map_2/Const:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_1/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/Enter_2"
      op: "Enter"
      input: "cond_1/map_2/TensorArray_2:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_1/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/Enter_3"
      op: "Enter"
      input: "cond_1/map_2/TensorArray_3:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_1/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/Merge"
      op: "Merge"
      input: "cond_1/map_2/while/Enter:output:0"
      input: "cond_1/map_2/while/NextIteration:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/Merge_1"
      op: "Merge"
      input: "cond_1/map_2/while/Enter_1:output:0"
      input: "cond_1/map_2/while/NextIteration_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/Merge_2"
      op: "Merge"
      input: "cond_1/map_2/while/Enter_2:output:0"
      input: "cond_1/map_2/while/NextIteration_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/Merge_3"
      op: "Merge"
      input: "cond_1/map_2/while/Enter_3:output:0"
      input: "cond_1/map_2/while/NextIteration_3:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/Less"
      op: "Less"
      input: "cond_1/map_2/while/Merge:output:0"
      input: "cond_1/map_2/while/Less/Enter:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/Less/Enter"
      op: "Enter"
      input: "cond_1/map_2/while/maximum_iterations:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_1/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/Less_1/y"
      op: "Const"
      input: "^cond_1/map_2/while/Merge"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/Less_1"
      op: "Less"
      input: "cond_1/map_2/while/Merge_1:output:0"
      input: "cond_1/map_2/while/Less_1/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/LogicalAnd"
      op: "LogicalAnd"
      input: "cond_1/map_2/while/Less:z:0"
      input: "cond_1/map_2/while/Less_1:z:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "cond_1/map_2/while/LoopCond"
      op: "LoopCond"
      input: "cond_1/map_2/while/LogicalAnd:z:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "cond_1/map_2/while/Switch"
      op: "Switch"
      input: "cond_1/map_2/while/Merge:output:0"
      input: "cond_1/map_2/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map_2/while/Merge"
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/Switch_1"
      op: "Switch"
      input: "cond_1/map_2/while/Merge_1:output:0"
      input: "cond_1/map_2/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map_2/while/Merge_1"
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/Switch_2"
      op: "Switch"
      input: "cond_1/map_2/while/Merge_2:output:0"
      input: "cond_1/map_2/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map_2/while/Merge_2"
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/Switch_3"
      op: "Switch"
      input: "cond_1/map_2/while/Merge_3:output:0"
      input: "cond_1/map_2/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map_2/while/Merge_3"
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/Identity"
      op: "Identity"
      input: "cond_1/map_2/while/Switch:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/Identity_1"
      op: "Identity"
      input: "cond_1/map_2/while/Switch_1:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/Identity_2"
      op: "Identity"
      input: "cond_1/map_2/while/Switch_2:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/Identity_3"
      op: "Identity"
      input: "cond_1/map_2/while/Switch_3:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/add/y"
      op: "Const"
      input: "^cond_1/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/add"
      op: "Add"
      input: "cond_1/map_2/while/Identity:output:0"
      input: "cond_1/map_2/while/add/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/TensorArrayReadV3"
      op: "TensorArrayReadV3"
      input: "cond_1/map_2/while/TensorArrayReadV3/Enter:output:0"
      input: "cond_1/map_2/while/Identity_1:output:0"
      input: "cond_1/map_2/while/TensorArrayReadV3/Enter_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/TensorArrayReadV3/Enter"
      op: "Enter"
      input: "cond_1/map_2/TensorArray:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_1/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/TensorArrayReadV3/Enter_1"
      op: "Enter"
      input: "cond_1/map_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_1/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/TensorArrayReadV3_1"
      op: "TensorArrayReadV3"
      input: "cond_1/map_2/while/TensorArrayReadV3_1/Enter:output:0"
      input: "cond_1/map_2/while/Identity_1:output:0"
      input: "cond_1/map_2/while/TensorArrayReadV3_1/Enter_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/TensorArrayReadV3_1/Enter"
      op: "Enter"
      input: "cond_1/map_2/TensorArray_1:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_1/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/TensorArrayReadV3_1/Enter_1"
      op: "Enter"
      input: "cond_1/map_2/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_1/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/TensorArray/size"
      op: "Const"
      input: "^cond_1/map_2/while/Identity"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 10
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/TensorArray"
      op: "TensorArrayV3"
      input: "cond_1/map_2/while/map/TensorArray/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/TensorArrayUnstack/Shape"
      op: "Const"
      input: "^cond_1/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 10
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/TensorArrayUnstack/strided_slice/stack"
      op: "Const"
      input: "^cond_1/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/TensorArrayUnstack/strided_slice/stack_1"
      op: "Const"
      input: "^cond_1/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/TensorArrayUnstack/strided_slice/stack_2"
      op: "Const"
      input: "^cond_1/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/TensorArrayUnstack/strided_slice"
      op: "StridedSlice"
      input: "cond_1/map_2/while/map/TensorArrayUnstack/Shape:output:0"
      input: "cond_1/map_2/while/map/TensorArrayUnstack/strided_slice/stack:output:0"
      input: "cond_1/map_2/while/map/TensorArrayUnstack/strided_slice/stack_1:output:0"
      input: "cond_1/map_2/while/map/TensorArrayUnstack/strided_slice/stack_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/TensorArrayUnstack/range/start"
      op: "Const"
      input: "^cond_1/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/TensorArrayUnstack/range/delta"
      op: "Const"
      input: "^cond_1/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/TensorArrayUnstack/range"
      op: "Range"
      input: "cond_1/map_2/while/map/TensorArrayUnstack/range/start:output:0"
      input: "cond_1/map_2/while/map/TensorArrayUnstack/strided_slice:output:0"
      input: "cond_1/map_2/while/map/TensorArrayUnstack/range/delta:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
      op: "TensorArrayScatterV3"
      input: "cond_1/map_2/while/map/TensorArray:handle:0"
      input: "cond_1/map_2/while/map/TensorArrayUnstack/range:output:0"
      input: "cond_1/map_2/while/TensorArrayReadV3_1:value:0"
      input: "cond_1/map_2/while/map/TensorArray:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map_2/while/TensorArrayReadV3_1"
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/Const"
      op: "Const"
      input: "^cond_1/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/TensorArray_1/size"
      op: "Const"
      input: "^cond_1/map_2/while/Identity"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 10
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/TensorArray_1"
      op: "TensorArrayV3"
      input: "cond_1/map_2/while/map/TensorArray_1/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/TensorArray_2/size"
      op: "Const"
      input: "^cond_1/map_2/while/Identity"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 10
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/TensorArray_2"
      op: "TensorArrayV3"
      input: "cond_1/map_2/while/map/TensorArray_2/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/while/maximum_iterations"
      op: "Const"
      input: "^cond_1/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 10
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/while/iteration_counter"
      op: "Const"
      input: "^cond_1/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/while/Enter"
      op: "Enter"
      input: "cond_1/map_2/while/map/while/iteration_counter:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_1/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/while/Enter_1"
      op: "Enter"
      input: "cond_1/map_2/while/map/Const:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_1/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/while/Enter_2"
      op: "Enter"
      input: "cond_1/map_2/while/map/TensorArray_1:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_1/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/while/Enter_3"
      op: "Enter"
      input: "cond_1/map_2/while/map/TensorArray_2:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_1/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/while/Merge"
      op: "Merge"
      input: "cond_1/map_2/while/map/while/Enter:output:0"
      input: "cond_1/map_2/while/map/while/NextIteration:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/while/Merge_1"
      op: "Merge"
      input: "cond_1/map_2/while/map/while/Enter_1:output:0"
      input: "cond_1/map_2/while/map/while/NextIteration_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/while/Merge_2"
      op: "Merge"
      input: "cond_1/map_2/while/map/while/Enter_2:output:0"
      input: "cond_1/map_2/while/map/while/NextIteration_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/while/Merge_3"
      op: "Merge"
      input: "cond_1/map_2/while/map/while/Enter_3:output:0"
      input: "cond_1/map_2/while/map/while/NextIteration_3:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/while/Less"
      op: "Less"
      input: "cond_1/map_2/while/map/while/Merge:output:0"
      input: "cond_1/map_2/while/map/while/Less/Enter:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/while/Less/Enter"
      op: "Enter"
      input: "cond_1/map_2/while/map/while/maximum_iterations:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_1/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/while/Less_1/y"
      op: "Const"
      input: "^cond_1/map_2/while/map/while/Merge"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 10
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/while/Less_1"
      op: "Less"
      input: "cond_1/map_2/while/map/while/Merge_1:output:0"
      input: "cond_1/map_2/while/map/while/Less_1/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/while/LogicalAnd"
      op: "LogicalAnd"
      input: "cond_1/map_2/while/map/while/Less:z:0"
      input: "cond_1/map_2/while/map/while/Less_1:z:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "cond_1/map_2/while/map/while/LoopCond"
      op: "LoopCond"
      input: "cond_1/map_2/while/map/while/LogicalAnd:z:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "cond_1/map_2/while/map/while/Switch"
      op: "Switch"
      input: "cond_1/map_2/while/map/while/Merge:output:0"
      input: "cond_1/map_2/while/map/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map_2/while/map/while/Merge"
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/while/Switch_1"
      op: "Switch"
      input: "cond_1/map_2/while/map/while/Merge_1:output:0"
      input: "cond_1/map_2/while/map/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map_2/while/map/while/Merge_1"
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/while/Switch_2"
      op: "Switch"
      input: "cond_1/map_2/while/map/while/Merge_2:output:0"
      input: "cond_1/map_2/while/map/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map_2/while/map/while/Merge_2"
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/while/Switch_3"
      op: "Switch"
      input: "cond_1/map_2/while/map/while/Merge_3:output:0"
      input: "cond_1/map_2/while/map/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map_2/while/map/while/Merge_3"
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/while/Identity"
      op: "Identity"
      input: "cond_1/map_2/while/map/while/Switch:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/while/Identity_1"
      op: "Identity"
      input: "cond_1/map_2/while/map/while/Switch_1:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/while/Identity_2"
      op: "Identity"
      input: "cond_1/map_2/while/map/while/Switch_2:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/while/Identity_3"
      op: "Identity"
      input: "cond_1/map_2/while/map/while/Switch_3:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/while/add/y"
      op: "Const"
      input: "^cond_1/map_2/while/map/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/while/add"
      op: "Add"
      input: "cond_1/map_2/while/map/while/Identity:output:0"
      input: "cond_1/map_2/while/map/while/add/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/while/TensorArrayReadV3"
      op: "TensorArrayReadV3"
      input: "cond_1/map_2/while/map/while/TensorArrayReadV3/Enter:output:0"
      input: "cond_1/map_2/while/map/while/Identity_1:output:0"
      input: "cond_1/map_2/while/map/while/TensorArrayReadV3/Enter_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/while/TensorArrayReadV3/Enter"
      op: "Enter"
      input: "cond_1/map_2/while/map/TensorArray:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_1/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/while/TensorArrayReadV3/Enter_1"
      op: "Enter"
      input: "cond_1/map_2/while/map/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_1/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/while/TensorArrayWrite/TensorArrayWriteV3"
      op: "TensorArrayWriteV3"
      input: "cond_1/map_2/while/map/while/TensorArrayWrite/TensorArrayWriteV3/Enter:output:0"
      input: "cond_1/map_2/while/map/while/Identity_1:output:0"
      input: "cond_1/map_2/while/map/while/TensorArrayWrite/TensorArrayWriteV3/Enter_1:output:0"
      input: "cond_1/map_2/while/map/while/Identity_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map_2/while/TensorArrayReadV3"
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
      op: "Enter"
      input: "cond_1/map_2/while/map/TensorArray_1:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map_2/while/TensorArrayReadV3"
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_1/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/while/TensorArrayWrite/TensorArrayWriteV3/Enter_1"
      op: "Enter"
      input: "cond_1/map_2/while/TensorArrayReadV3:value:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map_2/while/TensorArrayReadV3"
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_1/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/while/TensorArrayWrite_1/TensorArrayWriteV3"
      op: "TensorArrayWriteV3"
      input: "cond_1/map_2/while/map/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter:output:0"
      input: "cond_1/map_2/while/map/while/Identity_1:output:0"
      input: "cond_1/map_2/while/map/while/TensorArrayReadV3:value:0"
      input: "cond_1/map_2/while/map/while/Identity_3:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map_2/while/map/while/TensorArrayReadV3"
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
      op: "Enter"
      input: "cond_1/map_2/while/map/TensorArray_2:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map_2/while/map/while/TensorArrayReadV3"
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_1/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/while/add_1/y"
      op: "Const"
      input: "^cond_1/map_2/while/map/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/while/add_1"
      op: "Add"
      input: "cond_1/map_2/while/map/while/Identity_1:output:0"
      input: "cond_1/map_2/while/map/while/add_1/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/while/NextIteration"
      op: "NextIteration"
      input: "cond_1/map_2/while/map/while/add:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/while/NextIteration_1"
      op: "NextIteration"
      input: "cond_1/map_2/while/map/while/add_1:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/while/NextIteration_2"
      op: "NextIteration"
      input: "cond_1/map_2/while/map/while/TensorArrayWrite/TensorArrayWriteV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/while/NextIteration_3"
      op: "NextIteration"
      input: "cond_1/map_2/while/map/while/TensorArrayWrite_1/TensorArrayWriteV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/while/Exit"
      op: "Exit"
      input: "cond_1/map_2/while/map/while/Switch:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/while/Exit_1"
      op: "Exit"
      input: "cond_1/map_2/while/map/while/Switch_1:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/while/Exit_2"
      op: "Exit"
      input: "cond_1/map_2/while/map/while/Switch_2:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/while/Exit_3"
      op: "Exit"
      input: "cond_1/map_2/while/map/while/Switch_3:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/TensorArrayStack/TensorArraySizeV3"
      op: "TensorArraySizeV3"
      input: "cond_1/map_2/while/map/TensorArray_1:handle:0"
      input: "cond_1/map_2/while/map/while/Exit_2:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map_2/while/map/TensorArray_1"
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/TensorArrayStack/range/start"
      op: "Const"
      input: "^cond_1/map_2/while/Identity"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map_2/while/map/TensorArray_1"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/TensorArrayStack/range/delta"
      op: "Const"
      input: "^cond_1/map_2/while/Identity"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map_2/while/map/TensorArray_1"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/TensorArrayStack/range"
      op: "Range"
      input: "cond_1/map_2/while/map/TensorArrayStack/range/start:output:0"
      input: "cond_1/map_2/while/map/TensorArrayStack/TensorArraySizeV3:size:0"
      input: "cond_1/map_2/while/map/TensorArrayStack/range/delta:output:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map_2/while/map/TensorArray_1"
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/TensorArrayStack/TensorArrayGatherV3"
      op: "TensorArrayGatherV3"
      input: "cond_1/map_2/while/map/TensorArray_1:handle:0"
      input: "cond_1/map_2/while/map/TensorArrayStack/range:output:0"
      input: "cond_1/map_2/while/map/while/Exit_2:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map_2/while/map/TensorArray_1"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/TensorArrayStack_1/TensorArraySizeV3"
      op: "TensorArraySizeV3"
      input: "cond_1/map_2/while/map/TensorArray_2:handle:0"
      input: "cond_1/map_2/while/map/while/Exit_3:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map_2/while/map/TensorArray_2"
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/TensorArrayStack_1/range/start"
      op: "Const"
      input: "^cond_1/map_2/while/Identity"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map_2/while/map/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/TensorArrayStack_1/range/delta"
      op: "Const"
      input: "^cond_1/map_2/while/Identity"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map_2/while/map/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/TensorArrayStack_1/range"
      op: "Range"
      input: "cond_1/map_2/while/map/TensorArrayStack_1/range/start:output:0"
      input: "cond_1/map_2/while/map/TensorArrayStack_1/TensorArraySizeV3:size:0"
      input: "cond_1/map_2/while/map/TensorArrayStack_1/range/delta:output:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map_2/while/map/TensorArray_2"
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/map/TensorArrayStack_1/TensorArrayGatherV3"
      op: "TensorArrayGatherV3"
      input: "cond_1/map_2/while/map/TensorArray_2:handle:0"
      input: "cond_1/map_2/while/map/TensorArrayStack_1/range:output:0"
      input: "cond_1/map_2/while/map/while/Exit_3:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map_2/while/map/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/TensorArrayWrite/TensorArrayWriteV3"
      op: "TensorArrayWriteV3"
      input: "cond_1/map_2/while/TensorArrayWrite/TensorArrayWriteV3/Enter:output:0"
      input: "cond_1/map_2/while/Identity_1:output:0"
      input: "cond_1/map_2/while/map/TensorArrayStack/TensorArrayGatherV3:value:0"
      input: "cond_1/map_2/while/Identity_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map_2/while/map/TensorArray_1"
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
      op: "Enter"
      input: "cond_1/map_2/TensorArray_2:handle:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map_2/while/map/TensorArray_1"
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_1/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/TensorArrayWrite_1/TensorArrayWriteV3"
      op: "TensorArrayWriteV3"
      input: "cond_1/map_2/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter:output:0"
      input: "cond_1/map_2/while/Identity_1:output:0"
      input: "cond_1/map_2/while/map/TensorArrayStack_1/TensorArrayGatherV3:value:0"
      input: "cond_1/map_2/while/Identity_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map_2/while/map/TensorArray_2"
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
      op: "Enter"
      input: "cond_1/map_2/TensorArray_3:handle:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map_2/while/map/TensorArray_2"
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_1/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/add_1/y"
      op: "Const"
      input: "^cond_1/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/add_1"
      op: "Add"
      input: "cond_1/map_2/while/Identity_1:output:0"
      input: "cond_1/map_2/while/add_1/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/NextIteration"
      op: "NextIteration"
      input: "cond_1/map_2/while/add:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/NextIteration_1"
      op: "NextIteration"
      input: "cond_1/map_2/while/add_1:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/NextIteration_2"
      op: "NextIteration"
      input: "cond_1/map_2/while/TensorArrayWrite/TensorArrayWriteV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/NextIteration_3"
      op: "NextIteration"
      input: "cond_1/map_2/while/TensorArrayWrite_1/TensorArrayWriteV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/Exit"
      op: "Exit"
      input: "cond_1/map_2/while/Switch:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/Exit_1"
      op: "Exit"
      input: "cond_1/map_2/while/Switch_1:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/Exit_2"
      op: "Exit"
      input: "cond_1/map_2/while/Switch_2:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_1/map_2/while/Exit_3"
      op: "Exit"
      input: "cond_1/map_2/while/Switch_3:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_1/map_2/TensorArrayStack/TensorArraySizeV3"
      op: "TensorArraySizeV3"
      input: "cond_1/map_2/TensorArray_2:handle:0"
      input: "cond_1/map_2/while/Exit_2:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map_2/TensorArray_2"
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/TensorArrayStack/range/start"
      op: "Const"
      input: "^cond_1/switch_f"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map_2/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/TensorArrayStack/range/delta"
      op: "Const"
      input: "^cond_1/switch_f"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map_2/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/TensorArrayStack/range"
      op: "Range"
      input: "cond_1/map_2/TensorArrayStack/range/start:output:0"
      input: "cond_1/map_2/TensorArrayStack/TensorArraySizeV3:size:0"
      input: "cond_1/map_2/TensorArrayStack/range/delta:output:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map_2/TensorArray_2"
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/TensorArrayStack/TensorArrayGatherV3"
      op: "TensorArrayGatherV3"
      input: "cond_1/map_2/TensorArray_2:handle:0"
      input: "cond_1/map_2/TensorArrayStack/range:output:0"
      input: "cond_1/map_2/while/Exit_2:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map_2/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            dim {
              size: 10
            }
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/TensorArrayStack_1/TensorArraySizeV3"
      op: "TensorArraySizeV3"
      input: "cond_1/map_2/TensorArray_3:handle:0"
      input: "cond_1/map_2/while/Exit_3:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map_2/TensorArray_3"
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/TensorArrayStack_1/range/start"
      op: "Const"
      input: "^cond_1/switch_f"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map_2/TensorArray_3"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/TensorArrayStack_1/range/delta"
      op: "Const"
      input: "^cond_1/switch_f"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map_2/TensorArray_3"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/TensorArrayStack_1/range"
      op: "Range"
      input: "cond_1/map_2/TensorArrayStack_1/range/start:output:0"
      input: "cond_1/map_2/TensorArrayStack_1/TensorArraySizeV3:size:0"
      input: "cond_1/map_2/TensorArrayStack_1/range/delta:output:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map_2/TensorArray_3"
          }
        }
      }
    }
    node_def {
      name: "cond_1/map_2/TensorArrayStack_1/TensorArrayGatherV3"
      op: "TensorArrayGatherV3"
      input: "cond_1/map_2/TensorArray_3:handle:0"
      input: "cond_1/map_2/TensorArrayStack_1/range:output:0"
      input: "cond_1/map_2/while/Exit_3:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_1/map_2/TensorArray_3"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            dim {
              size: 10
            }
          }
        }
      }
    }
    node_def {
      name: "cond_1/transpose_1/a"
      op: "Pack"
      input: "cond_1/map_2/TensorArrayStack/TensorArrayGatherV3:value:0"
      input: "cond_1/map_2/TensorArrayStack_1/TensorArrayGatherV3:value:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "cond_1/transpose_1/perm"
      op: "Const"
      input: "^cond_1/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\002\000\000\000\001\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_1/transpose_1"
      op: "Transpose"
      input: "cond_1/transpose_1/a:output:0"
      input: "cond_1/transpose_1/perm:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/Reshape_2/shape"
      op: "Const"
      input: "^cond_1/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\004\001\000\000\002\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_1/Reshape_2"
      op: "Reshape"
      input: "cond_1/transpose_1:y:0"
      input: "cond_1/Reshape_2/shape:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_1/SparseTensor_1/values"
      op: "Const"
      input: "^cond_1/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 260
              }
            }
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
          }
        }
      }
    }
    node_def {
      name: "cond_1/SparseTensor_1/dense_shape"
      op: "Const"
      input: "^cond_1/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\032\000\000\000\000\000\000\000\270\013\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_1/SparseReorder"
      op: "SparseReorder"
      input: "cond_1/Reshape_2:output:0"
      input: "cond_1/SparseTensor_1/values:output:0"
      input: "cond_1/SparseTensor_1/dense_shape:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
    }
    node_def {
      name: "cond_1/SparseTensor_2/dense_shape"
      op: "Const"
      input: "^cond_1/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\032\000\000\000\000\000\000\000\270\013\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_1/SparseToDense_1/default_value"
      op: "Const"
      input: "^cond_1/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "0"
          }
        }
      }
    }
    node_def {
      name: "cond_1/SparseToDense_1"
      op: "SparseToDense"
      input: "cond_1/SparseReorder:output_indices:0"
      input: "cond_1/SparseTensor_2/dense_shape:output:0"
      input: "cond_1/SparseReorder:output_values:0"
      input: "cond_1/SparseToDense_1/default_value:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "cond_1/Merge"
      op: "Merge"
      input: "cond_1/SparseToDense_1:dense:0"
      input: "cond_1/SparseToDense:dense:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
    }
    node_def {
      name: "Const_2"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: ":"
          }
        }
      }
    }
    node_def {
      name: "StringSplit_2"
      op: "StringSplit"
      input: "DecodeCSV:output:2"
      input: "Const_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "skip_empty"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "Equal_2/x"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "d1"
          }
        }
      }
    }
    node_def {
      name: "Equal_2/y"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "w1"
          }
        }
      }
    }
    node_def {
      name: "Equal_2"
      op: "Equal"
      input: "Equal_2/x:output:0"
      input: "Equal_2/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
    }
    node_def {
      name: "cond_2/Switch"
      op: "Switch"
      input: "Equal_2:z:0"
      input: "Equal_2:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
    }
    node_def {
      name: "cond_2/switch_t"
      op: "Identity"
      input: "cond_2/Switch:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
    }
    node_def {
      name: "cond_2/switch_f"
      op: "Identity"
      input: "cond_2/Switch:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
    }
    node_def {
      name: "cond_2/pred_id"
      op: "Identity"
      input: "Equal_2:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
    }
    node_def {
      name: "cond_2/StringToNumber"
      op: "StringToNumber"
      input: "cond_2/StringToNumber/Switch:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "out_type"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_2/StringToNumber/Switch"
      op: "Switch"
      input: "StringSplit_2:values:0"
      input: "cond_2/pred_id:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@StringSplit_2"
          }
        }
      }
    }
    node_def {
      name: "cond_2/Reshape/shape"
      op: "Const"
      input: "^cond_2/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\032\000\000\000\002\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_2/Reshape"
      op: "Reshape"
      input: "cond_2/StringToNumber:output:0"
      input: "cond_2/Reshape/shape:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map/elem"
      op: "Const"
      input: "^cond_2/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 26
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\021\000\000\000\000\000\000\000\022\000\000\000\000\000\000\000\023\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\025\000\000\000\000\000\000\000\026\000\000\000\000\000\000\000\027\000\000\000\000\000\000\000\030\000\000\000\000\000\000\000\031\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_2/map/TensorArray/size"
      op: "Const"
      input: "^cond_2/switch_t"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_2/map/TensorArray"
      op: "TensorArrayV3"
      input: "cond_2/map/TensorArray/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_2/map/TensorArray_1/size"
      op: "Const"
      input: "^cond_2/switch_t"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_2/map/TensorArray_1"
      op: "TensorArrayV3"
      input: "cond_2/map/TensorArray_1/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_2/map/TensorArrayUnstack/Shape"
      op: "Const"
      input: "^cond_2/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_2/map/TensorArrayUnstack/strided_slice/stack"
      op: "Const"
      input: "^cond_2/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_2/map/TensorArrayUnstack/strided_slice/stack_1"
      op: "Const"
      input: "^cond_2/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_2/map/TensorArrayUnstack/strided_slice/stack_2"
      op: "Const"
      input: "^cond_2/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_2/map/TensorArrayUnstack/strided_slice"
      op: "StridedSlice"
      input: "cond_2/map/TensorArrayUnstack/Shape:output:0"
      input: "cond_2/map/TensorArrayUnstack/strided_slice/stack:output:0"
      input: "cond_2/map/TensorArrayUnstack/strided_slice/stack_1:output:0"
      input: "cond_2/map/TensorArrayUnstack/strided_slice/stack_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "cond_2/map/TensorArrayUnstack/range/start"
      op: "Const"
      input: "^cond_2/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_2/map/TensorArrayUnstack/range/delta"
      op: "Const"
      input: "^cond_2/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_2/map/TensorArrayUnstack/range"
      op: "Range"
      input: "cond_2/map/TensorArrayUnstack/range/start:output:0"
      input: "cond_2/map/TensorArrayUnstack/strided_slice:output:0"
      input: "cond_2/map/TensorArrayUnstack/range/delta:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
      op: "TensorArrayScatterV3"
      input: "cond_2/map/TensorArray:handle:0"
      input: "cond_2/map/TensorArrayUnstack/range:output:0"
      input: "cond_2/map/elem:output:0"
      input: "cond_2/map/TensorArray:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map/elem"
          }
        }
      }
    }
    node_def {
      name: "cond_2/map/TensorArrayUnstack_1/Shape"
      op: "Const"
      input: "^cond_2/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\032\000\000\000\002\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_2/map/TensorArrayUnstack_1/strided_slice/stack"
      op: "Const"
      input: "^cond_2/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_2/map/TensorArrayUnstack_1/strided_slice/stack_1"
      op: "Const"
      input: "^cond_2/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_2/map/TensorArrayUnstack_1/strided_slice/stack_2"
      op: "Const"
      input: "^cond_2/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_2/map/TensorArrayUnstack_1/strided_slice"
      op: "StridedSlice"
      input: "cond_2/map/TensorArrayUnstack_1/Shape:output:0"
      input: "cond_2/map/TensorArrayUnstack_1/strided_slice/stack:output:0"
      input: "cond_2/map/TensorArrayUnstack_1/strided_slice/stack_1:output:0"
      input: "cond_2/map/TensorArrayUnstack_1/strided_slice/stack_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "cond_2/map/TensorArrayUnstack_1/range/start"
      op: "Const"
      input: "^cond_2/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_2/map/TensorArrayUnstack_1/range/delta"
      op: "Const"
      input: "^cond_2/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_2/map/TensorArrayUnstack_1/range"
      op: "Range"
      input: "cond_2/map/TensorArrayUnstack_1/range/start:output:0"
      input: "cond_2/map/TensorArrayUnstack_1/strided_slice:output:0"
      input: "cond_2/map/TensorArrayUnstack_1/range/delta:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
      op: "TensorArrayScatterV3"
      input: "cond_2/map/TensorArray_1:handle:0"
      input: "cond_2/map/TensorArrayUnstack_1/range:output:0"
      input: "cond_2/Reshape:output:0"
      input: "cond_2/map/TensorArray_1:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/Reshape"
          }
        }
      }
    }
    node_def {
      name: "cond_2/map/Const"
      op: "Const"
      input: "^cond_2/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_2/map/TensorArray_2/size"
      op: "Const"
      input: "^cond_2/switch_t"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_2/map/TensorArray_2"
      op: "TensorArrayV3"
      input: "cond_2/map/TensorArray_2/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_2/map/TensorArray_3/size"
      op: "Const"
      input: "^cond_2/switch_t"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_2/map/TensorArray_3"
      op: "TensorArrayV3"
      input: "cond_2/map/TensorArray_3/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_2/map/while/maximum_iterations"
      op: "Const"
      input: "^cond_2/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_2/map/while/iteration_counter"
      op: "Const"
      input: "^cond_2/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_2/map/while/Enter"
      op: "Enter"
      input: "cond_2/map/while/iteration_counter:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_2/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_2/map/while/Enter_1"
      op: "Enter"
      input: "cond_2/map/Const:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_2/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_2/map/while/Enter_2"
      op: "Enter"
      input: "cond_2/map/TensorArray_2:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_2/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_2/map/while/Enter_3"
      op: "Enter"
      input: "cond_2/map/TensorArray_3:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_2/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_2/map/while/Merge"
      op: "Merge"
      input: "cond_2/map/while/Enter:output:0"
      input: "cond_2/map/while/NextIteration:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map/while/Merge_1"
      op: "Merge"
      input: "cond_2/map/while/Enter_1:output:0"
      input: "cond_2/map/while/NextIteration_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map/while/Merge_2"
      op: "Merge"
      input: "cond_2/map/while/Enter_2:output:0"
      input: "cond_2/map/while/NextIteration_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_2/map/while/Merge_3"
      op: "Merge"
      input: "cond_2/map/while/Enter_3:output:0"
      input: "cond_2/map/while/NextIteration_3:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_2/map/while/Less"
      op: "Less"
      input: "cond_2/map/while/Merge:output:0"
      input: "cond_2/map/while/Less/Enter:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map/while/Less/Enter"
      op: "Enter"
      input: "cond_2/map/while/maximum_iterations:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_2/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_2/map/while/Less_1/y"
      op: "Const"
      input: "^cond_2/map/while/Merge"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_2/map/while/Less_1"
      op: "Less"
      input: "cond_2/map/while/Merge_1:output:0"
      input: "cond_2/map/while/Less_1/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map/while/LogicalAnd"
      op: "LogicalAnd"
      input: "cond_2/map/while/Less:z:0"
      input: "cond_2/map/while/Less_1:z:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "cond_2/map/while/LoopCond"
      op: "LoopCond"
      input: "cond_2/map/while/LogicalAnd:z:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "cond_2/map/while/Switch"
      op: "Switch"
      input: "cond_2/map/while/Merge:output:0"
      input: "cond_2/map/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map/while/Merge"
          }
        }
      }
    }
    node_def {
      name: "cond_2/map/while/Switch_1"
      op: "Switch"
      input: "cond_2/map/while/Merge_1:output:0"
      input: "cond_2/map/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map/while/Merge_1"
          }
        }
      }
    }
    node_def {
      name: "cond_2/map/while/Switch_2"
      op: "Switch"
      input: "cond_2/map/while/Merge_2:output:0"
      input: "cond_2/map/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map/while/Merge_2"
          }
        }
      }
    }
    node_def {
      name: "cond_2/map/while/Switch_3"
      op: "Switch"
      input: "cond_2/map/while/Merge_3:output:0"
      input: "cond_2/map/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map/while/Merge_3"
          }
        }
      }
    }
    node_def {
      name: "cond_2/map/while/Identity"
      op: "Identity"
      input: "cond_2/map/while/Switch:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map/while/Identity_1"
      op: "Identity"
      input: "cond_2/map/while/Switch_1:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map/while/Identity_2"
      op: "Identity"
      input: "cond_2/map/while/Switch_2:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_2/map/while/Identity_3"
      op: "Identity"
      input: "cond_2/map/while/Switch_3:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_2/map/while/add/y"
      op: "Const"
      input: "^cond_2/map/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_2/map/while/add"
      op: "Add"
      input: "cond_2/map/while/Identity:output:0"
      input: "cond_2/map/while/add/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map/while/TensorArrayReadV3"
      op: "TensorArrayReadV3"
      input: "cond_2/map/while/TensorArrayReadV3/Enter:output:0"
      input: "cond_2/map/while/Identity_1:output:0"
      input: "cond_2/map/while/TensorArrayReadV3/Enter_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
    }
    node_def {
      name: "cond_2/map/while/TensorArrayReadV3/Enter"
      op: "Enter"
      input: "cond_2/map/TensorArray:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_2/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_2/map/while/TensorArrayReadV3/Enter_1"
      op: "Enter"
      input: "cond_2/map/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_2/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_2/map/while/TensorArrayReadV3_1"
      op: "TensorArrayReadV3"
      input: "cond_2/map/while/TensorArrayReadV3_1/Enter:output:0"
      input: "cond_2/map/while/Identity_1:output:0"
      input: "cond_2/map/while/TensorArrayReadV3_1/Enter_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_2/map/while/TensorArrayReadV3_1/Enter"
      op: "Enter"
      input: "cond_2/map/TensorArray_1:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_2/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_2/map/while/TensorArrayReadV3_1/Enter_1"
      op: "Enter"
      input: "cond_2/map/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_2/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_2/map/while/strided_slice/stack"
      op: "Const"
      input: "^cond_2/map/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_2/map/while/strided_slice/stack_1"
      op: "Const"
      input: "^cond_2/map/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_2/map/while/strided_slice/stack_2"
      op: "Const"
      input: "^cond_2/map/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_2/map/while/strided_slice"
      op: "StridedSlice"
      input: "cond_2/map/while/TensorArrayReadV3_1:value:0"
      input: "cond_2/map/while/strided_slice/stack:output:0"
      input: "cond_2/map/while/strided_slice/stack_1:output:0"
      input: "cond_2/map/while/strided_slice/stack_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "cond_2/map/while/ToInt64"
      op: "Cast"
      input: "cond_2/map/while/strided_slice:output:0"
      device: "/device:CPU:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "cond_2/map/while/TensorArrayWrite/TensorArrayWriteV3"
      op: "TensorArrayWriteV3"
      input: "cond_2/map/while/TensorArrayWrite/TensorArrayWriteV3/Enter:output:0"
      input: "cond_2/map/while/Identity_1:output:0"
      input: "cond_2/map/while/TensorArrayReadV3:value:0"
      input: "cond_2/map/while/Identity_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map/while/TensorArrayReadV3"
          }
        }
      }
    }
    node_def {
      name: "cond_2/map/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
      op: "Enter"
      input: "cond_2/map/TensorArray_2:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map/while/TensorArrayReadV3"
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_2/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_2/map/while/TensorArrayWrite_1/TensorArrayWriteV3"
      op: "TensorArrayWriteV3"
      input: "cond_2/map/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter:output:0"
      input: "cond_2/map/while/Identity_1:output:0"
      input: "cond_2/map/while/ToInt64:y:0"
      input: "cond_2/map/while/Identity_3:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map/while/ToInt64"
          }
        }
      }
    }
    node_def {
      name: "cond_2/map/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
      op: "Enter"
      input: "cond_2/map/TensorArray_3:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map/while/ToInt64"
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_2/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_2/map/while/add_1/y"
      op: "Const"
      input: "^cond_2/map/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_2/map/while/add_1"
      op: "Add"
      input: "cond_2/map/while/Identity_1:output:0"
      input: "cond_2/map/while/add_1/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map/while/NextIteration"
      op: "NextIteration"
      input: "cond_2/map/while/add:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map/while/NextIteration_1"
      op: "NextIteration"
      input: "cond_2/map/while/add_1:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map/while/NextIteration_2"
      op: "NextIteration"
      input: "cond_2/map/while/TensorArrayWrite/TensorArrayWriteV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_2/map/while/NextIteration_3"
      op: "NextIteration"
      input: "cond_2/map/while/TensorArrayWrite_1/TensorArrayWriteV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_2/map/while/Exit"
      op: "Exit"
      input: "cond_2/map/while/Switch:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map/while/Exit_1"
      op: "Exit"
      input: "cond_2/map/while/Switch_1:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map/while/Exit_2"
      op: "Exit"
      input: "cond_2/map/while/Switch_2:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_2/map/while/Exit_3"
      op: "Exit"
      input: "cond_2/map/while/Switch_3:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_2/map/TensorArrayStack/TensorArraySizeV3"
      op: "TensorArraySizeV3"
      input: "cond_2/map/TensorArray_2:handle:0"
      input: "cond_2/map/while/Exit_2:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map/TensorArray_2"
          }
        }
      }
    }
    node_def {
      name: "cond_2/map/TensorArrayStack/range/start"
      op: "Const"
      input: "^cond_2/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_2/map/TensorArrayStack/range/delta"
      op: "Const"
      input: "^cond_2/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_2/map/TensorArrayStack/range"
      op: "Range"
      input: "cond_2/map/TensorArrayStack/range/start:output:0"
      input: "cond_2/map/TensorArrayStack/TensorArraySizeV3:size:0"
      input: "cond_2/map/TensorArrayStack/range/delta:output:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map/TensorArray_2"
          }
        }
      }
    }
    node_def {
      name: "cond_2/map/TensorArrayStack/TensorArrayGatherV3"
      op: "TensorArrayGatherV3"
      input: "cond_2/map/TensorArray_2:handle:0"
      input: "cond_2/map/TensorArrayStack/range:output:0"
      input: "cond_2/map/while/Exit_2:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
          }
        }
      }
    }
    node_def {
      name: "cond_2/map/TensorArrayStack_1/TensorArraySizeV3"
      op: "TensorArraySizeV3"
      input: "cond_2/map/TensorArray_3:handle:0"
      input: "cond_2/map/while/Exit_3:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map/TensorArray_3"
          }
        }
      }
    }
    node_def {
      name: "cond_2/map/TensorArrayStack_1/range/start"
      op: "Const"
      input: "^cond_2/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map/TensorArray_3"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_2/map/TensorArrayStack_1/range/delta"
      op: "Const"
      input: "^cond_2/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map/TensorArray_3"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_2/map/TensorArrayStack_1/range"
      op: "Range"
      input: "cond_2/map/TensorArrayStack_1/range/start:output:0"
      input: "cond_2/map/TensorArrayStack_1/TensorArraySizeV3:size:0"
      input: "cond_2/map/TensorArrayStack_1/range/delta:output:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map/TensorArray_3"
          }
        }
      }
    }
    node_def {
      name: "cond_2/map/TensorArrayStack_1/TensorArrayGatherV3"
      op: "TensorArrayGatherV3"
      input: "cond_2/map/TensorArray_3:handle:0"
      input: "cond_2/map/TensorArrayStack_1/range:output:0"
      input: "cond_2/map/while/Exit_3:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map/TensorArray_3"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
          }
        }
      }
    }
    node_def {
      name: "cond_2/transpose/a"
      op: "Pack"
      input: "cond_2/map/TensorArrayStack/TensorArrayGatherV3:value:0"
      input: "cond_2/map/TensorArrayStack_1/TensorArrayGatherV3:value:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "cond_2/transpose/perm"
      op: "Const"
      input: "^cond_2/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_2/transpose"
      op: "Transpose"
      input: "cond_2/transpose/a:output:0"
      input: "cond_2/transpose/perm:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/AsString"
      op: "AsString"
      input: "cond_2/Reshape:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "fill"
        value {
          s: ""
        }
      }
      attr {
        key: "precision"
        value {
          i: -1
        }
      }
      attr {
        key: "scientific"
        value {
          b: false
        }
      }
      attr {
        key: "shortest"
        value {
          b: false
        }
      }
      attr {
        key: "width"
        value {
          i: -1
        }
      }
    }
    node_def {
      name: "cond_2/map_1/TensorArray/size"
      op: "Const"
      input: "^cond_2/switch_t"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_1/TensorArray"
      op: "TensorArrayV3"
      input: "cond_2/map_1/TensorArray/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_2/map_1/TensorArrayUnstack/Shape"
      op: "Const"
      input: "^cond_2/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\032\000\000\000\002\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_1/TensorArrayUnstack/strided_slice/stack"
      op: "Const"
      input: "^cond_2/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_1/TensorArrayUnstack/strided_slice/stack_1"
      op: "Const"
      input: "^cond_2/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_1/TensorArrayUnstack/strided_slice/stack_2"
      op: "Const"
      input: "^cond_2/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_1/TensorArrayUnstack/strided_slice"
      op: "StridedSlice"
      input: "cond_2/map_1/TensorArrayUnstack/Shape:output:0"
      input: "cond_2/map_1/TensorArrayUnstack/strided_slice/stack:output:0"
      input: "cond_2/map_1/TensorArrayUnstack/strided_slice/stack_1:output:0"
      input: "cond_2/map_1/TensorArrayUnstack/strided_slice/stack_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "cond_2/map_1/TensorArrayUnstack/range/start"
      op: "Const"
      input: "^cond_2/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_1/TensorArrayUnstack/range/delta"
      op: "Const"
      input: "^cond_2/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_1/TensorArrayUnstack/range"
      op: "Range"
      input: "cond_2/map_1/TensorArrayUnstack/range/start:output:0"
      input: "cond_2/map_1/TensorArrayUnstack/strided_slice:output:0"
      input: "cond_2/map_1/TensorArrayUnstack/range/delta:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
      op: "TensorArrayScatterV3"
      input: "cond_2/map_1/TensorArray:handle:0"
      input: "cond_2/map_1/TensorArrayUnstack/range:output:0"
      input: "cond_2/AsString:output:0"
      input: "cond_2/map_1/TensorArray:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/AsString"
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_1/Const"
      op: "Const"
      input: "^cond_2/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_1/TensorArray_1/size"
      op: "Const"
      input: "^cond_2/switch_t"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_1/TensorArray_1"
      op: "TensorArrayV3"
      input: "cond_2/map_1/TensorArray_1/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_2/map_1/while/maximum_iterations"
      op: "Const"
      input: "^cond_2/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_1/while/iteration_counter"
      op: "Const"
      input: "^cond_2/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_1/while/Enter"
      op: "Enter"
      input: "cond_2/map_1/while/iteration_counter:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_2/map_1/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_2/map_1/while/Enter_1"
      op: "Enter"
      input: "cond_2/map_1/Const:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_2/map_1/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_2/map_1/while/Enter_2"
      op: "Enter"
      input: "cond_2/map_1/TensorArray_1:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_2/map_1/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_2/map_1/while/Merge"
      op: "Merge"
      input: "cond_2/map_1/while/Enter:output:0"
      input: "cond_2/map_1/while/NextIteration:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map_1/while/Merge_1"
      op: "Merge"
      input: "cond_2/map_1/while/Enter_1:output:0"
      input: "cond_2/map_1/while/NextIteration_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map_1/while/Merge_2"
      op: "Merge"
      input: "cond_2/map_1/while/Enter_2:output:0"
      input: "cond_2/map_1/while/NextIteration_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_2/map_1/while/Less"
      op: "Less"
      input: "cond_2/map_1/while/Merge:output:0"
      input: "cond_2/map_1/while/Less/Enter:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map_1/while/Less/Enter"
      op: "Enter"
      input: "cond_2/map_1/while/maximum_iterations:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_2/map_1/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_2/map_1/while/Less_1/y"
      op: "Const"
      input: "^cond_2/map_1/while/Merge"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_1/while/Less_1"
      op: "Less"
      input: "cond_2/map_1/while/Merge_1:output:0"
      input: "cond_2/map_1/while/Less_1/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map_1/while/LogicalAnd"
      op: "LogicalAnd"
      input: "cond_2/map_1/while/Less:z:0"
      input: "cond_2/map_1/while/Less_1:z:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "cond_2/map_1/while/LoopCond"
      op: "LoopCond"
      input: "cond_2/map_1/while/LogicalAnd:z:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "cond_2/map_1/while/Switch"
      op: "Switch"
      input: "cond_2/map_1/while/Merge:output:0"
      input: "cond_2/map_1/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map_1/while/Merge"
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_1/while/Switch_1"
      op: "Switch"
      input: "cond_2/map_1/while/Merge_1:output:0"
      input: "cond_2/map_1/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map_1/while/Merge_1"
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_1/while/Switch_2"
      op: "Switch"
      input: "cond_2/map_1/while/Merge_2:output:0"
      input: "cond_2/map_1/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map_1/while/Merge_2"
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_1/while/Identity"
      op: "Identity"
      input: "cond_2/map_1/while/Switch:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map_1/while/Identity_1"
      op: "Identity"
      input: "cond_2/map_1/while/Switch_1:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map_1/while/Identity_2"
      op: "Identity"
      input: "cond_2/map_1/while/Switch_2:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_2/map_1/while/add/y"
      op: "Const"
      input: "^cond_2/map_1/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_1/while/add"
      op: "Add"
      input: "cond_2/map_1/while/Identity:output:0"
      input: "cond_2/map_1/while/add/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map_1/while/TensorArrayReadV3"
      op: "TensorArrayReadV3"
      input: "cond_2/map_1/while/TensorArrayReadV3/Enter:output:0"
      input: "cond_2/map_1/while/Identity_1:output:0"
      input: "cond_2/map_1/while/TensorArrayReadV3/Enter_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
    }
    node_def {
      name: "cond_2/map_1/while/TensorArrayReadV3/Enter"
      op: "Enter"
      input: "cond_2/map_1/TensorArray:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_2/map_1/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_2/map_1/while/TensorArrayReadV3/Enter_1"
      op: "Enter"
      input: "cond_2/map_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_2/map_1/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_2/map_1/while/strided_slice/stack"
      op: "Const"
      input: "^cond_2/map_1/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_1/while/strided_slice/stack_1"
      op: "Const"
      input: "^cond_2/map_1/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_1/while/strided_slice/stack_2"
      op: "Const"
      input: "^cond_2/map_1/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_1/while/strided_slice"
      op: "StridedSlice"
      input: "cond_2/map_1/while/TensorArrayReadV3:value:0"
      input: "cond_2/map_1/while/strided_slice/stack:output:0"
      input: "cond_2/map_1/while/strided_slice/stack_1:output:0"
      input: "cond_2/map_1/while/strided_slice/stack_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "cond_2/map_1/while/TensorArrayWrite/TensorArrayWriteV3"
      op: "TensorArrayWriteV3"
      input: "cond_2/map_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter:output:0"
      input: "cond_2/map_1/while/Identity_1:output:0"
      input: "cond_2/map_1/while/strided_slice:output:0"
      input: "cond_2/map_1/while/Identity_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map_1/while/strided_slice"
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
      op: "Enter"
      input: "cond_2/map_1/TensorArray_1:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map_1/while/strided_slice"
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_2/map_1/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_2/map_1/while/add_1/y"
      op: "Const"
      input: "^cond_2/map_1/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_1/while/add_1"
      op: "Add"
      input: "cond_2/map_1/while/Identity_1:output:0"
      input: "cond_2/map_1/while/add_1/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map_1/while/NextIteration"
      op: "NextIteration"
      input: "cond_2/map_1/while/add:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map_1/while/NextIteration_1"
      op: "NextIteration"
      input: "cond_2/map_1/while/add_1:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map_1/while/NextIteration_2"
      op: "NextIteration"
      input: "cond_2/map_1/while/TensorArrayWrite/TensorArrayWriteV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_2/map_1/while/Exit"
      op: "Exit"
      input: "cond_2/map_1/while/Switch:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map_1/while/Exit_1"
      op: "Exit"
      input: "cond_2/map_1/while/Switch_1:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map_1/while/Exit_2"
      op: "Exit"
      input: "cond_2/map_1/while/Switch_2:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_2/map_1/TensorArrayStack/TensorArraySizeV3"
      op: "TensorArraySizeV3"
      input: "cond_2/map_1/TensorArray_1:handle:0"
      input: "cond_2/map_1/while/Exit_2:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map_1/TensorArray_1"
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_1/TensorArrayStack/range/start"
      op: "Const"
      input: "^cond_2/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map_1/TensorArray_1"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_1/TensorArrayStack/range/delta"
      op: "Const"
      input: "^cond_2/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map_1/TensorArray_1"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_1/TensorArrayStack/range"
      op: "Range"
      input: "cond_2/map_1/TensorArrayStack/range/start:output:0"
      input: "cond_2/map_1/TensorArrayStack/TensorArraySizeV3:size:0"
      input: "cond_2/map_1/TensorArrayStack/range/delta:output:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map_1/TensorArray_1"
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_1/TensorArrayStack/TensorArrayGatherV3"
      op: "TensorArrayGatherV3"
      input: "cond_2/map_1/TensorArray_1:handle:0"
      input: "cond_2/map_1/TensorArrayStack/range:output:0"
      input: "cond_2/map_1/while/Exit_2:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map_1/TensorArray_1"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
          }
        }
      }
    }
    node_def {
      name: "cond_2/SparseTensor/dense_shape"
      op: "Const"
      input: "^cond_2/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\032\000\000\000\000\000\000\000d\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_2/SparseToDense/default_value"
      op: "Const"
      input: "^cond_2/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "0"
          }
        }
      }
    }
    node_def {
      name: "cond_2/SparseToDense"
      op: "SparseToDense"
      input: "cond_2/transpose:y:0"
      input: "cond_2/SparseTensor/dense_shape:output:0"
      input: "cond_2/map_1/TensorArrayStack/TensorArrayGatherV3:value:0"
      input: "cond_2/SparseToDense/default_value:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "cond_2/StringToNumber_1"
      op: "StringToNumber"
      input: "cond_2/StringToNumber_1/Switch:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "out_type"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_2/StringToNumber_1/Switch"
      op: "Switch"
      input: "StringSplit_2:values:0"
      input: "cond_2/pred_id:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@StringSplit_2"
          }
        }
      }
    }
    node_def {
      name: "cond_2/Cast"
      op: "Cast"
      input: "cond_2/StringToNumber_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "cond_2/Reshape_1/shape"
      op: "Const"
      input: "^cond_2/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\032\000\000\000\n\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_2/Reshape_1"
      op: "Reshape"
      input: "cond_2/Cast:y:0"
      input: "cond_2/Reshape_1/shape:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map_2/elem"
      op: "Const"
      input: "^cond_2/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 26
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\021\000\000\000\000\000\000\000\022\000\000\000\000\000\000\000\023\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\025\000\000\000\000\000\000\000\026\000\000\000\000\000\000\000\027\000\000\000\000\000\000\000\030\000\000\000\000\000\000\000\031\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/TensorArray/size"
      op: "Const"
      input: "^cond_2/switch_f"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/TensorArray"
      op: "TensorArrayV3"
      input: "cond_2/map_2/TensorArray/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_2/map_2/TensorArray_1/size"
      op: "Const"
      input: "^cond_2/switch_f"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/TensorArray_1"
      op: "TensorArrayV3"
      input: "cond_2/map_2/TensorArray_1/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_2/map_2/TensorArrayUnstack/Shape"
      op: "Const"
      input: "^cond_2/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/TensorArrayUnstack/strided_slice/stack"
      op: "Const"
      input: "^cond_2/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/TensorArrayUnstack/strided_slice/stack_1"
      op: "Const"
      input: "^cond_2/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/TensorArrayUnstack/strided_slice/stack_2"
      op: "Const"
      input: "^cond_2/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/TensorArrayUnstack/strided_slice"
      op: "StridedSlice"
      input: "cond_2/map_2/TensorArrayUnstack/Shape:output:0"
      input: "cond_2/map_2/TensorArrayUnstack/strided_slice/stack:output:0"
      input: "cond_2/map_2/TensorArrayUnstack/strided_slice/stack_1:output:0"
      input: "cond_2/map_2/TensorArrayUnstack/strided_slice/stack_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "cond_2/map_2/TensorArrayUnstack/range/start"
      op: "Const"
      input: "^cond_2/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/TensorArrayUnstack/range/delta"
      op: "Const"
      input: "^cond_2/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/TensorArrayUnstack/range"
      op: "Range"
      input: "cond_2/map_2/TensorArrayUnstack/range/start:output:0"
      input: "cond_2/map_2/TensorArrayUnstack/strided_slice:output:0"
      input: "cond_2/map_2/TensorArrayUnstack/range/delta:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
      op: "TensorArrayScatterV3"
      input: "cond_2/map_2/TensorArray:handle:0"
      input: "cond_2/map_2/TensorArrayUnstack/range:output:0"
      input: "cond_2/map_2/elem:output:0"
      input: "cond_2/map_2/TensorArray:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map_2/elem"
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/TensorArrayUnstack_1/Shape"
      op: "Const"
      input: "^cond_2/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\032\000\000\000\n\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/TensorArrayUnstack_1/strided_slice/stack"
      op: "Const"
      input: "^cond_2/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/TensorArrayUnstack_1/strided_slice/stack_1"
      op: "Const"
      input: "^cond_2/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/TensorArrayUnstack_1/strided_slice/stack_2"
      op: "Const"
      input: "^cond_2/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/TensorArrayUnstack_1/strided_slice"
      op: "StridedSlice"
      input: "cond_2/map_2/TensorArrayUnstack_1/Shape:output:0"
      input: "cond_2/map_2/TensorArrayUnstack_1/strided_slice/stack:output:0"
      input: "cond_2/map_2/TensorArrayUnstack_1/strided_slice/stack_1:output:0"
      input: "cond_2/map_2/TensorArrayUnstack_1/strided_slice/stack_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "cond_2/map_2/TensorArrayUnstack_1/range/start"
      op: "Const"
      input: "^cond_2/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/TensorArrayUnstack_1/range/delta"
      op: "Const"
      input: "^cond_2/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/TensorArrayUnstack_1/range"
      op: "Range"
      input: "cond_2/map_2/TensorArrayUnstack_1/range/start:output:0"
      input: "cond_2/map_2/TensorArrayUnstack_1/strided_slice:output:0"
      input: "cond_2/map_2/TensorArrayUnstack_1/range/delta:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map_2/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
      op: "TensorArrayScatterV3"
      input: "cond_2/map_2/TensorArray_1:handle:0"
      input: "cond_2/map_2/TensorArrayUnstack_1/range:output:0"
      input: "cond_2/Reshape_1:output:0"
      input: "cond_2/map_2/TensorArray_1:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/Reshape_1"
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/Const"
      op: "Const"
      input: "^cond_2/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/TensorArray_2/size"
      op: "Const"
      input: "^cond_2/switch_f"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/TensorArray_2"
      op: "TensorArrayV3"
      input: "cond_2/map_2/TensorArray_2/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_2/map_2/TensorArray_3/size"
      op: "Const"
      input: "^cond_2/switch_f"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/TensorArray_3"
      op: "TensorArrayV3"
      input: "cond_2/map_2/TensorArray_3/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/maximum_iterations"
      op: "Const"
      input: "^cond_2/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/iteration_counter"
      op: "Const"
      input: "^cond_2/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/Enter"
      op: "Enter"
      input: "cond_2/map_2/while/iteration_counter:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_2/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/Enter_1"
      op: "Enter"
      input: "cond_2/map_2/Const:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_2/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/Enter_2"
      op: "Enter"
      input: "cond_2/map_2/TensorArray_2:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_2/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/Enter_3"
      op: "Enter"
      input: "cond_2/map_2/TensorArray_3:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_2/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/Merge"
      op: "Merge"
      input: "cond_2/map_2/while/Enter:output:0"
      input: "cond_2/map_2/while/NextIteration:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/Merge_1"
      op: "Merge"
      input: "cond_2/map_2/while/Enter_1:output:0"
      input: "cond_2/map_2/while/NextIteration_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/Merge_2"
      op: "Merge"
      input: "cond_2/map_2/while/Enter_2:output:0"
      input: "cond_2/map_2/while/NextIteration_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/Merge_3"
      op: "Merge"
      input: "cond_2/map_2/while/Enter_3:output:0"
      input: "cond_2/map_2/while/NextIteration_3:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/Less"
      op: "Less"
      input: "cond_2/map_2/while/Merge:output:0"
      input: "cond_2/map_2/while/Less/Enter:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/Less/Enter"
      op: "Enter"
      input: "cond_2/map_2/while/maximum_iterations:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_2/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/Less_1/y"
      op: "Const"
      input: "^cond_2/map_2/while/Merge"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/Less_1"
      op: "Less"
      input: "cond_2/map_2/while/Merge_1:output:0"
      input: "cond_2/map_2/while/Less_1/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/LogicalAnd"
      op: "LogicalAnd"
      input: "cond_2/map_2/while/Less:z:0"
      input: "cond_2/map_2/while/Less_1:z:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "cond_2/map_2/while/LoopCond"
      op: "LoopCond"
      input: "cond_2/map_2/while/LogicalAnd:z:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "cond_2/map_2/while/Switch"
      op: "Switch"
      input: "cond_2/map_2/while/Merge:output:0"
      input: "cond_2/map_2/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map_2/while/Merge"
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/Switch_1"
      op: "Switch"
      input: "cond_2/map_2/while/Merge_1:output:0"
      input: "cond_2/map_2/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map_2/while/Merge_1"
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/Switch_2"
      op: "Switch"
      input: "cond_2/map_2/while/Merge_2:output:0"
      input: "cond_2/map_2/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map_2/while/Merge_2"
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/Switch_3"
      op: "Switch"
      input: "cond_2/map_2/while/Merge_3:output:0"
      input: "cond_2/map_2/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map_2/while/Merge_3"
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/Identity"
      op: "Identity"
      input: "cond_2/map_2/while/Switch:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/Identity_1"
      op: "Identity"
      input: "cond_2/map_2/while/Switch_1:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/Identity_2"
      op: "Identity"
      input: "cond_2/map_2/while/Switch_2:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/Identity_3"
      op: "Identity"
      input: "cond_2/map_2/while/Switch_3:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/add/y"
      op: "Const"
      input: "^cond_2/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/add"
      op: "Add"
      input: "cond_2/map_2/while/Identity:output:0"
      input: "cond_2/map_2/while/add/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/TensorArrayReadV3"
      op: "TensorArrayReadV3"
      input: "cond_2/map_2/while/TensorArrayReadV3/Enter:output:0"
      input: "cond_2/map_2/while/Identity_1:output:0"
      input: "cond_2/map_2/while/TensorArrayReadV3/Enter_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/TensorArrayReadV3/Enter"
      op: "Enter"
      input: "cond_2/map_2/TensorArray:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_2/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/TensorArrayReadV3/Enter_1"
      op: "Enter"
      input: "cond_2/map_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_2/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/TensorArrayReadV3_1"
      op: "TensorArrayReadV3"
      input: "cond_2/map_2/while/TensorArrayReadV3_1/Enter:output:0"
      input: "cond_2/map_2/while/Identity_1:output:0"
      input: "cond_2/map_2/while/TensorArrayReadV3_1/Enter_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/TensorArrayReadV3_1/Enter"
      op: "Enter"
      input: "cond_2/map_2/TensorArray_1:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_2/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/TensorArrayReadV3_1/Enter_1"
      op: "Enter"
      input: "cond_2/map_2/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_2/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/TensorArray/size"
      op: "Const"
      input: "^cond_2/map_2/while/Identity"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 10
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/TensorArray"
      op: "TensorArrayV3"
      input: "cond_2/map_2/while/map/TensorArray/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/TensorArrayUnstack/Shape"
      op: "Const"
      input: "^cond_2/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 10
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/TensorArrayUnstack/strided_slice/stack"
      op: "Const"
      input: "^cond_2/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/TensorArrayUnstack/strided_slice/stack_1"
      op: "Const"
      input: "^cond_2/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/TensorArrayUnstack/strided_slice/stack_2"
      op: "Const"
      input: "^cond_2/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/TensorArrayUnstack/strided_slice"
      op: "StridedSlice"
      input: "cond_2/map_2/while/map/TensorArrayUnstack/Shape:output:0"
      input: "cond_2/map_2/while/map/TensorArrayUnstack/strided_slice/stack:output:0"
      input: "cond_2/map_2/while/map/TensorArrayUnstack/strided_slice/stack_1:output:0"
      input: "cond_2/map_2/while/map/TensorArrayUnstack/strided_slice/stack_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/TensorArrayUnstack/range/start"
      op: "Const"
      input: "^cond_2/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/TensorArrayUnstack/range/delta"
      op: "Const"
      input: "^cond_2/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/TensorArrayUnstack/range"
      op: "Range"
      input: "cond_2/map_2/while/map/TensorArrayUnstack/range/start:output:0"
      input: "cond_2/map_2/while/map/TensorArrayUnstack/strided_slice:output:0"
      input: "cond_2/map_2/while/map/TensorArrayUnstack/range/delta:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
      op: "TensorArrayScatterV3"
      input: "cond_2/map_2/while/map/TensorArray:handle:0"
      input: "cond_2/map_2/while/map/TensorArrayUnstack/range:output:0"
      input: "cond_2/map_2/while/TensorArrayReadV3_1:value:0"
      input: "cond_2/map_2/while/map/TensorArray:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map_2/while/TensorArrayReadV3_1"
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/Const"
      op: "Const"
      input: "^cond_2/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/TensorArray_1/size"
      op: "Const"
      input: "^cond_2/map_2/while/Identity"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 10
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/TensorArray_1"
      op: "TensorArrayV3"
      input: "cond_2/map_2/while/map/TensorArray_1/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/TensorArray_2/size"
      op: "Const"
      input: "^cond_2/map_2/while/Identity"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 10
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/TensorArray_2"
      op: "TensorArrayV3"
      input: "cond_2/map_2/while/map/TensorArray_2/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/while/maximum_iterations"
      op: "Const"
      input: "^cond_2/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 10
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/while/iteration_counter"
      op: "Const"
      input: "^cond_2/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/while/Enter"
      op: "Enter"
      input: "cond_2/map_2/while/map/while/iteration_counter:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_2/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/while/Enter_1"
      op: "Enter"
      input: "cond_2/map_2/while/map/Const:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_2/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/while/Enter_2"
      op: "Enter"
      input: "cond_2/map_2/while/map/TensorArray_1:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_2/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/while/Enter_3"
      op: "Enter"
      input: "cond_2/map_2/while/map/TensorArray_2:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_2/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/while/Merge"
      op: "Merge"
      input: "cond_2/map_2/while/map/while/Enter:output:0"
      input: "cond_2/map_2/while/map/while/NextIteration:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/while/Merge_1"
      op: "Merge"
      input: "cond_2/map_2/while/map/while/Enter_1:output:0"
      input: "cond_2/map_2/while/map/while/NextIteration_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/while/Merge_2"
      op: "Merge"
      input: "cond_2/map_2/while/map/while/Enter_2:output:0"
      input: "cond_2/map_2/while/map/while/NextIteration_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/while/Merge_3"
      op: "Merge"
      input: "cond_2/map_2/while/map/while/Enter_3:output:0"
      input: "cond_2/map_2/while/map/while/NextIteration_3:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/while/Less"
      op: "Less"
      input: "cond_2/map_2/while/map/while/Merge:output:0"
      input: "cond_2/map_2/while/map/while/Less/Enter:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/while/Less/Enter"
      op: "Enter"
      input: "cond_2/map_2/while/map/while/maximum_iterations:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_2/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/while/Less_1/y"
      op: "Const"
      input: "^cond_2/map_2/while/map/while/Merge"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 10
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/while/Less_1"
      op: "Less"
      input: "cond_2/map_2/while/map/while/Merge_1:output:0"
      input: "cond_2/map_2/while/map/while/Less_1/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/while/LogicalAnd"
      op: "LogicalAnd"
      input: "cond_2/map_2/while/map/while/Less:z:0"
      input: "cond_2/map_2/while/map/while/Less_1:z:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "cond_2/map_2/while/map/while/LoopCond"
      op: "LoopCond"
      input: "cond_2/map_2/while/map/while/LogicalAnd:z:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "cond_2/map_2/while/map/while/Switch"
      op: "Switch"
      input: "cond_2/map_2/while/map/while/Merge:output:0"
      input: "cond_2/map_2/while/map/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map_2/while/map/while/Merge"
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/while/Switch_1"
      op: "Switch"
      input: "cond_2/map_2/while/map/while/Merge_1:output:0"
      input: "cond_2/map_2/while/map/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map_2/while/map/while/Merge_1"
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/while/Switch_2"
      op: "Switch"
      input: "cond_2/map_2/while/map/while/Merge_2:output:0"
      input: "cond_2/map_2/while/map/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map_2/while/map/while/Merge_2"
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/while/Switch_3"
      op: "Switch"
      input: "cond_2/map_2/while/map/while/Merge_3:output:0"
      input: "cond_2/map_2/while/map/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map_2/while/map/while/Merge_3"
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/while/Identity"
      op: "Identity"
      input: "cond_2/map_2/while/map/while/Switch:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/while/Identity_1"
      op: "Identity"
      input: "cond_2/map_2/while/map/while/Switch_1:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/while/Identity_2"
      op: "Identity"
      input: "cond_2/map_2/while/map/while/Switch_2:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/while/Identity_3"
      op: "Identity"
      input: "cond_2/map_2/while/map/while/Switch_3:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/while/add/y"
      op: "Const"
      input: "^cond_2/map_2/while/map/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/while/add"
      op: "Add"
      input: "cond_2/map_2/while/map/while/Identity:output:0"
      input: "cond_2/map_2/while/map/while/add/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/while/TensorArrayReadV3"
      op: "TensorArrayReadV3"
      input: "cond_2/map_2/while/map/while/TensorArrayReadV3/Enter:output:0"
      input: "cond_2/map_2/while/map/while/Identity_1:output:0"
      input: "cond_2/map_2/while/map/while/TensorArrayReadV3/Enter_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/while/TensorArrayReadV3/Enter"
      op: "Enter"
      input: "cond_2/map_2/while/map/TensorArray:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_2/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/while/TensorArrayReadV3/Enter_1"
      op: "Enter"
      input: "cond_2/map_2/while/map/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_2/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/while/TensorArrayWrite/TensorArrayWriteV3"
      op: "TensorArrayWriteV3"
      input: "cond_2/map_2/while/map/while/TensorArrayWrite/TensorArrayWriteV3/Enter:output:0"
      input: "cond_2/map_2/while/map/while/Identity_1:output:0"
      input: "cond_2/map_2/while/map/while/TensorArrayWrite/TensorArrayWriteV3/Enter_1:output:0"
      input: "cond_2/map_2/while/map/while/Identity_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map_2/while/TensorArrayReadV3"
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
      op: "Enter"
      input: "cond_2/map_2/while/map/TensorArray_1:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map_2/while/TensorArrayReadV3"
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_2/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/while/TensorArrayWrite/TensorArrayWriteV3/Enter_1"
      op: "Enter"
      input: "cond_2/map_2/while/TensorArrayReadV3:value:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map_2/while/TensorArrayReadV3"
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_2/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/while/TensorArrayWrite_1/TensorArrayWriteV3"
      op: "TensorArrayWriteV3"
      input: "cond_2/map_2/while/map/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter:output:0"
      input: "cond_2/map_2/while/map/while/Identity_1:output:0"
      input: "cond_2/map_2/while/map/while/TensorArrayReadV3:value:0"
      input: "cond_2/map_2/while/map/while/Identity_3:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map_2/while/map/while/TensorArrayReadV3"
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
      op: "Enter"
      input: "cond_2/map_2/while/map/TensorArray_2:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map_2/while/map/while/TensorArrayReadV3"
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_2/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/while/add_1/y"
      op: "Const"
      input: "^cond_2/map_2/while/map/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/while/add_1"
      op: "Add"
      input: "cond_2/map_2/while/map/while/Identity_1:output:0"
      input: "cond_2/map_2/while/map/while/add_1/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/while/NextIteration"
      op: "NextIteration"
      input: "cond_2/map_2/while/map/while/add:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/while/NextIteration_1"
      op: "NextIteration"
      input: "cond_2/map_2/while/map/while/add_1:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/while/NextIteration_2"
      op: "NextIteration"
      input: "cond_2/map_2/while/map/while/TensorArrayWrite/TensorArrayWriteV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/while/NextIteration_3"
      op: "NextIteration"
      input: "cond_2/map_2/while/map/while/TensorArrayWrite_1/TensorArrayWriteV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/while/Exit"
      op: "Exit"
      input: "cond_2/map_2/while/map/while/Switch:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/while/Exit_1"
      op: "Exit"
      input: "cond_2/map_2/while/map/while/Switch_1:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/while/Exit_2"
      op: "Exit"
      input: "cond_2/map_2/while/map/while/Switch_2:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/while/Exit_3"
      op: "Exit"
      input: "cond_2/map_2/while/map/while/Switch_3:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/TensorArrayStack/TensorArraySizeV3"
      op: "TensorArraySizeV3"
      input: "cond_2/map_2/while/map/TensorArray_1:handle:0"
      input: "cond_2/map_2/while/map/while/Exit_2:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map_2/while/map/TensorArray_1"
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/TensorArrayStack/range/start"
      op: "Const"
      input: "^cond_2/map_2/while/Identity"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map_2/while/map/TensorArray_1"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/TensorArrayStack/range/delta"
      op: "Const"
      input: "^cond_2/map_2/while/Identity"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map_2/while/map/TensorArray_1"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/TensorArrayStack/range"
      op: "Range"
      input: "cond_2/map_2/while/map/TensorArrayStack/range/start:output:0"
      input: "cond_2/map_2/while/map/TensorArrayStack/TensorArraySizeV3:size:0"
      input: "cond_2/map_2/while/map/TensorArrayStack/range/delta:output:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map_2/while/map/TensorArray_1"
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/TensorArrayStack/TensorArrayGatherV3"
      op: "TensorArrayGatherV3"
      input: "cond_2/map_2/while/map/TensorArray_1:handle:0"
      input: "cond_2/map_2/while/map/TensorArrayStack/range:output:0"
      input: "cond_2/map_2/while/map/while/Exit_2:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map_2/while/map/TensorArray_1"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/TensorArrayStack_1/TensorArraySizeV3"
      op: "TensorArraySizeV3"
      input: "cond_2/map_2/while/map/TensorArray_2:handle:0"
      input: "cond_2/map_2/while/map/while/Exit_3:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map_2/while/map/TensorArray_2"
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/TensorArrayStack_1/range/start"
      op: "Const"
      input: "^cond_2/map_2/while/Identity"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map_2/while/map/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/TensorArrayStack_1/range/delta"
      op: "Const"
      input: "^cond_2/map_2/while/Identity"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map_2/while/map/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/TensorArrayStack_1/range"
      op: "Range"
      input: "cond_2/map_2/while/map/TensorArrayStack_1/range/start:output:0"
      input: "cond_2/map_2/while/map/TensorArrayStack_1/TensorArraySizeV3:size:0"
      input: "cond_2/map_2/while/map/TensorArrayStack_1/range/delta:output:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map_2/while/map/TensorArray_2"
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/map/TensorArrayStack_1/TensorArrayGatherV3"
      op: "TensorArrayGatherV3"
      input: "cond_2/map_2/while/map/TensorArray_2:handle:0"
      input: "cond_2/map_2/while/map/TensorArrayStack_1/range:output:0"
      input: "cond_2/map_2/while/map/while/Exit_3:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map_2/while/map/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/TensorArrayWrite/TensorArrayWriteV3"
      op: "TensorArrayWriteV3"
      input: "cond_2/map_2/while/TensorArrayWrite/TensorArrayWriteV3/Enter:output:0"
      input: "cond_2/map_2/while/Identity_1:output:0"
      input: "cond_2/map_2/while/map/TensorArrayStack/TensorArrayGatherV3:value:0"
      input: "cond_2/map_2/while/Identity_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map_2/while/map/TensorArray_1"
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
      op: "Enter"
      input: "cond_2/map_2/TensorArray_2:handle:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map_2/while/map/TensorArray_1"
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_2/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/TensorArrayWrite_1/TensorArrayWriteV3"
      op: "TensorArrayWriteV3"
      input: "cond_2/map_2/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter:output:0"
      input: "cond_2/map_2/while/Identity_1:output:0"
      input: "cond_2/map_2/while/map/TensorArrayStack_1/TensorArrayGatherV3:value:0"
      input: "cond_2/map_2/while/Identity_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map_2/while/map/TensorArray_2"
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
      op: "Enter"
      input: "cond_2/map_2/TensorArray_3:handle:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map_2/while/map/TensorArray_2"
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_2/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/add_1/y"
      op: "Const"
      input: "^cond_2/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/add_1"
      op: "Add"
      input: "cond_2/map_2/while/Identity_1:output:0"
      input: "cond_2/map_2/while/add_1/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/NextIteration"
      op: "NextIteration"
      input: "cond_2/map_2/while/add:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/NextIteration_1"
      op: "NextIteration"
      input: "cond_2/map_2/while/add_1:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/NextIteration_2"
      op: "NextIteration"
      input: "cond_2/map_2/while/TensorArrayWrite/TensorArrayWriteV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/NextIteration_3"
      op: "NextIteration"
      input: "cond_2/map_2/while/TensorArrayWrite_1/TensorArrayWriteV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/Exit"
      op: "Exit"
      input: "cond_2/map_2/while/Switch:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/Exit_1"
      op: "Exit"
      input: "cond_2/map_2/while/Switch_1:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/Exit_2"
      op: "Exit"
      input: "cond_2/map_2/while/Switch_2:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_2/map_2/while/Exit_3"
      op: "Exit"
      input: "cond_2/map_2/while/Switch_3:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_2/map_2/TensorArrayStack/TensorArraySizeV3"
      op: "TensorArraySizeV3"
      input: "cond_2/map_2/TensorArray_2:handle:0"
      input: "cond_2/map_2/while/Exit_2:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map_2/TensorArray_2"
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/TensorArrayStack/range/start"
      op: "Const"
      input: "^cond_2/switch_f"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map_2/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/TensorArrayStack/range/delta"
      op: "Const"
      input: "^cond_2/switch_f"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map_2/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/TensorArrayStack/range"
      op: "Range"
      input: "cond_2/map_2/TensorArrayStack/range/start:output:0"
      input: "cond_2/map_2/TensorArrayStack/TensorArraySizeV3:size:0"
      input: "cond_2/map_2/TensorArrayStack/range/delta:output:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map_2/TensorArray_2"
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/TensorArrayStack/TensorArrayGatherV3"
      op: "TensorArrayGatherV3"
      input: "cond_2/map_2/TensorArray_2:handle:0"
      input: "cond_2/map_2/TensorArrayStack/range:output:0"
      input: "cond_2/map_2/while/Exit_2:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map_2/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            dim {
              size: 10
            }
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/TensorArrayStack_1/TensorArraySizeV3"
      op: "TensorArraySizeV3"
      input: "cond_2/map_2/TensorArray_3:handle:0"
      input: "cond_2/map_2/while/Exit_3:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map_2/TensorArray_3"
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/TensorArrayStack_1/range/start"
      op: "Const"
      input: "^cond_2/switch_f"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map_2/TensorArray_3"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/TensorArrayStack_1/range/delta"
      op: "Const"
      input: "^cond_2/switch_f"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map_2/TensorArray_3"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/TensorArrayStack_1/range"
      op: "Range"
      input: "cond_2/map_2/TensorArrayStack_1/range/start:output:0"
      input: "cond_2/map_2/TensorArrayStack_1/TensorArraySizeV3:size:0"
      input: "cond_2/map_2/TensorArrayStack_1/range/delta:output:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map_2/TensorArray_3"
          }
        }
      }
    }
    node_def {
      name: "cond_2/map_2/TensorArrayStack_1/TensorArrayGatherV3"
      op: "TensorArrayGatherV3"
      input: "cond_2/map_2/TensorArray_3:handle:0"
      input: "cond_2/map_2/TensorArrayStack_1/range:output:0"
      input: "cond_2/map_2/while/Exit_3:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_2/map_2/TensorArray_3"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            dim {
              size: 10
            }
          }
        }
      }
    }
    node_def {
      name: "cond_2/transpose_1/a"
      op: "Pack"
      input: "cond_2/map_2/TensorArrayStack/TensorArrayGatherV3:value:0"
      input: "cond_2/map_2/TensorArrayStack_1/TensorArrayGatherV3:value:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "cond_2/transpose_1/perm"
      op: "Const"
      input: "^cond_2/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\002\000\000\000\001\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_2/transpose_1"
      op: "Transpose"
      input: "cond_2/transpose_1/a:output:0"
      input: "cond_2/transpose_1/perm:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/Reshape_2/shape"
      op: "Const"
      input: "^cond_2/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\004\001\000\000\002\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_2/Reshape_2"
      op: "Reshape"
      input: "cond_2/transpose_1:y:0"
      input: "cond_2/Reshape_2/shape:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_2/SparseTensor_1/values"
      op: "Const"
      input: "^cond_2/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 260
              }
            }
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
          }
        }
      }
    }
    node_def {
      name: "cond_2/SparseTensor_1/dense_shape"
      op: "Const"
      input: "^cond_2/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\032\000\000\000\000\000\000\000\270\013\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_2/SparseReorder"
      op: "SparseReorder"
      input: "cond_2/Reshape_2:output:0"
      input: "cond_2/SparseTensor_1/values:output:0"
      input: "cond_2/SparseTensor_1/dense_shape:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
    }
    node_def {
      name: "cond_2/SparseTensor_2/dense_shape"
      op: "Const"
      input: "^cond_2/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\032\000\000\000\000\000\000\000\270\013\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_2/SparseToDense_1/default_value"
      op: "Const"
      input: "^cond_2/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "0"
          }
        }
      }
    }
    node_def {
      name: "cond_2/SparseToDense_1"
      op: "SparseToDense"
      input: "cond_2/SparseReorder:output_indices:0"
      input: "cond_2/SparseTensor_2/dense_shape:output:0"
      input: "cond_2/SparseReorder:output_values:0"
      input: "cond_2/SparseToDense_1/default_value:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "cond_2/Merge"
      op: "Merge"
      input: "cond_2/SparseToDense_1:dense:0"
      input: "cond_2/SparseToDense:dense:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
    }
    node_def {
      name: "Const_3"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: ":"
          }
        }
      }
    }
    node_def {
      name: "StringSplit_3"
      op: "StringSplit"
      input: "DecodeCSV:output:3"
      input: "Const_3:output:0"
      device: "/device:CPU:0"
      attr {
        key: "skip_empty"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "Equal_3/x"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "d2"
          }
        }
      }
    }
    node_def {
      name: "Equal_3/y"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "w1"
          }
        }
      }
    }
    node_def {
      name: "Equal_3"
      op: "Equal"
      input: "Equal_3/x:output:0"
      input: "Equal_3/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
    }
    node_def {
      name: "cond_3/Switch"
      op: "Switch"
      input: "Equal_3:z:0"
      input: "Equal_3:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
    }
    node_def {
      name: "cond_3/switch_t"
      op: "Identity"
      input: "cond_3/Switch:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
    }
    node_def {
      name: "cond_3/switch_f"
      op: "Identity"
      input: "cond_3/Switch:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
    }
    node_def {
      name: "cond_3/pred_id"
      op: "Identity"
      input: "Equal_3:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
    }
    node_def {
      name: "cond_3/StringToNumber"
      op: "StringToNumber"
      input: "cond_3/StringToNumber/Switch:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "out_type"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_3/StringToNumber/Switch"
      op: "Switch"
      input: "StringSplit_3:values:0"
      input: "cond_3/pred_id:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@StringSplit_3"
          }
        }
      }
    }
    node_def {
      name: "cond_3/Reshape/shape"
      op: "Const"
      input: "^cond_3/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\032\000\000\000\002\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_3/Reshape"
      op: "Reshape"
      input: "cond_3/StringToNumber:output:0"
      input: "cond_3/Reshape/shape:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map/elem"
      op: "Const"
      input: "^cond_3/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 26
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\021\000\000\000\000\000\000\000\022\000\000\000\000\000\000\000\023\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\025\000\000\000\000\000\000\000\026\000\000\000\000\000\000\000\027\000\000\000\000\000\000\000\030\000\000\000\000\000\000\000\031\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_3/map/TensorArray/size"
      op: "Const"
      input: "^cond_3/switch_t"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_3/map/TensorArray"
      op: "TensorArrayV3"
      input: "cond_3/map/TensorArray/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_3/map/TensorArray_1/size"
      op: "Const"
      input: "^cond_3/switch_t"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_3/map/TensorArray_1"
      op: "TensorArrayV3"
      input: "cond_3/map/TensorArray_1/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_3/map/TensorArrayUnstack/Shape"
      op: "Const"
      input: "^cond_3/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_3/map/TensorArrayUnstack/strided_slice/stack"
      op: "Const"
      input: "^cond_3/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_3/map/TensorArrayUnstack/strided_slice/stack_1"
      op: "Const"
      input: "^cond_3/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_3/map/TensorArrayUnstack/strided_slice/stack_2"
      op: "Const"
      input: "^cond_3/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_3/map/TensorArrayUnstack/strided_slice"
      op: "StridedSlice"
      input: "cond_3/map/TensorArrayUnstack/Shape:output:0"
      input: "cond_3/map/TensorArrayUnstack/strided_slice/stack:output:0"
      input: "cond_3/map/TensorArrayUnstack/strided_slice/stack_1:output:0"
      input: "cond_3/map/TensorArrayUnstack/strided_slice/stack_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "cond_3/map/TensorArrayUnstack/range/start"
      op: "Const"
      input: "^cond_3/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_3/map/TensorArrayUnstack/range/delta"
      op: "Const"
      input: "^cond_3/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_3/map/TensorArrayUnstack/range"
      op: "Range"
      input: "cond_3/map/TensorArrayUnstack/range/start:output:0"
      input: "cond_3/map/TensorArrayUnstack/strided_slice:output:0"
      input: "cond_3/map/TensorArrayUnstack/range/delta:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
      op: "TensorArrayScatterV3"
      input: "cond_3/map/TensorArray:handle:0"
      input: "cond_3/map/TensorArrayUnstack/range:output:0"
      input: "cond_3/map/elem:output:0"
      input: "cond_3/map/TensorArray:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map/elem"
          }
        }
      }
    }
    node_def {
      name: "cond_3/map/TensorArrayUnstack_1/Shape"
      op: "Const"
      input: "^cond_3/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\032\000\000\000\002\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_3/map/TensorArrayUnstack_1/strided_slice/stack"
      op: "Const"
      input: "^cond_3/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_3/map/TensorArrayUnstack_1/strided_slice/stack_1"
      op: "Const"
      input: "^cond_3/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_3/map/TensorArrayUnstack_1/strided_slice/stack_2"
      op: "Const"
      input: "^cond_3/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_3/map/TensorArrayUnstack_1/strided_slice"
      op: "StridedSlice"
      input: "cond_3/map/TensorArrayUnstack_1/Shape:output:0"
      input: "cond_3/map/TensorArrayUnstack_1/strided_slice/stack:output:0"
      input: "cond_3/map/TensorArrayUnstack_1/strided_slice/stack_1:output:0"
      input: "cond_3/map/TensorArrayUnstack_1/strided_slice/stack_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "cond_3/map/TensorArrayUnstack_1/range/start"
      op: "Const"
      input: "^cond_3/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_3/map/TensorArrayUnstack_1/range/delta"
      op: "Const"
      input: "^cond_3/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_3/map/TensorArrayUnstack_1/range"
      op: "Range"
      input: "cond_3/map/TensorArrayUnstack_1/range/start:output:0"
      input: "cond_3/map/TensorArrayUnstack_1/strided_slice:output:0"
      input: "cond_3/map/TensorArrayUnstack_1/range/delta:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
      op: "TensorArrayScatterV3"
      input: "cond_3/map/TensorArray_1:handle:0"
      input: "cond_3/map/TensorArrayUnstack_1/range:output:0"
      input: "cond_3/Reshape:output:0"
      input: "cond_3/map/TensorArray_1:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/Reshape"
          }
        }
      }
    }
    node_def {
      name: "cond_3/map/Const"
      op: "Const"
      input: "^cond_3/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_3/map/TensorArray_2/size"
      op: "Const"
      input: "^cond_3/switch_t"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_3/map/TensorArray_2"
      op: "TensorArrayV3"
      input: "cond_3/map/TensorArray_2/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_3/map/TensorArray_3/size"
      op: "Const"
      input: "^cond_3/switch_t"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_3/map/TensorArray_3"
      op: "TensorArrayV3"
      input: "cond_3/map/TensorArray_3/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_3/map/while/maximum_iterations"
      op: "Const"
      input: "^cond_3/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_3/map/while/iteration_counter"
      op: "Const"
      input: "^cond_3/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_3/map/while/Enter"
      op: "Enter"
      input: "cond_3/map/while/iteration_counter:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_3/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_3/map/while/Enter_1"
      op: "Enter"
      input: "cond_3/map/Const:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_3/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_3/map/while/Enter_2"
      op: "Enter"
      input: "cond_3/map/TensorArray_2:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_3/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_3/map/while/Enter_3"
      op: "Enter"
      input: "cond_3/map/TensorArray_3:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_3/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_3/map/while/Merge"
      op: "Merge"
      input: "cond_3/map/while/Enter:output:0"
      input: "cond_3/map/while/NextIteration:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map/while/Merge_1"
      op: "Merge"
      input: "cond_3/map/while/Enter_1:output:0"
      input: "cond_3/map/while/NextIteration_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map/while/Merge_2"
      op: "Merge"
      input: "cond_3/map/while/Enter_2:output:0"
      input: "cond_3/map/while/NextIteration_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_3/map/while/Merge_3"
      op: "Merge"
      input: "cond_3/map/while/Enter_3:output:0"
      input: "cond_3/map/while/NextIteration_3:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_3/map/while/Less"
      op: "Less"
      input: "cond_3/map/while/Merge:output:0"
      input: "cond_3/map/while/Less/Enter:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map/while/Less/Enter"
      op: "Enter"
      input: "cond_3/map/while/maximum_iterations:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_3/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_3/map/while/Less_1/y"
      op: "Const"
      input: "^cond_3/map/while/Merge"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_3/map/while/Less_1"
      op: "Less"
      input: "cond_3/map/while/Merge_1:output:0"
      input: "cond_3/map/while/Less_1/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map/while/LogicalAnd"
      op: "LogicalAnd"
      input: "cond_3/map/while/Less:z:0"
      input: "cond_3/map/while/Less_1:z:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "cond_3/map/while/LoopCond"
      op: "LoopCond"
      input: "cond_3/map/while/LogicalAnd:z:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "cond_3/map/while/Switch"
      op: "Switch"
      input: "cond_3/map/while/Merge:output:0"
      input: "cond_3/map/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map/while/Merge"
          }
        }
      }
    }
    node_def {
      name: "cond_3/map/while/Switch_1"
      op: "Switch"
      input: "cond_3/map/while/Merge_1:output:0"
      input: "cond_3/map/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map/while/Merge_1"
          }
        }
      }
    }
    node_def {
      name: "cond_3/map/while/Switch_2"
      op: "Switch"
      input: "cond_3/map/while/Merge_2:output:0"
      input: "cond_3/map/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map/while/Merge_2"
          }
        }
      }
    }
    node_def {
      name: "cond_3/map/while/Switch_3"
      op: "Switch"
      input: "cond_3/map/while/Merge_3:output:0"
      input: "cond_3/map/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map/while/Merge_3"
          }
        }
      }
    }
    node_def {
      name: "cond_3/map/while/Identity"
      op: "Identity"
      input: "cond_3/map/while/Switch:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map/while/Identity_1"
      op: "Identity"
      input: "cond_3/map/while/Switch_1:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map/while/Identity_2"
      op: "Identity"
      input: "cond_3/map/while/Switch_2:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_3/map/while/Identity_3"
      op: "Identity"
      input: "cond_3/map/while/Switch_3:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_3/map/while/add/y"
      op: "Const"
      input: "^cond_3/map/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_3/map/while/add"
      op: "Add"
      input: "cond_3/map/while/Identity:output:0"
      input: "cond_3/map/while/add/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map/while/TensorArrayReadV3"
      op: "TensorArrayReadV3"
      input: "cond_3/map/while/TensorArrayReadV3/Enter:output:0"
      input: "cond_3/map/while/Identity_1:output:0"
      input: "cond_3/map/while/TensorArrayReadV3/Enter_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
    }
    node_def {
      name: "cond_3/map/while/TensorArrayReadV3/Enter"
      op: "Enter"
      input: "cond_3/map/TensorArray:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_3/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_3/map/while/TensorArrayReadV3/Enter_1"
      op: "Enter"
      input: "cond_3/map/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_3/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_3/map/while/TensorArrayReadV3_1"
      op: "TensorArrayReadV3"
      input: "cond_3/map/while/TensorArrayReadV3_1/Enter:output:0"
      input: "cond_3/map/while/Identity_1:output:0"
      input: "cond_3/map/while/TensorArrayReadV3_1/Enter_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_3/map/while/TensorArrayReadV3_1/Enter"
      op: "Enter"
      input: "cond_3/map/TensorArray_1:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_3/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_3/map/while/TensorArrayReadV3_1/Enter_1"
      op: "Enter"
      input: "cond_3/map/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_3/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_3/map/while/strided_slice/stack"
      op: "Const"
      input: "^cond_3/map/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_3/map/while/strided_slice/stack_1"
      op: "Const"
      input: "^cond_3/map/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_3/map/while/strided_slice/stack_2"
      op: "Const"
      input: "^cond_3/map/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_3/map/while/strided_slice"
      op: "StridedSlice"
      input: "cond_3/map/while/TensorArrayReadV3_1:value:0"
      input: "cond_3/map/while/strided_slice/stack:output:0"
      input: "cond_3/map/while/strided_slice/stack_1:output:0"
      input: "cond_3/map/while/strided_slice/stack_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "cond_3/map/while/ToInt64"
      op: "Cast"
      input: "cond_3/map/while/strided_slice:output:0"
      device: "/device:CPU:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "cond_3/map/while/TensorArrayWrite/TensorArrayWriteV3"
      op: "TensorArrayWriteV3"
      input: "cond_3/map/while/TensorArrayWrite/TensorArrayWriteV3/Enter:output:0"
      input: "cond_3/map/while/Identity_1:output:0"
      input: "cond_3/map/while/TensorArrayReadV3:value:0"
      input: "cond_3/map/while/Identity_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map/while/TensorArrayReadV3"
          }
        }
      }
    }
    node_def {
      name: "cond_3/map/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
      op: "Enter"
      input: "cond_3/map/TensorArray_2:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map/while/TensorArrayReadV3"
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_3/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_3/map/while/TensorArrayWrite_1/TensorArrayWriteV3"
      op: "TensorArrayWriteV3"
      input: "cond_3/map/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter:output:0"
      input: "cond_3/map/while/Identity_1:output:0"
      input: "cond_3/map/while/ToInt64:y:0"
      input: "cond_3/map/while/Identity_3:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map/while/ToInt64"
          }
        }
      }
    }
    node_def {
      name: "cond_3/map/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
      op: "Enter"
      input: "cond_3/map/TensorArray_3:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map/while/ToInt64"
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_3/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_3/map/while/add_1/y"
      op: "Const"
      input: "^cond_3/map/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_3/map/while/add_1"
      op: "Add"
      input: "cond_3/map/while/Identity_1:output:0"
      input: "cond_3/map/while/add_1/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map/while/NextIteration"
      op: "NextIteration"
      input: "cond_3/map/while/add:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map/while/NextIteration_1"
      op: "NextIteration"
      input: "cond_3/map/while/add_1:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map/while/NextIteration_2"
      op: "NextIteration"
      input: "cond_3/map/while/TensorArrayWrite/TensorArrayWriteV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_3/map/while/NextIteration_3"
      op: "NextIteration"
      input: "cond_3/map/while/TensorArrayWrite_1/TensorArrayWriteV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_3/map/while/Exit"
      op: "Exit"
      input: "cond_3/map/while/Switch:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map/while/Exit_1"
      op: "Exit"
      input: "cond_3/map/while/Switch_1:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map/while/Exit_2"
      op: "Exit"
      input: "cond_3/map/while/Switch_2:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_3/map/while/Exit_3"
      op: "Exit"
      input: "cond_3/map/while/Switch_3:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_3/map/TensorArrayStack/TensorArraySizeV3"
      op: "TensorArraySizeV3"
      input: "cond_3/map/TensorArray_2:handle:0"
      input: "cond_3/map/while/Exit_2:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map/TensorArray_2"
          }
        }
      }
    }
    node_def {
      name: "cond_3/map/TensorArrayStack/range/start"
      op: "Const"
      input: "^cond_3/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_3/map/TensorArrayStack/range/delta"
      op: "Const"
      input: "^cond_3/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_3/map/TensorArrayStack/range"
      op: "Range"
      input: "cond_3/map/TensorArrayStack/range/start:output:0"
      input: "cond_3/map/TensorArrayStack/TensorArraySizeV3:size:0"
      input: "cond_3/map/TensorArrayStack/range/delta:output:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map/TensorArray_2"
          }
        }
      }
    }
    node_def {
      name: "cond_3/map/TensorArrayStack/TensorArrayGatherV3"
      op: "TensorArrayGatherV3"
      input: "cond_3/map/TensorArray_2:handle:0"
      input: "cond_3/map/TensorArrayStack/range:output:0"
      input: "cond_3/map/while/Exit_2:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
          }
        }
      }
    }
    node_def {
      name: "cond_3/map/TensorArrayStack_1/TensorArraySizeV3"
      op: "TensorArraySizeV3"
      input: "cond_3/map/TensorArray_3:handle:0"
      input: "cond_3/map/while/Exit_3:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map/TensorArray_3"
          }
        }
      }
    }
    node_def {
      name: "cond_3/map/TensorArrayStack_1/range/start"
      op: "Const"
      input: "^cond_3/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map/TensorArray_3"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_3/map/TensorArrayStack_1/range/delta"
      op: "Const"
      input: "^cond_3/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map/TensorArray_3"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_3/map/TensorArrayStack_1/range"
      op: "Range"
      input: "cond_3/map/TensorArrayStack_1/range/start:output:0"
      input: "cond_3/map/TensorArrayStack_1/TensorArraySizeV3:size:0"
      input: "cond_3/map/TensorArrayStack_1/range/delta:output:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map/TensorArray_3"
          }
        }
      }
    }
    node_def {
      name: "cond_3/map/TensorArrayStack_1/TensorArrayGatherV3"
      op: "TensorArrayGatherV3"
      input: "cond_3/map/TensorArray_3:handle:0"
      input: "cond_3/map/TensorArrayStack_1/range:output:0"
      input: "cond_3/map/while/Exit_3:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map/TensorArray_3"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
          }
        }
      }
    }
    node_def {
      name: "cond_3/transpose/a"
      op: "Pack"
      input: "cond_3/map/TensorArrayStack/TensorArrayGatherV3:value:0"
      input: "cond_3/map/TensorArrayStack_1/TensorArrayGatherV3:value:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "cond_3/transpose/perm"
      op: "Const"
      input: "^cond_3/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_3/transpose"
      op: "Transpose"
      input: "cond_3/transpose/a:output:0"
      input: "cond_3/transpose/perm:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/AsString"
      op: "AsString"
      input: "cond_3/Reshape:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "fill"
        value {
          s: ""
        }
      }
      attr {
        key: "precision"
        value {
          i: -1
        }
      }
      attr {
        key: "scientific"
        value {
          b: false
        }
      }
      attr {
        key: "shortest"
        value {
          b: false
        }
      }
      attr {
        key: "width"
        value {
          i: -1
        }
      }
    }
    node_def {
      name: "cond_3/map_1/TensorArray/size"
      op: "Const"
      input: "^cond_3/switch_t"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_1/TensorArray"
      op: "TensorArrayV3"
      input: "cond_3/map_1/TensorArray/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_3/map_1/TensorArrayUnstack/Shape"
      op: "Const"
      input: "^cond_3/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\032\000\000\000\002\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_1/TensorArrayUnstack/strided_slice/stack"
      op: "Const"
      input: "^cond_3/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_1/TensorArrayUnstack/strided_slice/stack_1"
      op: "Const"
      input: "^cond_3/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_1/TensorArrayUnstack/strided_slice/stack_2"
      op: "Const"
      input: "^cond_3/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_1/TensorArrayUnstack/strided_slice"
      op: "StridedSlice"
      input: "cond_3/map_1/TensorArrayUnstack/Shape:output:0"
      input: "cond_3/map_1/TensorArrayUnstack/strided_slice/stack:output:0"
      input: "cond_3/map_1/TensorArrayUnstack/strided_slice/stack_1:output:0"
      input: "cond_3/map_1/TensorArrayUnstack/strided_slice/stack_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "cond_3/map_1/TensorArrayUnstack/range/start"
      op: "Const"
      input: "^cond_3/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_1/TensorArrayUnstack/range/delta"
      op: "Const"
      input: "^cond_3/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_1/TensorArrayUnstack/range"
      op: "Range"
      input: "cond_3/map_1/TensorArrayUnstack/range/start:output:0"
      input: "cond_3/map_1/TensorArrayUnstack/strided_slice:output:0"
      input: "cond_3/map_1/TensorArrayUnstack/range/delta:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
      op: "TensorArrayScatterV3"
      input: "cond_3/map_1/TensorArray:handle:0"
      input: "cond_3/map_1/TensorArrayUnstack/range:output:0"
      input: "cond_3/AsString:output:0"
      input: "cond_3/map_1/TensorArray:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/AsString"
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_1/Const"
      op: "Const"
      input: "^cond_3/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_1/TensorArray_1/size"
      op: "Const"
      input: "^cond_3/switch_t"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_1/TensorArray_1"
      op: "TensorArrayV3"
      input: "cond_3/map_1/TensorArray_1/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_3/map_1/while/maximum_iterations"
      op: "Const"
      input: "^cond_3/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_1/while/iteration_counter"
      op: "Const"
      input: "^cond_3/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_1/while/Enter"
      op: "Enter"
      input: "cond_3/map_1/while/iteration_counter:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_3/map_1/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_3/map_1/while/Enter_1"
      op: "Enter"
      input: "cond_3/map_1/Const:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_3/map_1/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_3/map_1/while/Enter_2"
      op: "Enter"
      input: "cond_3/map_1/TensorArray_1:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_3/map_1/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_3/map_1/while/Merge"
      op: "Merge"
      input: "cond_3/map_1/while/Enter:output:0"
      input: "cond_3/map_1/while/NextIteration:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map_1/while/Merge_1"
      op: "Merge"
      input: "cond_3/map_1/while/Enter_1:output:0"
      input: "cond_3/map_1/while/NextIteration_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map_1/while/Merge_2"
      op: "Merge"
      input: "cond_3/map_1/while/Enter_2:output:0"
      input: "cond_3/map_1/while/NextIteration_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_3/map_1/while/Less"
      op: "Less"
      input: "cond_3/map_1/while/Merge:output:0"
      input: "cond_3/map_1/while/Less/Enter:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map_1/while/Less/Enter"
      op: "Enter"
      input: "cond_3/map_1/while/maximum_iterations:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_3/map_1/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_3/map_1/while/Less_1/y"
      op: "Const"
      input: "^cond_3/map_1/while/Merge"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_1/while/Less_1"
      op: "Less"
      input: "cond_3/map_1/while/Merge_1:output:0"
      input: "cond_3/map_1/while/Less_1/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map_1/while/LogicalAnd"
      op: "LogicalAnd"
      input: "cond_3/map_1/while/Less:z:0"
      input: "cond_3/map_1/while/Less_1:z:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "cond_3/map_1/while/LoopCond"
      op: "LoopCond"
      input: "cond_3/map_1/while/LogicalAnd:z:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "cond_3/map_1/while/Switch"
      op: "Switch"
      input: "cond_3/map_1/while/Merge:output:0"
      input: "cond_3/map_1/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map_1/while/Merge"
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_1/while/Switch_1"
      op: "Switch"
      input: "cond_3/map_1/while/Merge_1:output:0"
      input: "cond_3/map_1/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map_1/while/Merge_1"
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_1/while/Switch_2"
      op: "Switch"
      input: "cond_3/map_1/while/Merge_2:output:0"
      input: "cond_3/map_1/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map_1/while/Merge_2"
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_1/while/Identity"
      op: "Identity"
      input: "cond_3/map_1/while/Switch:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map_1/while/Identity_1"
      op: "Identity"
      input: "cond_3/map_1/while/Switch_1:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map_1/while/Identity_2"
      op: "Identity"
      input: "cond_3/map_1/while/Switch_2:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_3/map_1/while/add/y"
      op: "Const"
      input: "^cond_3/map_1/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_1/while/add"
      op: "Add"
      input: "cond_3/map_1/while/Identity:output:0"
      input: "cond_3/map_1/while/add/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map_1/while/TensorArrayReadV3"
      op: "TensorArrayReadV3"
      input: "cond_3/map_1/while/TensorArrayReadV3/Enter:output:0"
      input: "cond_3/map_1/while/Identity_1:output:0"
      input: "cond_3/map_1/while/TensorArrayReadV3/Enter_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
    }
    node_def {
      name: "cond_3/map_1/while/TensorArrayReadV3/Enter"
      op: "Enter"
      input: "cond_3/map_1/TensorArray:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_3/map_1/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_3/map_1/while/TensorArrayReadV3/Enter_1"
      op: "Enter"
      input: "cond_3/map_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_3/map_1/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_3/map_1/while/strided_slice/stack"
      op: "Const"
      input: "^cond_3/map_1/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_1/while/strided_slice/stack_1"
      op: "Const"
      input: "^cond_3/map_1/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_1/while/strided_slice/stack_2"
      op: "Const"
      input: "^cond_3/map_1/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_1/while/strided_slice"
      op: "StridedSlice"
      input: "cond_3/map_1/while/TensorArrayReadV3:value:0"
      input: "cond_3/map_1/while/strided_slice/stack:output:0"
      input: "cond_3/map_1/while/strided_slice/stack_1:output:0"
      input: "cond_3/map_1/while/strided_slice/stack_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "cond_3/map_1/while/TensorArrayWrite/TensorArrayWriteV3"
      op: "TensorArrayWriteV3"
      input: "cond_3/map_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter:output:0"
      input: "cond_3/map_1/while/Identity_1:output:0"
      input: "cond_3/map_1/while/strided_slice:output:0"
      input: "cond_3/map_1/while/Identity_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map_1/while/strided_slice"
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
      op: "Enter"
      input: "cond_3/map_1/TensorArray_1:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map_1/while/strided_slice"
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_3/map_1/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_3/map_1/while/add_1/y"
      op: "Const"
      input: "^cond_3/map_1/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_1/while/add_1"
      op: "Add"
      input: "cond_3/map_1/while/Identity_1:output:0"
      input: "cond_3/map_1/while/add_1/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map_1/while/NextIteration"
      op: "NextIteration"
      input: "cond_3/map_1/while/add:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map_1/while/NextIteration_1"
      op: "NextIteration"
      input: "cond_3/map_1/while/add_1:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map_1/while/NextIteration_2"
      op: "NextIteration"
      input: "cond_3/map_1/while/TensorArrayWrite/TensorArrayWriteV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_3/map_1/while/Exit"
      op: "Exit"
      input: "cond_3/map_1/while/Switch:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map_1/while/Exit_1"
      op: "Exit"
      input: "cond_3/map_1/while/Switch_1:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map_1/while/Exit_2"
      op: "Exit"
      input: "cond_3/map_1/while/Switch_2:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_3/map_1/TensorArrayStack/TensorArraySizeV3"
      op: "TensorArraySizeV3"
      input: "cond_3/map_1/TensorArray_1:handle:0"
      input: "cond_3/map_1/while/Exit_2:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map_1/TensorArray_1"
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_1/TensorArrayStack/range/start"
      op: "Const"
      input: "^cond_3/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map_1/TensorArray_1"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_1/TensorArrayStack/range/delta"
      op: "Const"
      input: "^cond_3/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map_1/TensorArray_1"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_1/TensorArrayStack/range"
      op: "Range"
      input: "cond_3/map_1/TensorArrayStack/range/start:output:0"
      input: "cond_3/map_1/TensorArrayStack/TensorArraySizeV3:size:0"
      input: "cond_3/map_1/TensorArrayStack/range/delta:output:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map_1/TensorArray_1"
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_1/TensorArrayStack/TensorArrayGatherV3"
      op: "TensorArrayGatherV3"
      input: "cond_3/map_1/TensorArray_1:handle:0"
      input: "cond_3/map_1/TensorArrayStack/range:output:0"
      input: "cond_3/map_1/while/Exit_2:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map_1/TensorArray_1"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
          }
        }
      }
    }
    node_def {
      name: "cond_3/SparseTensor/dense_shape"
      op: "Const"
      input: "^cond_3/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\032\000\000\000\000\000\000\000d\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_3/SparseToDense/default_value"
      op: "Const"
      input: "^cond_3/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "0"
          }
        }
      }
    }
    node_def {
      name: "cond_3/SparseToDense"
      op: "SparseToDense"
      input: "cond_3/transpose:y:0"
      input: "cond_3/SparseTensor/dense_shape:output:0"
      input: "cond_3/map_1/TensorArrayStack/TensorArrayGatherV3:value:0"
      input: "cond_3/SparseToDense/default_value:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "cond_3/StringToNumber_1"
      op: "StringToNumber"
      input: "cond_3/StringToNumber_1/Switch:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "out_type"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_3/StringToNumber_1/Switch"
      op: "Switch"
      input: "StringSplit_3:values:0"
      input: "cond_3/pred_id:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@StringSplit_3"
          }
        }
      }
    }
    node_def {
      name: "cond_3/Cast"
      op: "Cast"
      input: "cond_3/StringToNumber_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "cond_3/Reshape_1/shape"
      op: "Const"
      input: "^cond_3/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\032\000\000\000\n\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_3/Reshape_1"
      op: "Reshape"
      input: "cond_3/Cast:y:0"
      input: "cond_3/Reshape_1/shape:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map_2/elem"
      op: "Const"
      input: "^cond_3/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 26
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\021\000\000\000\000\000\000\000\022\000\000\000\000\000\000\000\023\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\025\000\000\000\000\000\000\000\026\000\000\000\000\000\000\000\027\000\000\000\000\000\000\000\030\000\000\000\000\000\000\000\031\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/TensorArray/size"
      op: "Const"
      input: "^cond_3/switch_f"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/TensorArray"
      op: "TensorArrayV3"
      input: "cond_3/map_2/TensorArray/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_3/map_2/TensorArray_1/size"
      op: "Const"
      input: "^cond_3/switch_f"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/TensorArray_1"
      op: "TensorArrayV3"
      input: "cond_3/map_2/TensorArray_1/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_3/map_2/TensorArrayUnstack/Shape"
      op: "Const"
      input: "^cond_3/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/TensorArrayUnstack/strided_slice/stack"
      op: "Const"
      input: "^cond_3/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/TensorArrayUnstack/strided_slice/stack_1"
      op: "Const"
      input: "^cond_3/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/TensorArrayUnstack/strided_slice/stack_2"
      op: "Const"
      input: "^cond_3/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/TensorArrayUnstack/strided_slice"
      op: "StridedSlice"
      input: "cond_3/map_2/TensorArrayUnstack/Shape:output:0"
      input: "cond_3/map_2/TensorArrayUnstack/strided_slice/stack:output:0"
      input: "cond_3/map_2/TensorArrayUnstack/strided_slice/stack_1:output:0"
      input: "cond_3/map_2/TensorArrayUnstack/strided_slice/stack_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "cond_3/map_2/TensorArrayUnstack/range/start"
      op: "Const"
      input: "^cond_3/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/TensorArrayUnstack/range/delta"
      op: "Const"
      input: "^cond_3/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/TensorArrayUnstack/range"
      op: "Range"
      input: "cond_3/map_2/TensorArrayUnstack/range/start:output:0"
      input: "cond_3/map_2/TensorArrayUnstack/strided_slice:output:0"
      input: "cond_3/map_2/TensorArrayUnstack/range/delta:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
      op: "TensorArrayScatterV3"
      input: "cond_3/map_2/TensorArray:handle:0"
      input: "cond_3/map_2/TensorArrayUnstack/range:output:0"
      input: "cond_3/map_2/elem:output:0"
      input: "cond_3/map_2/TensorArray:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map_2/elem"
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/TensorArrayUnstack_1/Shape"
      op: "Const"
      input: "^cond_3/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\032\000\000\000\n\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/TensorArrayUnstack_1/strided_slice/stack"
      op: "Const"
      input: "^cond_3/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/TensorArrayUnstack_1/strided_slice/stack_1"
      op: "Const"
      input: "^cond_3/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/TensorArrayUnstack_1/strided_slice/stack_2"
      op: "Const"
      input: "^cond_3/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/TensorArrayUnstack_1/strided_slice"
      op: "StridedSlice"
      input: "cond_3/map_2/TensorArrayUnstack_1/Shape:output:0"
      input: "cond_3/map_2/TensorArrayUnstack_1/strided_slice/stack:output:0"
      input: "cond_3/map_2/TensorArrayUnstack_1/strided_slice/stack_1:output:0"
      input: "cond_3/map_2/TensorArrayUnstack_1/strided_slice/stack_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "cond_3/map_2/TensorArrayUnstack_1/range/start"
      op: "Const"
      input: "^cond_3/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/TensorArrayUnstack_1/range/delta"
      op: "Const"
      input: "^cond_3/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/TensorArrayUnstack_1/range"
      op: "Range"
      input: "cond_3/map_2/TensorArrayUnstack_1/range/start:output:0"
      input: "cond_3/map_2/TensorArrayUnstack_1/strided_slice:output:0"
      input: "cond_3/map_2/TensorArrayUnstack_1/range/delta:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map_2/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
      op: "TensorArrayScatterV3"
      input: "cond_3/map_2/TensorArray_1:handle:0"
      input: "cond_3/map_2/TensorArrayUnstack_1/range:output:0"
      input: "cond_3/Reshape_1:output:0"
      input: "cond_3/map_2/TensorArray_1:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/Reshape_1"
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/Const"
      op: "Const"
      input: "^cond_3/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/TensorArray_2/size"
      op: "Const"
      input: "^cond_3/switch_f"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/TensorArray_2"
      op: "TensorArrayV3"
      input: "cond_3/map_2/TensorArray_2/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_3/map_2/TensorArray_3/size"
      op: "Const"
      input: "^cond_3/switch_f"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/TensorArray_3"
      op: "TensorArrayV3"
      input: "cond_3/map_2/TensorArray_3/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/maximum_iterations"
      op: "Const"
      input: "^cond_3/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/iteration_counter"
      op: "Const"
      input: "^cond_3/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/Enter"
      op: "Enter"
      input: "cond_3/map_2/while/iteration_counter:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_3/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/Enter_1"
      op: "Enter"
      input: "cond_3/map_2/Const:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_3/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/Enter_2"
      op: "Enter"
      input: "cond_3/map_2/TensorArray_2:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_3/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/Enter_3"
      op: "Enter"
      input: "cond_3/map_2/TensorArray_3:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_3/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/Merge"
      op: "Merge"
      input: "cond_3/map_2/while/Enter:output:0"
      input: "cond_3/map_2/while/NextIteration:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/Merge_1"
      op: "Merge"
      input: "cond_3/map_2/while/Enter_1:output:0"
      input: "cond_3/map_2/while/NextIteration_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/Merge_2"
      op: "Merge"
      input: "cond_3/map_2/while/Enter_2:output:0"
      input: "cond_3/map_2/while/NextIteration_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/Merge_3"
      op: "Merge"
      input: "cond_3/map_2/while/Enter_3:output:0"
      input: "cond_3/map_2/while/NextIteration_3:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/Less"
      op: "Less"
      input: "cond_3/map_2/while/Merge:output:0"
      input: "cond_3/map_2/while/Less/Enter:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/Less/Enter"
      op: "Enter"
      input: "cond_3/map_2/while/maximum_iterations:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_3/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/Less_1/y"
      op: "Const"
      input: "^cond_3/map_2/while/Merge"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/Less_1"
      op: "Less"
      input: "cond_3/map_2/while/Merge_1:output:0"
      input: "cond_3/map_2/while/Less_1/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/LogicalAnd"
      op: "LogicalAnd"
      input: "cond_3/map_2/while/Less:z:0"
      input: "cond_3/map_2/while/Less_1:z:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "cond_3/map_2/while/LoopCond"
      op: "LoopCond"
      input: "cond_3/map_2/while/LogicalAnd:z:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "cond_3/map_2/while/Switch"
      op: "Switch"
      input: "cond_3/map_2/while/Merge:output:0"
      input: "cond_3/map_2/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map_2/while/Merge"
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/Switch_1"
      op: "Switch"
      input: "cond_3/map_2/while/Merge_1:output:0"
      input: "cond_3/map_2/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map_2/while/Merge_1"
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/Switch_2"
      op: "Switch"
      input: "cond_3/map_2/while/Merge_2:output:0"
      input: "cond_3/map_2/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map_2/while/Merge_2"
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/Switch_3"
      op: "Switch"
      input: "cond_3/map_2/while/Merge_3:output:0"
      input: "cond_3/map_2/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map_2/while/Merge_3"
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/Identity"
      op: "Identity"
      input: "cond_3/map_2/while/Switch:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/Identity_1"
      op: "Identity"
      input: "cond_3/map_2/while/Switch_1:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/Identity_2"
      op: "Identity"
      input: "cond_3/map_2/while/Switch_2:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/Identity_3"
      op: "Identity"
      input: "cond_3/map_2/while/Switch_3:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/add/y"
      op: "Const"
      input: "^cond_3/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/add"
      op: "Add"
      input: "cond_3/map_2/while/Identity:output:0"
      input: "cond_3/map_2/while/add/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/TensorArrayReadV3"
      op: "TensorArrayReadV3"
      input: "cond_3/map_2/while/TensorArrayReadV3/Enter:output:0"
      input: "cond_3/map_2/while/Identity_1:output:0"
      input: "cond_3/map_2/while/TensorArrayReadV3/Enter_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/TensorArrayReadV3/Enter"
      op: "Enter"
      input: "cond_3/map_2/TensorArray:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_3/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/TensorArrayReadV3/Enter_1"
      op: "Enter"
      input: "cond_3/map_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_3/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/TensorArrayReadV3_1"
      op: "TensorArrayReadV3"
      input: "cond_3/map_2/while/TensorArrayReadV3_1/Enter:output:0"
      input: "cond_3/map_2/while/Identity_1:output:0"
      input: "cond_3/map_2/while/TensorArrayReadV3_1/Enter_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/TensorArrayReadV3_1/Enter"
      op: "Enter"
      input: "cond_3/map_2/TensorArray_1:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_3/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/TensorArrayReadV3_1/Enter_1"
      op: "Enter"
      input: "cond_3/map_2/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_3/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/TensorArray/size"
      op: "Const"
      input: "^cond_3/map_2/while/Identity"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 10
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/TensorArray"
      op: "TensorArrayV3"
      input: "cond_3/map_2/while/map/TensorArray/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/TensorArrayUnstack/Shape"
      op: "Const"
      input: "^cond_3/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 10
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/TensorArrayUnstack/strided_slice/stack"
      op: "Const"
      input: "^cond_3/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/TensorArrayUnstack/strided_slice/stack_1"
      op: "Const"
      input: "^cond_3/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/TensorArrayUnstack/strided_slice/stack_2"
      op: "Const"
      input: "^cond_3/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/TensorArrayUnstack/strided_slice"
      op: "StridedSlice"
      input: "cond_3/map_2/while/map/TensorArrayUnstack/Shape:output:0"
      input: "cond_3/map_2/while/map/TensorArrayUnstack/strided_slice/stack:output:0"
      input: "cond_3/map_2/while/map/TensorArrayUnstack/strided_slice/stack_1:output:0"
      input: "cond_3/map_2/while/map/TensorArrayUnstack/strided_slice/stack_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/TensorArrayUnstack/range/start"
      op: "Const"
      input: "^cond_3/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/TensorArrayUnstack/range/delta"
      op: "Const"
      input: "^cond_3/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/TensorArrayUnstack/range"
      op: "Range"
      input: "cond_3/map_2/while/map/TensorArrayUnstack/range/start:output:0"
      input: "cond_3/map_2/while/map/TensorArrayUnstack/strided_slice:output:0"
      input: "cond_3/map_2/while/map/TensorArrayUnstack/range/delta:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
      op: "TensorArrayScatterV3"
      input: "cond_3/map_2/while/map/TensorArray:handle:0"
      input: "cond_3/map_2/while/map/TensorArrayUnstack/range:output:0"
      input: "cond_3/map_2/while/TensorArrayReadV3_1:value:0"
      input: "cond_3/map_2/while/map/TensorArray:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map_2/while/TensorArrayReadV3_1"
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/Const"
      op: "Const"
      input: "^cond_3/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/TensorArray_1/size"
      op: "Const"
      input: "^cond_3/map_2/while/Identity"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 10
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/TensorArray_1"
      op: "TensorArrayV3"
      input: "cond_3/map_2/while/map/TensorArray_1/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/TensorArray_2/size"
      op: "Const"
      input: "^cond_3/map_2/while/Identity"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 10
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/TensorArray_2"
      op: "TensorArrayV3"
      input: "cond_3/map_2/while/map/TensorArray_2/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/while/maximum_iterations"
      op: "Const"
      input: "^cond_3/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 10
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/while/iteration_counter"
      op: "Const"
      input: "^cond_3/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/while/Enter"
      op: "Enter"
      input: "cond_3/map_2/while/map/while/iteration_counter:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_3/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/while/Enter_1"
      op: "Enter"
      input: "cond_3/map_2/while/map/Const:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_3/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/while/Enter_2"
      op: "Enter"
      input: "cond_3/map_2/while/map/TensorArray_1:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_3/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/while/Enter_3"
      op: "Enter"
      input: "cond_3/map_2/while/map/TensorArray_2:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_3/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/while/Merge"
      op: "Merge"
      input: "cond_3/map_2/while/map/while/Enter:output:0"
      input: "cond_3/map_2/while/map/while/NextIteration:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/while/Merge_1"
      op: "Merge"
      input: "cond_3/map_2/while/map/while/Enter_1:output:0"
      input: "cond_3/map_2/while/map/while/NextIteration_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/while/Merge_2"
      op: "Merge"
      input: "cond_3/map_2/while/map/while/Enter_2:output:0"
      input: "cond_3/map_2/while/map/while/NextIteration_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/while/Merge_3"
      op: "Merge"
      input: "cond_3/map_2/while/map/while/Enter_3:output:0"
      input: "cond_3/map_2/while/map/while/NextIteration_3:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/while/Less"
      op: "Less"
      input: "cond_3/map_2/while/map/while/Merge:output:0"
      input: "cond_3/map_2/while/map/while/Less/Enter:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/while/Less/Enter"
      op: "Enter"
      input: "cond_3/map_2/while/map/while/maximum_iterations:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_3/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/while/Less_1/y"
      op: "Const"
      input: "^cond_3/map_2/while/map/while/Merge"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 10
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/while/Less_1"
      op: "Less"
      input: "cond_3/map_2/while/map/while/Merge_1:output:0"
      input: "cond_3/map_2/while/map/while/Less_1/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/while/LogicalAnd"
      op: "LogicalAnd"
      input: "cond_3/map_2/while/map/while/Less:z:0"
      input: "cond_3/map_2/while/map/while/Less_1:z:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "cond_3/map_2/while/map/while/LoopCond"
      op: "LoopCond"
      input: "cond_3/map_2/while/map/while/LogicalAnd:z:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "cond_3/map_2/while/map/while/Switch"
      op: "Switch"
      input: "cond_3/map_2/while/map/while/Merge:output:0"
      input: "cond_3/map_2/while/map/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map_2/while/map/while/Merge"
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/while/Switch_1"
      op: "Switch"
      input: "cond_3/map_2/while/map/while/Merge_1:output:0"
      input: "cond_3/map_2/while/map/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map_2/while/map/while/Merge_1"
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/while/Switch_2"
      op: "Switch"
      input: "cond_3/map_2/while/map/while/Merge_2:output:0"
      input: "cond_3/map_2/while/map/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map_2/while/map/while/Merge_2"
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/while/Switch_3"
      op: "Switch"
      input: "cond_3/map_2/while/map/while/Merge_3:output:0"
      input: "cond_3/map_2/while/map/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map_2/while/map/while/Merge_3"
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/while/Identity"
      op: "Identity"
      input: "cond_3/map_2/while/map/while/Switch:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/while/Identity_1"
      op: "Identity"
      input: "cond_3/map_2/while/map/while/Switch_1:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/while/Identity_2"
      op: "Identity"
      input: "cond_3/map_2/while/map/while/Switch_2:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/while/Identity_3"
      op: "Identity"
      input: "cond_3/map_2/while/map/while/Switch_3:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/while/add/y"
      op: "Const"
      input: "^cond_3/map_2/while/map/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/while/add"
      op: "Add"
      input: "cond_3/map_2/while/map/while/Identity:output:0"
      input: "cond_3/map_2/while/map/while/add/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/while/TensorArrayReadV3"
      op: "TensorArrayReadV3"
      input: "cond_3/map_2/while/map/while/TensorArrayReadV3/Enter:output:0"
      input: "cond_3/map_2/while/map/while/Identity_1:output:0"
      input: "cond_3/map_2/while/map/while/TensorArrayReadV3/Enter_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/while/TensorArrayReadV3/Enter"
      op: "Enter"
      input: "cond_3/map_2/while/map/TensorArray:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_3/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/while/TensorArrayReadV3/Enter_1"
      op: "Enter"
      input: "cond_3/map_2/while/map/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_3/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/while/TensorArrayWrite/TensorArrayWriteV3"
      op: "TensorArrayWriteV3"
      input: "cond_3/map_2/while/map/while/TensorArrayWrite/TensorArrayWriteV3/Enter:output:0"
      input: "cond_3/map_2/while/map/while/Identity_1:output:0"
      input: "cond_3/map_2/while/map/while/TensorArrayWrite/TensorArrayWriteV3/Enter_1:output:0"
      input: "cond_3/map_2/while/map/while/Identity_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map_2/while/TensorArrayReadV3"
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
      op: "Enter"
      input: "cond_3/map_2/while/map/TensorArray_1:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map_2/while/TensorArrayReadV3"
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_3/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/while/TensorArrayWrite/TensorArrayWriteV3/Enter_1"
      op: "Enter"
      input: "cond_3/map_2/while/TensorArrayReadV3:value:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map_2/while/TensorArrayReadV3"
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_3/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/while/TensorArrayWrite_1/TensorArrayWriteV3"
      op: "TensorArrayWriteV3"
      input: "cond_3/map_2/while/map/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter:output:0"
      input: "cond_3/map_2/while/map/while/Identity_1:output:0"
      input: "cond_3/map_2/while/map/while/TensorArrayReadV3:value:0"
      input: "cond_3/map_2/while/map/while/Identity_3:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map_2/while/map/while/TensorArrayReadV3"
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
      op: "Enter"
      input: "cond_3/map_2/while/map/TensorArray_2:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map_2/while/map/while/TensorArrayReadV3"
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_3/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/while/add_1/y"
      op: "Const"
      input: "^cond_3/map_2/while/map/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/while/add_1"
      op: "Add"
      input: "cond_3/map_2/while/map/while/Identity_1:output:0"
      input: "cond_3/map_2/while/map/while/add_1/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/while/NextIteration"
      op: "NextIteration"
      input: "cond_3/map_2/while/map/while/add:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/while/NextIteration_1"
      op: "NextIteration"
      input: "cond_3/map_2/while/map/while/add_1:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/while/NextIteration_2"
      op: "NextIteration"
      input: "cond_3/map_2/while/map/while/TensorArrayWrite/TensorArrayWriteV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/while/NextIteration_3"
      op: "NextIteration"
      input: "cond_3/map_2/while/map/while/TensorArrayWrite_1/TensorArrayWriteV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/while/Exit"
      op: "Exit"
      input: "cond_3/map_2/while/map/while/Switch:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/while/Exit_1"
      op: "Exit"
      input: "cond_3/map_2/while/map/while/Switch_1:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/while/Exit_2"
      op: "Exit"
      input: "cond_3/map_2/while/map/while/Switch_2:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/while/Exit_3"
      op: "Exit"
      input: "cond_3/map_2/while/map/while/Switch_3:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/TensorArrayStack/TensorArraySizeV3"
      op: "TensorArraySizeV3"
      input: "cond_3/map_2/while/map/TensorArray_1:handle:0"
      input: "cond_3/map_2/while/map/while/Exit_2:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map_2/while/map/TensorArray_1"
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/TensorArrayStack/range/start"
      op: "Const"
      input: "^cond_3/map_2/while/Identity"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map_2/while/map/TensorArray_1"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/TensorArrayStack/range/delta"
      op: "Const"
      input: "^cond_3/map_2/while/Identity"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map_2/while/map/TensorArray_1"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/TensorArrayStack/range"
      op: "Range"
      input: "cond_3/map_2/while/map/TensorArrayStack/range/start:output:0"
      input: "cond_3/map_2/while/map/TensorArrayStack/TensorArraySizeV3:size:0"
      input: "cond_3/map_2/while/map/TensorArrayStack/range/delta:output:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map_2/while/map/TensorArray_1"
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/TensorArrayStack/TensorArrayGatherV3"
      op: "TensorArrayGatherV3"
      input: "cond_3/map_2/while/map/TensorArray_1:handle:0"
      input: "cond_3/map_2/while/map/TensorArrayStack/range:output:0"
      input: "cond_3/map_2/while/map/while/Exit_2:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map_2/while/map/TensorArray_1"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/TensorArrayStack_1/TensorArraySizeV3"
      op: "TensorArraySizeV3"
      input: "cond_3/map_2/while/map/TensorArray_2:handle:0"
      input: "cond_3/map_2/while/map/while/Exit_3:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map_2/while/map/TensorArray_2"
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/TensorArrayStack_1/range/start"
      op: "Const"
      input: "^cond_3/map_2/while/Identity"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map_2/while/map/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/TensorArrayStack_1/range/delta"
      op: "Const"
      input: "^cond_3/map_2/while/Identity"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map_2/while/map/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/TensorArrayStack_1/range"
      op: "Range"
      input: "cond_3/map_2/while/map/TensorArrayStack_1/range/start:output:0"
      input: "cond_3/map_2/while/map/TensorArrayStack_1/TensorArraySizeV3:size:0"
      input: "cond_3/map_2/while/map/TensorArrayStack_1/range/delta:output:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map_2/while/map/TensorArray_2"
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/map/TensorArrayStack_1/TensorArrayGatherV3"
      op: "TensorArrayGatherV3"
      input: "cond_3/map_2/while/map/TensorArray_2:handle:0"
      input: "cond_3/map_2/while/map/TensorArrayStack_1/range:output:0"
      input: "cond_3/map_2/while/map/while/Exit_3:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map_2/while/map/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/TensorArrayWrite/TensorArrayWriteV3"
      op: "TensorArrayWriteV3"
      input: "cond_3/map_2/while/TensorArrayWrite/TensorArrayWriteV3/Enter:output:0"
      input: "cond_3/map_2/while/Identity_1:output:0"
      input: "cond_3/map_2/while/map/TensorArrayStack/TensorArrayGatherV3:value:0"
      input: "cond_3/map_2/while/Identity_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map_2/while/map/TensorArray_1"
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
      op: "Enter"
      input: "cond_3/map_2/TensorArray_2:handle:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map_2/while/map/TensorArray_1"
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_3/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/TensorArrayWrite_1/TensorArrayWriteV3"
      op: "TensorArrayWriteV3"
      input: "cond_3/map_2/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter:output:0"
      input: "cond_3/map_2/while/Identity_1:output:0"
      input: "cond_3/map_2/while/map/TensorArrayStack_1/TensorArrayGatherV3:value:0"
      input: "cond_3/map_2/while/Identity_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map_2/while/map/TensorArray_2"
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
      op: "Enter"
      input: "cond_3/map_2/TensorArray_3:handle:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map_2/while/map/TensorArray_2"
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_3/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/add_1/y"
      op: "Const"
      input: "^cond_3/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/add_1"
      op: "Add"
      input: "cond_3/map_2/while/Identity_1:output:0"
      input: "cond_3/map_2/while/add_1/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/NextIteration"
      op: "NextIteration"
      input: "cond_3/map_2/while/add:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/NextIteration_1"
      op: "NextIteration"
      input: "cond_3/map_2/while/add_1:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/NextIteration_2"
      op: "NextIteration"
      input: "cond_3/map_2/while/TensorArrayWrite/TensorArrayWriteV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/NextIteration_3"
      op: "NextIteration"
      input: "cond_3/map_2/while/TensorArrayWrite_1/TensorArrayWriteV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/Exit"
      op: "Exit"
      input: "cond_3/map_2/while/Switch:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/Exit_1"
      op: "Exit"
      input: "cond_3/map_2/while/Switch_1:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/Exit_2"
      op: "Exit"
      input: "cond_3/map_2/while/Switch_2:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_3/map_2/while/Exit_3"
      op: "Exit"
      input: "cond_3/map_2/while/Switch_3:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_3/map_2/TensorArrayStack/TensorArraySizeV3"
      op: "TensorArraySizeV3"
      input: "cond_3/map_2/TensorArray_2:handle:0"
      input: "cond_3/map_2/while/Exit_2:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map_2/TensorArray_2"
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/TensorArrayStack/range/start"
      op: "Const"
      input: "^cond_3/switch_f"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map_2/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/TensorArrayStack/range/delta"
      op: "Const"
      input: "^cond_3/switch_f"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map_2/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/TensorArrayStack/range"
      op: "Range"
      input: "cond_3/map_2/TensorArrayStack/range/start:output:0"
      input: "cond_3/map_2/TensorArrayStack/TensorArraySizeV3:size:0"
      input: "cond_3/map_2/TensorArrayStack/range/delta:output:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map_2/TensorArray_2"
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/TensorArrayStack/TensorArrayGatherV3"
      op: "TensorArrayGatherV3"
      input: "cond_3/map_2/TensorArray_2:handle:0"
      input: "cond_3/map_2/TensorArrayStack/range:output:0"
      input: "cond_3/map_2/while/Exit_2:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map_2/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            dim {
              size: 10
            }
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/TensorArrayStack_1/TensorArraySizeV3"
      op: "TensorArraySizeV3"
      input: "cond_3/map_2/TensorArray_3:handle:0"
      input: "cond_3/map_2/while/Exit_3:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map_2/TensorArray_3"
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/TensorArrayStack_1/range/start"
      op: "Const"
      input: "^cond_3/switch_f"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map_2/TensorArray_3"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/TensorArrayStack_1/range/delta"
      op: "Const"
      input: "^cond_3/switch_f"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map_2/TensorArray_3"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/TensorArrayStack_1/range"
      op: "Range"
      input: "cond_3/map_2/TensorArrayStack_1/range/start:output:0"
      input: "cond_3/map_2/TensorArrayStack_1/TensorArraySizeV3:size:0"
      input: "cond_3/map_2/TensorArrayStack_1/range/delta:output:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map_2/TensorArray_3"
          }
        }
      }
    }
    node_def {
      name: "cond_3/map_2/TensorArrayStack_1/TensorArrayGatherV3"
      op: "TensorArrayGatherV3"
      input: "cond_3/map_2/TensorArray_3:handle:0"
      input: "cond_3/map_2/TensorArrayStack_1/range:output:0"
      input: "cond_3/map_2/while/Exit_3:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_3/map_2/TensorArray_3"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            dim {
              size: 10
            }
          }
        }
      }
    }
    node_def {
      name: "cond_3/transpose_1/a"
      op: "Pack"
      input: "cond_3/map_2/TensorArrayStack/TensorArrayGatherV3:value:0"
      input: "cond_3/map_2/TensorArrayStack_1/TensorArrayGatherV3:value:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "cond_3/transpose_1/perm"
      op: "Const"
      input: "^cond_3/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\002\000\000\000\001\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_3/transpose_1"
      op: "Transpose"
      input: "cond_3/transpose_1/a:output:0"
      input: "cond_3/transpose_1/perm:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/Reshape_2/shape"
      op: "Const"
      input: "^cond_3/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\004\001\000\000\002\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_3/Reshape_2"
      op: "Reshape"
      input: "cond_3/transpose_1:y:0"
      input: "cond_3/Reshape_2/shape:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_3/SparseTensor_1/values"
      op: "Const"
      input: "^cond_3/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 260
              }
            }
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
          }
        }
      }
    }
    node_def {
      name: "cond_3/SparseTensor_1/dense_shape"
      op: "Const"
      input: "^cond_3/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\032\000\000\000\000\000\000\000\270\013\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_3/SparseReorder"
      op: "SparseReorder"
      input: "cond_3/Reshape_2:output:0"
      input: "cond_3/SparseTensor_1/values:output:0"
      input: "cond_3/SparseTensor_1/dense_shape:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
    }
    node_def {
      name: "cond_3/SparseTensor_2/dense_shape"
      op: "Const"
      input: "^cond_3/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\032\000\000\000\000\000\000\000\270\013\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_3/SparseToDense_1/default_value"
      op: "Const"
      input: "^cond_3/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "0"
          }
        }
      }
    }
    node_def {
      name: "cond_3/SparseToDense_1"
      op: "SparseToDense"
      input: "cond_3/SparseReorder:output_indices:0"
      input: "cond_3/SparseTensor_2/dense_shape:output:0"
      input: "cond_3/SparseReorder:output_values:0"
      input: "cond_3/SparseToDense_1/default_value:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "cond_3/Merge"
      op: "Merge"
      input: "cond_3/SparseToDense_1:dense:0"
      input: "cond_3/SparseToDense:dense:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
    }
    node_def {
      name: "Const_4"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: ":"
          }
        }
      }
    }
    node_def {
      name: "StringSplit_4"
      op: "StringSplit"
      input: "DecodeCSV:output:4"
      input: "Const_4:output:0"
      device: "/device:CPU:0"
      attr {
        key: "skip_empty"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "Equal_4/x"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "d3"
          }
        }
      }
    }
    node_def {
      name: "Equal_4/y"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "w1"
          }
        }
      }
    }
    node_def {
      name: "Equal_4"
      op: "Equal"
      input: "Equal_4/x:output:0"
      input: "Equal_4/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
    }
    node_def {
      name: "cond_4/Switch"
      op: "Switch"
      input: "Equal_4:z:0"
      input: "Equal_4:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
    }
    node_def {
      name: "cond_4/switch_t"
      op: "Identity"
      input: "cond_4/Switch:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
    }
    node_def {
      name: "cond_4/switch_f"
      op: "Identity"
      input: "cond_4/Switch:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
    }
    node_def {
      name: "cond_4/pred_id"
      op: "Identity"
      input: "Equal_4:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
    }
    node_def {
      name: "cond_4/StringToNumber"
      op: "StringToNumber"
      input: "cond_4/StringToNumber/Switch:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "out_type"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_4/StringToNumber/Switch"
      op: "Switch"
      input: "StringSplit_4:values:0"
      input: "cond_4/pred_id:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@StringSplit_4"
          }
        }
      }
    }
    node_def {
      name: "cond_4/Reshape/shape"
      op: "Const"
      input: "^cond_4/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\032\000\000\000\002\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_4/Reshape"
      op: "Reshape"
      input: "cond_4/StringToNumber:output:0"
      input: "cond_4/Reshape/shape:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map/elem"
      op: "Const"
      input: "^cond_4/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 26
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\021\000\000\000\000\000\000\000\022\000\000\000\000\000\000\000\023\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\025\000\000\000\000\000\000\000\026\000\000\000\000\000\000\000\027\000\000\000\000\000\000\000\030\000\000\000\000\000\000\000\031\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_4/map/TensorArray/size"
      op: "Const"
      input: "^cond_4/switch_t"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_4/map/TensorArray"
      op: "TensorArrayV3"
      input: "cond_4/map/TensorArray/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_4/map/TensorArray_1/size"
      op: "Const"
      input: "^cond_4/switch_t"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_4/map/TensorArray_1"
      op: "TensorArrayV3"
      input: "cond_4/map/TensorArray_1/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_4/map/TensorArrayUnstack/Shape"
      op: "Const"
      input: "^cond_4/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_4/map/TensorArrayUnstack/strided_slice/stack"
      op: "Const"
      input: "^cond_4/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_4/map/TensorArrayUnstack/strided_slice/stack_1"
      op: "Const"
      input: "^cond_4/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_4/map/TensorArrayUnstack/strided_slice/stack_2"
      op: "Const"
      input: "^cond_4/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_4/map/TensorArrayUnstack/strided_slice"
      op: "StridedSlice"
      input: "cond_4/map/TensorArrayUnstack/Shape:output:0"
      input: "cond_4/map/TensorArrayUnstack/strided_slice/stack:output:0"
      input: "cond_4/map/TensorArrayUnstack/strided_slice/stack_1:output:0"
      input: "cond_4/map/TensorArrayUnstack/strided_slice/stack_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "cond_4/map/TensorArrayUnstack/range/start"
      op: "Const"
      input: "^cond_4/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_4/map/TensorArrayUnstack/range/delta"
      op: "Const"
      input: "^cond_4/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_4/map/TensorArrayUnstack/range"
      op: "Range"
      input: "cond_4/map/TensorArrayUnstack/range/start:output:0"
      input: "cond_4/map/TensorArrayUnstack/strided_slice:output:0"
      input: "cond_4/map/TensorArrayUnstack/range/delta:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
      op: "TensorArrayScatterV3"
      input: "cond_4/map/TensorArray:handle:0"
      input: "cond_4/map/TensorArrayUnstack/range:output:0"
      input: "cond_4/map/elem:output:0"
      input: "cond_4/map/TensorArray:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map/elem"
          }
        }
      }
    }
    node_def {
      name: "cond_4/map/TensorArrayUnstack_1/Shape"
      op: "Const"
      input: "^cond_4/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\032\000\000\000\002\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_4/map/TensorArrayUnstack_1/strided_slice/stack"
      op: "Const"
      input: "^cond_4/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_4/map/TensorArrayUnstack_1/strided_slice/stack_1"
      op: "Const"
      input: "^cond_4/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_4/map/TensorArrayUnstack_1/strided_slice/stack_2"
      op: "Const"
      input: "^cond_4/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_4/map/TensorArrayUnstack_1/strided_slice"
      op: "StridedSlice"
      input: "cond_4/map/TensorArrayUnstack_1/Shape:output:0"
      input: "cond_4/map/TensorArrayUnstack_1/strided_slice/stack:output:0"
      input: "cond_4/map/TensorArrayUnstack_1/strided_slice/stack_1:output:0"
      input: "cond_4/map/TensorArrayUnstack_1/strided_slice/stack_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "cond_4/map/TensorArrayUnstack_1/range/start"
      op: "Const"
      input: "^cond_4/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_4/map/TensorArrayUnstack_1/range/delta"
      op: "Const"
      input: "^cond_4/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_4/map/TensorArrayUnstack_1/range"
      op: "Range"
      input: "cond_4/map/TensorArrayUnstack_1/range/start:output:0"
      input: "cond_4/map/TensorArrayUnstack_1/strided_slice:output:0"
      input: "cond_4/map/TensorArrayUnstack_1/range/delta:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
      op: "TensorArrayScatterV3"
      input: "cond_4/map/TensorArray_1:handle:0"
      input: "cond_4/map/TensorArrayUnstack_1/range:output:0"
      input: "cond_4/Reshape:output:0"
      input: "cond_4/map/TensorArray_1:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/Reshape"
          }
        }
      }
    }
    node_def {
      name: "cond_4/map/Const"
      op: "Const"
      input: "^cond_4/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_4/map/TensorArray_2/size"
      op: "Const"
      input: "^cond_4/switch_t"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_4/map/TensorArray_2"
      op: "TensorArrayV3"
      input: "cond_4/map/TensorArray_2/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_4/map/TensorArray_3/size"
      op: "Const"
      input: "^cond_4/switch_t"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_4/map/TensorArray_3"
      op: "TensorArrayV3"
      input: "cond_4/map/TensorArray_3/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_4/map/while/maximum_iterations"
      op: "Const"
      input: "^cond_4/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_4/map/while/iteration_counter"
      op: "Const"
      input: "^cond_4/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_4/map/while/Enter"
      op: "Enter"
      input: "cond_4/map/while/iteration_counter:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_4/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_4/map/while/Enter_1"
      op: "Enter"
      input: "cond_4/map/Const:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_4/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_4/map/while/Enter_2"
      op: "Enter"
      input: "cond_4/map/TensorArray_2:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_4/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_4/map/while/Enter_3"
      op: "Enter"
      input: "cond_4/map/TensorArray_3:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_4/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_4/map/while/Merge"
      op: "Merge"
      input: "cond_4/map/while/Enter:output:0"
      input: "cond_4/map/while/NextIteration:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map/while/Merge_1"
      op: "Merge"
      input: "cond_4/map/while/Enter_1:output:0"
      input: "cond_4/map/while/NextIteration_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map/while/Merge_2"
      op: "Merge"
      input: "cond_4/map/while/Enter_2:output:0"
      input: "cond_4/map/while/NextIteration_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_4/map/while/Merge_3"
      op: "Merge"
      input: "cond_4/map/while/Enter_3:output:0"
      input: "cond_4/map/while/NextIteration_3:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_4/map/while/Less"
      op: "Less"
      input: "cond_4/map/while/Merge:output:0"
      input: "cond_4/map/while/Less/Enter:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map/while/Less/Enter"
      op: "Enter"
      input: "cond_4/map/while/maximum_iterations:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_4/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_4/map/while/Less_1/y"
      op: "Const"
      input: "^cond_4/map/while/Merge"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_4/map/while/Less_1"
      op: "Less"
      input: "cond_4/map/while/Merge_1:output:0"
      input: "cond_4/map/while/Less_1/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map/while/LogicalAnd"
      op: "LogicalAnd"
      input: "cond_4/map/while/Less:z:0"
      input: "cond_4/map/while/Less_1:z:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "cond_4/map/while/LoopCond"
      op: "LoopCond"
      input: "cond_4/map/while/LogicalAnd:z:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "cond_4/map/while/Switch"
      op: "Switch"
      input: "cond_4/map/while/Merge:output:0"
      input: "cond_4/map/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map/while/Merge"
          }
        }
      }
    }
    node_def {
      name: "cond_4/map/while/Switch_1"
      op: "Switch"
      input: "cond_4/map/while/Merge_1:output:0"
      input: "cond_4/map/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map/while/Merge_1"
          }
        }
      }
    }
    node_def {
      name: "cond_4/map/while/Switch_2"
      op: "Switch"
      input: "cond_4/map/while/Merge_2:output:0"
      input: "cond_4/map/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map/while/Merge_2"
          }
        }
      }
    }
    node_def {
      name: "cond_4/map/while/Switch_3"
      op: "Switch"
      input: "cond_4/map/while/Merge_3:output:0"
      input: "cond_4/map/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map/while/Merge_3"
          }
        }
      }
    }
    node_def {
      name: "cond_4/map/while/Identity"
      op: "Identity"
      input: "cond_4/map/while/Switch:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map/while/Identity_1"
      op: "Identity"
      input: "cond_4/map/while/Switch_1:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map/while/Identity_2"
      op: "Identity"
      input: "cond_4/map/while/Switch_2:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_4/map/while/Identity_3"
      op: "Identity"
      input: "cond_4/map/while/Switch_3:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_4/map/while/add/y"
      op: "Const"
      input: "^cond_4/map/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_4/map/while/add"
      op: "Add"
      input: "cond_4/map/while/Identity:output:0"
      input: "cond_4/map/while/add/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map/while/TensorArrayReadV3"
      op: "TensorArrayReadV3"
      input: "cond_4/map/while/TensorArrayReadV3/Enter:output:0"
      input: "cond_4/map/while/Identity_1:output:0"
      input: "cond_4/map/while/TensorArrayReadV3/Enter_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
    }
    node_def {
      name: "cond_4/map/while/TensorArrayReadV3/Enter"
      op: "Enter"
      input: "cond_4/map/TensorArray:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_4/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_4/map/while/TensorArrayReadV3/Enter_1"
      op: "Enter"
      input: "cond_4/map/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_4/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_4/map/while/TensorArrayReadV3_1"
      op: "TensorArrayReadV3"
      input: "cond_4/map/while/TensorArrayReadV3_1/Enter:output:0"
      input: "cond_4/map/while/Identity_1:output:0"
      input: "cond_4/map/while/TensorArrayReadV3_1/Enter_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_4/map/while/TensorArrayReadV3_1/Enter"
      op: "Enter"
      input: "cond_4/map/TensorArray_1:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_4/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_4/map/while/TensorArrayReadV3_1/Enter_1"
      op: "Enter"
      input: "cond_4/map/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_4/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_4/map/while/strided_slice/stack"
      op: "Const"
      input: "^cond_4/map/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_4/map/while/strided_slice/stack_1"
      op: "Const"
      input: "^cond_4/map/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_4/map/while/strided_slice/stack_2"
      op: "Const"
      input: "^cond_4/map/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_4/map/while/strided_slice"
      op: "StridedSlice"
      input: "cond_4/map/while/TensorArrayReadV3_1:value:0"
      input: "cond_4/map/while/strided_slice/stack:output:0"
      input: "cond_4/map/while/strided_slice/stack_1:output:0"
      input: "cond_4/map/while/strided_slice/stack_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "cond_4/map/while/ToInt64"
      op: "Cast"
      input: "cond_4/map/while/strided_slice:output:0"
      device: "/device:CPU:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "cond_4/map/while/TensorArrayWrite/TensorArrayWriteV3"
      op: "TensorArrayWriteV3"
      input: "cond_4/map/while/TensorArrayWrite/TensorArrayWriteV3/Enter:output:0"
      input: "cond_4/map/while/Identity_1:output:0"
      input: "cond_4/map/while/TensorArrayReadV3:value:0"
      input: "cond_4/map/while/Identity_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map/while/TensorArrayReadV3"
          }
        }
      }
    }
    node_def {
      name: "cond_4/map/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
      op: "Enter"
      input: "cond_4/map/TensorArray_2:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map/while/TensorArrayReadV3"
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_4/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_4/map/while/TensorArrayWrite_1/TensorArrayWriteV3"
      op: "TensorArrayWriteV3"
      input: "cond_4/map/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter:output:0"
      input: "cond_4/map/while/Identity_1:output:0"
      input: "cond_4/map/while/ToInt64:y:0"
      input: "cond_4/map/while/Identity_3:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map/while/ToInt64"
          }
        }
      }
    }
    node_def {
      name: "cond_4/map/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
      op: "Enter"
      input: "cond_4/map/TensorArray_3:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map/while/ToInt64"
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_4/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_4/map/while/add_1/y"
      op: "Const"
      input: "^cond_4/map/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_4/map/while/add_1"
      op: "Add"
      input: "cond_4/map/while/Identity_1:output:0"
      input: "cond_4/map/while/add_1/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map/while/NextIteration"
      op: "NextIteration"
      input: "cond_4/map/while/add:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map/while/NextIteration_1"
      op: "NextIteration"
      input: "cond_4/map/while/add_1:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map/while/NextIteration_2"
      op: "NextIteration"
      input: "cond_4/map/while/TensorArrayWrite/TensorArrayWriteV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_4/map/while/NextIteration_3"
      op: "NextIteration"
      input: "cond_4/map/while/TensorArrayWrite_1/TensorArrayWriteV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_4/map/while/Exit"
      op: "Exit"
      input: "cond_4/map/while/Switch:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map/while/Exit_1"
      op: "Exit"
      input: "cond_4/map/while/Switch_1:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map/while/Exit_2"
      op: "Exit"
      input: "cond_4/map/while/Switch_2:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_4/map/while/Exit_3"
      op: "Exit"
      input: "cond_4/map/while/Switch_3:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_4/map/TensorArrayStack/TensorArraySizeV3"
      op: "TensorArraySizeV3"
      input: "cond_4/map/TensorArray_2:handle:0"
      input: "cond_4/map/while/Exit_2:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map/TensorArray_2"
          }
        }
      }
    }
    node_def {
      name: "cond_4/map/TensorArrayStack/range/start"
      op: "Const"
      input: "^cond_4/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_4/map/TensorArrayStack/range/delta"
      op: "Const"
      input: "^cond_4/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_4/map/TensorArrayStack/range"
      op: "Range"
      input: "cond_4/map/TensorArrayStack/range/start:output:0"
      input: "cond_4/map/TensorArrayStack/TensorArraySizeV3:size:0"
      input: "cond_4/map/TensorArrayStack/range/delta:output:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map/TensorArray_2"
          }
        }
      }
    }
    node_def {
      name: "cond_4/map/TensorArrayStack/TensorArrayGatherV3"
      op: "TensorArrayGatherV3"
      input: "cond_4/map/TensorArray_2:handle:0"
      input: "cond_4/map/TensorArrayStack/range:output:0"
      input: "cond_4/map/while/Exit_2:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
          }
        }
      }
    }
    node_def {
      name: "cond_4/map/TensorArrayStack_1/TensorArraySizeV3"
      op: "TensorArraySizeV3"
      input: "cond_4/map/TensorArray_3:handle:0"
      input: "cond_4/map/while/Exit_3:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map/TensorArray_3"
          }
        }
      }
    }
    node_def {
      name: "cond_4/map/TensorArrayStack_1/range/start"
      op: "Const"
      input: "^cond_4/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map/TensorArray_3"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_4/map/TensorArrayStack_1/range/delta"
      op: "Const"
      input: "^cond_4/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map/TensorArray_3"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_4/map/TensorArrayStack_1/range"
      op: "Range"
      input: "cond_4/map/TensorArrayStack_1/range/start:output:0"
      input: "cond_4/map/TensorArrayStack_1/TensorArraySizeV3:size:0"
      input: "cond_4/map/TensorArrayStack_1/range/delta:output:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map/TensorArray_3"
          }
        }
      }
    }
    node_def {
      name: "cond_4/map/TensorArrayStack_1/TensorArrayGatherV3"
      op: "TensorArrayGatherV3"
      input: "cond_4/map/TensorArray_3:handle:0"
      input: "cond_4/map/TensorArrayStack_1/range:output:0"
      input: "cond_4/map/while/Exit_3:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map/TensorArray_3"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
          }
        }
      }
    }
    node_def {
      name: "cond_4/transpose/a"
      op: "Pack"
      input: "cond_4/map/TensorArrayStack/TensorArrayGatherV3:value:0"
      input: "cond_4/map/TensorArrayStack_1/TensorArrayGatherV3:value:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "cond_4/transpose/perm"
      op: "Const"
      input: "^cond_4/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_4/transpose"
      op: "Transpose"
      input: "cond_4/transpose/a:output:0"
      input: "cond_4/transpose/perm:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/AsString"
      op: "AsString"
      input: "cond_4/Reshape:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "fill"
        value {
          s: ""
        }
      }
      attr {
        key: "precision"
        value {
          i: -1
        }
      }
      attr {
        key: "scientific"
        value {
          b: false
        }
      }
      attr {
        key: "shortest"
        value {
          b: false
        }
      }
      attr {
        key: "width"
        value {
          i: -1
        }
      }
    }
    node_def {
      name: "cond_4/map_1/TensorArray/size"
      op: "Const"
      input: "^cond_4/switch_t"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_1/TensorArray"
      op: "TensorArrayV3"
      input: "cond_4/map_1/TensorArray/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_4/map_1/TensorArrayUnstack/Shape"
      op: "Const"
      input: "^cond_4/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\032\000\000\000\002\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_1/TensorArrayUnstack/strided_slice/stack"
      op: "Const"
      input: "^cond_4/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_1/TensorArrayUnstack/strided_slice/stack_1"
      op: "Const"
      input: "^cond_4/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_1/TensorArrayUnstack/strided_slice/stack_2"
      op: "Const"
      input: "^cond_4/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_1/TensorArrayUnstack/strided_slice"
      op: "StridedSlice"
      input: "cond_4/map_1/TensorArrayUnstack/Shape:output:0"
      input: "cond_4/map_1/TensorArrayUnstack/strided_slice/stack:output:0"
      input: "cond_4/map_1/TensorArrayUnstack/strided_slice/stack_1:output:0"
      input: "cond_4/map_1/TensorArrayUnstack/strided_slice/stack_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "cond_4/map_1/TensorArrayUnstack/range/start"
      op: "Const"
      input: "^cond_4/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_1/TensorArrayUnstack/range/delta"
      op: "Const"
      input: "^cond_4/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_1/TensorArrayUnstack/range"
      op: "Range"
      input: "cond_4/map_1/TensorArrayUnstack/range/start:output:0"
      input: "cond_4/map_1/TensorArrayUnstack/strided_slice:output:0"
      input: "cond_4/map_1/TensorArrayUnstack/range/delta:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
      op: "TensorArrayScatterV3"
      input: "cond_4/map_1/TensorArray:handle:0"
      input: "cond_4/map_1/TensorArrayUnstack/range:output:0"
      input: "cond_4/AsString:output:0"
      input: "cond_4/map_1/TensorArray:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/AsString"
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_1/Const"
      op: "Const"
      input: "^cond_4/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_1/TensorArray_1/size"
      op: "Const"
      input: "^cond_4/switch_t"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_1/TensorArray_1"
      op: "TensorArrayV3"
      input: "cond_4/map_1/TensorArray_1/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_4/map_1/while/maximum_iterations"
      op: "Const"
      input: "^cond_4/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_1/while/iteration_counter"
      op: "Const"
      input: "^cond_4/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_1/while/Enter"
      op: "Enter"
      input: "cond_4/map_1/while/iteration_counter:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_4/map_1/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_4/map_1/while/Enter_1"
      op: "Enter"
      input: "cond_4/map_1/Const:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_4/map_1/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_4/map_1/while/Enter_2"
      op: "Enter"
      input: "cond_4/map_1/TensorArray_1:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_4/map_1/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_4/map_1/while/Merge"
      op: "Merge"
      input: "cond_4/map_1/while/Enter:output:0"
      input: "cond_4/map_1/while/NextIteration:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map_1/while/Merge_1"
      op: "Merge"
      input: "cond_4/map_1/while/Enter_1:output:0"
      input: "cond_4/map_1/while/NextIteration_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map_1/while/Merge_2"
      op: "Merge"
      input: "cond_4/map_1/while/Enter_2:output:0"
      input: "cond_4/map_1/while/NextIteration_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_4/map_1/while/Less"
      op: "Less"
      input: "cond_4/map_1/while/Merge:output:0"
      input: "cond_4/map_1/while/Less/Enter:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map_1/while/Less/Enter"
      op: "Enter"
      input: "cond_4/map_1/while/maximum_iterations:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_4/map_1/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_4/map_1/while/Less_1/y"
      op: "Const"
      input: "^cond_4/map_1/while/Merge"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_1/while/Less_1"
      op: "Less"
      input: "cond_4/map_1/while/Merge_1:output:0"
      input: "cond_4/map_1/while/Less_1/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map_1/while/LogicalAnd"
      op: "LogicalAnd"
      input: "cond_4/map_1/while/Less:z:0"
      input: "cond_4/map_1/while/Less_1:z:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "cond_4/map_1/while/LoopCond"
      op: "LoopCond"
      input: "cond_4/map_1/while/LogicalAnd:z:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "cond_4/map_1/while/Switch"
      op: "Switch"
      input: "cond_4/map_1/while/Merge:output:0"
      input: "cond_4/map_1/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map_1/while/Merge"
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_1/while/Switch_1"
      op: "Switch"
      input: "cond_4/map_1/while/Merge_1:output:0"
      input: "cond_4/map_1/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map_1/while/Merge_1"
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_1/while/Switch_2"
      op: "Switch"
      input: "cond_4/map_1/while/Merge_2:output:0"
      input: "cond_4/map_1/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map_1/while/Merge_2"
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_1/while/Identity"
      op: "Identity"
      input: "cond_4/map_1/while/Switch:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map_1/while/Identity_1"
      op: "Identity"
      input: "cond_4/map_1/while/Switch_1:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map_1/while/Identity_2"
      op: "Identity"
      input: "cond_4/map_1/while/Switch_2:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_4/map_1/while/add/y"
      op: "Const"
      input: "^cond_4/map_1/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_1/while/add"
      op: "Add"
      input: "cond_4/map_1/while/Identity:output:0"
      input: "cond_4/map_1/while/add/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map_1/while/TensorArrayReadV3"
      op: "TensorArrayReadV3"
      input: "cond_4/map_1/while/TensorArrayReadV3/Enter:output:0"
      input: "cond_4/map_1/while/Identity_1:output:0"
      input: "cond_4/map_1/while/TensorArrayReadV3/Enter_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
    }
    node_def {
      name: "cond_4/map_1/while/TensorArrayReadV3/Enter"
      op: "Enter"
      input: "cond_4/map_1/TensorArray:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_4/map_1/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_4/map_1/while/TensorArrayReadV3/Enter_1"
      op: "Enter"
      input: "cond_4/map_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_4/map_1/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_4/map_1/while/strided_slice/stack"
      op: "Const"
      input: "^cond_4/map_1/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_1/while/strided_slice/stack_1"
      op: "Const"
      input: "^cond_4/map_1/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_1/while/strided_slice/stack_2"
      op: "Const"
      input: "^cond_4/map_1/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_1/while/strided_slice"
      op: "StridedSlice"
      input: "cond_4/map_1/while/TensorArrayReadV3:value:0"
      input: "cond_4/map_1/while/strided_slice/stack:output:0"
      input: "cond_4/map_1/while/strided_slice/stack_1:output:0"
      input: "cond_4/map_1/while/strided_slice/stack_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "cond_4/map_1/while/TensorArrayWrite/TensorArrayWriteV3"
      op: "TensorArrayWriteV3"
      input: "cond_4/map_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter:output:0"
      input: "cond_4/map_1/while/Identity_1:output:0"
      input: "cond_4/map_1/while/strided_slice:output:0"
      input: "cond_4/map_1/while/Identity_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map_1/while/strided_slice"
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
      op: "Enter"
      input: "cond_4/map_1/TensorArray_1:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map_1/while/strided_slice"
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_4/map_1/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_4/map_1/while/add_1/y"
      op: "Const"
      input: "^cond_4/map_1/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_1/while/add_1"
      op: "Add"
      input: "cond_4/map_1/while/Identity_1:output:0"
      input: "cond_4/map_1/while/add_1/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map_1/while/NextIteration"
      op: "NextIteration"
      input: "cond_4/map_1/while/add:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map_1/while/NextIteration_1"
      op: "NextIteration"
      input: "cond_4/map_1/while/add_1:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map_1/while/NextIteration_2"
      op: "NextIteration"
      input: "cond_4/map_1/while/TensorArrayWrite/TensorArrayWriteV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_4/map_1/while/Exit"
      op: "Exit"
      input: "cond_4/map_1/while/Switch:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map_1/while/Exit_1"
      op: "Exit"
      input: "cond_4/map_1/while/Switch_1:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map_1/while/Exit_2"
      op: "Exit"
      input: "cond_4/map_1/while/Switch_2:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_4/map_1/TensorArrayStack/TensorArraySizeV3"
      op: "TensorArraySizeV3"
      input: "cond_4/map_1/TensorArray_1:handle:0"
      input: "cond_4/map_1/while/Exit_2:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map_1/TensorArray_1"
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_1/TensorArrayStack/range/start"
      op: "Const"
      input: "^cond_4/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map_1/TensorArray_1"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_1/TensorArrayStack/range/delta"
      op: "Const"
      input: "^cond_4/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map_1/TensorArray_1"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_1/TensorArrayStack/range"
      op: "Range"
      input: "cond_4/map_1/TensorArrayStack/range/start:output:0"
      input: "cond_4/map_1/TensorArrayStack/TensorArraySizeV3:size:0"
      input: "cond_4/map_1/TensorArrayStack/range/delta:output:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map_1/TensorArray_1"
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_1/TensorArrayStack/TensorArrayGatherV3"
      op: "TensorArrayGatherV3"
      input: "cond_4/map_1/TensorArray_1:handle:0"
      input: "cond_4/map_1/TensorArrayStack/range:output:0"
      input: "cond_4/map_1/while/Exit_2:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map_1/TensorArray_1"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
          }
        }
      }
    }
    node_def {
      name: "cond_4/SparseTensor/dense_shape"
      op: "Const"
      input: "^cond_4/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\032\000\000\000\000\000\000\000d\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_4/SparseToDense/default_value"
      op: "Const"
      input: "^cond_4/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "0"
          }
        }
      }
    }
    node_def {
      name: "cond_4/SparseToDense"
      op: "SparseToDense"
      input: "cond_4/transpose:y:0"
      input: "cond_4/SparseTensor/dense_shape:output:0"
      input: "cond_4/map_1/TensorArrayStack/TensorArrayGatherV3:value:0"
      input: "cond_4/SparseToDense/default_value:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "cond_4/StringToNumber_1"
      op: "StringToNumber"
      input: "cond_4/StringToNumber_1/Switch:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "out_type"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_4/StringToNumber_1/Switch"
      op: "Switch"
      input: "StringSplit_4:values:0"
      input: "cond_4/pred_id:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@StringSplit_4"
          }
        }
      }
    }
    node_def {
      name: "cond_4/Cast"
      op: "Cast"
      input: "cond_4/StringToNumber_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "cond_4/Reshape_1/shape"
      op: "Const"
      input: "^cond_4/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\032\000\000\000\n\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_4/Reshape_1"
      op: "Reshape"
      input: "cond_4/Cast:y:0"
      input: "cond_4/Reshape_1/shape:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map_2/elem"
      op: "Const"
      input: "^cond_4/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 26
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\021\000\000\000\000\000\000\000\022\000\000\000\000\000\000\000\023\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\025\000\000\000\000\000\000\000\026\000\000\000\000\000\000\000\027\000\000\000\000\000\000\000\030\000\000\000\000\000\000\000\031\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/TensorArray/size"
      op: "Const"
      input: "^cond_4/switch_f"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/TensorArray"
      op: "TensorArrayV3"
      input: "cond_4/map_2/TensorArray/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_4/map_2/TensorArray_1/size"
      op: "Const"
      input: "^cond_4/switch_f"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/TensorArray_1"
      op: "TensorArrayV3"
      input: "cond_4/map_2/TensorArray_1/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_4/map_2/TensorArrayUnstack/Shape"
      op: "Const"
      input: "^cond_4/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/TensorArrayUnstack/strided_slice/stack"
      op: "Const"
      input: "^cond_4/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/TensorArrayUnstack/strided_slice/stack_1"
      op: "Const"
      input: "^cond_4/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/TensorArrayUnstack/strided_slice/stack_2"
      op: "Const"
      input: "^cond_4/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/TensorArrayUnstack/strided_slice"
      op: "StridedSlice"
      input: "cond_4/map_2/TensorArrayUnstack/Shape:output:0"
      input: "cond_4/map_2/TensorArrayUnstack/strided_slice/stack:output:0"
      input: "cond_4/map_2/TensorArrayUnstack/strided_slice/stack_1:output:0"
      input: "cond_4/map_2/TensorArrayUnstack/strided_slice/stack_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "cond_4/map_2/TensorArrayUnstack/range/start"
      op: "Const"
      input: "^cond_4/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/TensorArrayUnstack/range/delta"
      op: "Const"
      input: "^cond_4/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/TensorArrayUnstack/range"
      op: "Range"
      input: "cond_4/map_2/TensorArrayUnstack/range/start:output:0"
      input: "cond_4/map_2/TensorArrayUnstack/strided_slice:output:0"
      input: "cond_4/map_2/TensorArrayUnstack/range/delta:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
      op: "TensorArrayScatterV3"
      input: "cond_4/map_2/TensorArray:handle:0"
      input: "cond_4/map_2/TensorArrayUnstack/range:output:0"
      input: "cond_4/map_2/elem:output:0"
      input: "cond_4/map_2/TensorArray:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map_2/elem"
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/TensorArrayUnstack_1/Shape"
      op: "Const"
      input: "^cond_4/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\032\000\000\000\n\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/TensorArrayUnstack_1/strided_slice/stack"
      op: "Const"
      input: "^cond_4/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/TensorArrayUnstack_1/strided_slice/stack_1"
      op: "Const"
      input: "^cond_4/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/TensorArrayUnstack_1/strided_slice/stack_2"
      op: "Const"
      input: "^cond_4/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/TensorArrayUnstack_1/strided_slice"
      op: "StridedSlice"
      input: "cond_4/map_2/TensorArrayUnstack_1/Shape:output:0"
      input: "cond_4/map_2/TensorArrayUnstack_1/strided_slice/stack:output:0"
      input: "cond_4/map_2/TensorArrayUnstack_1/strided_slice/stack_1:output:0"
      input: "cond_4/map_2/TensorArrayUnstack_1/strided_slice/stack_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "cond_4/map_2/TensorArrayUnstack_1/range/start"
      op: "Const"
      input: "^cond_4/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/TensorArrayUnstack_1/range/delta"
      op: "Const"
      input: "^cond_4/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/TensorArrayUnstack_1/range"
      op: "Range"
      input: "cond_4/map_2/TensorArrayUnstack_1/range/start:output:0"
      input: "cond_4/map_2/TensorArrayUnstack_1/strided_slice:output:0"
      input: "cond_4/map_2/TensorArrayUnstack_1/range/delta:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map_2/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
      op: "TensorArrayScatterV3"
      input: "cond_4/map_2/TensorArray_1:handle:0"
      input: "cond_4/map_2/TensorArrayUnstack_1/range:output:0"
      input: "cond_4/Reshape_1:output:0"
      input: "cond_4/map_2/TensorArray_1:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/Reshape_1"
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/Const"
      op: "Const"
      input: "^cond_4/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/TensorArray_2/size"
      op: "Const"
      input: "^cond_4/switch_f"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/TensorArray_2"
      op: "TensorArrayV3"
      input: "cond_4/map_2/TensorArray_2/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_4/map_2/TensorArray_3/size"
      op: "Const"
      input: "^cond_4/switch_f"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/TensorArray_3"
      op: "TensorArrayV3"
      input: "cond_4/map_2/TensorArray_3/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/maximum_iterations"
      op: "Const"
      input: "^cond_4/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/iteration_counter"
      op: "Const"
      input: "^cond_4/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/Enter"
      op: "Enter"
      input: "cond_4/map_2/while/iteration_counter:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_4/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/Enter_1"
      op: "Enter"
      input: "cond_4/map_2/Const:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_4/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/Enter_2"
      op: "Enter"
      input: "cond_4/map_2/TensorArray_2:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_4/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/Enter_3"
      op: "Enter"
      input: "cond_4/map_2/TensorArray_3:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_4/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/Merge"
      op: "Merge"
      input: "cond_4/map_2/while/Enter:output:0"
      input: "cond_4/map_2/while/NextIteration:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/Merge_1"
      op: "Merge"
      input: "cond_4/map_2/while/Enter_1:output:0"
      input: "cond_4/map_2/while/NextIteration_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/Merge_2"
      op: "Merge"
      input: "cond_4/map_2/while/Enter_2:output:0"
      input: "cond_4/map_2/while/NextIteration_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/Merge_3"
      op: "Merge"
      input: "cond_4/map_2/while/Enter_3:output:0"
      input: "cond_4/map_2/while/NextIteration_3:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/Less"
      op: "Less"
      input: "cond_4/map_2/while/Merge:output:0"
      input: "cond_4/map_2/while/Less/Enter:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/Less/Enter"
      op: "Enter"
      input: "cond_4/map_2/while/maximum_iterations:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_4/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/Less_1/y"
      op: "Const"
      input: "^cond_4/map_2/while/Merge"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/Less_1"
      op: "Less"
      input: "cond_4/map_2/while/Merge_1:output:0"
      input: "cond_4/map_2/while/Less_1/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/LogicalAnd"
      op: "LogicalAnd"
      input: "cond_4/map_2/while/Less:z:0"
      input: "cond_4/map_2/while/Less_1:z:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "cond_4/map_2/while/LoopCond"
      op: "LoopCond"
      input: "cond_4/map_2/while/LogicalAnd:z:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "cond_4/map_2/while/Switch"
      op: "Switch"
      input: "cond_4/map_2/while/Merge:output:0"
      input: "cond_4/map_2/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map_2/while/Merge"
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/Switch_1"
      op: "Switch"
      input: "cond_4/map_2/while/Merge_1:output:0"
      input: "cond_4/map_2/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map_2/while/Merge_1"
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/Switch_2"
      op: "Switch"
      input: "cond_4/map_2/while/Merge_2:output:0"
      input: "cond_4/map_2/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map_2/while/Merge_2"
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/Switch_3"
      op: "Switch"
      input: "cond_4/map_2/while/Merge_3:output:0"
      input: "cond_4/map_2/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map_2/while/Merge_3"
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/Identity"
      op: "Identity"
      input: "cond_4/map_2/while/Switch:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/Identity_1"
      op: "Identity"
      input: "cond_4/map_2/while/Switch_1:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/Identity_2"
      op: "Identity"
      input: "cond_4/map_2/while/Switch_2:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/Identity_3"
      op: "Identity"
      input: "cond_4/map_2/while/Switch_3:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/add/y"
      op: "Const"
      input: "^cond_4/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/add"
      op: "Add"
      input: "cond_4/map_2/while/Identity:output:0"
      input: "cond_4/map_2/while/add/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/TensorArrayReadV3"
      op: "TensorArrayReadV3"
      input: "cond_4/map_2/while/TensorArrayReadV3/Enter:output:0"
      input: "cond_4/map_2/while/Identity_1:output:0"
      input: "cond_4/map_2/while/TensorArrayReadV3/Enter_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/TensorArrayReadV3/Enter"
      op: "Enter"
      input: "cond_4/map_2/TensorArray:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_4/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/TensorArrayReadV3/Enter_1"
      op: "Enter"
      input: "cond_4/map_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_4/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/TensorArrayReadV3_1"
      op: "TensorArrayReadV3"
      input: "cond_4/map_2/while/TensorArrayReadV3_1/Enter:output:0"
      input: "cond_4/map_2/while/Identity_1:output:0"
      input: "cond_4/map_2/while/TensorArrayReadV3_1/Enter_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/TensorArrayReadV3_1/Enter"
      op: "Enter"
      input: "cond_4/map_2/TensorArray_1:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_4/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/TensorArrayReadV3_1/Enter_1"
      op: "Enter"
      input: "cond_4/map_2/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_4/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/TensorArray/size"
      op: "Const"
      input: "^cond_4/map_2/while/Identity"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 10
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/TensorArray"
      op: "TensorArrayV3"
      input: "cond_4/map_2/while/map/TensorArray/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/TensorArrayUnstack/Shape"
      op: "Const"
      input: "^cond_4/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 10
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/TensorArrayUnstack/strided_slice/stack"
      op: "Const"
      input: "^cond_4/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/TensorArrayUnstack/strided_slice/stack_1"
      op: "Const"
      input: "^cond_4/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/TensorArrayUnstack/strided_slice/stack_2"
      op: "Const"
      input: "^cond_4/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/TensorArrayUnstack/strided_slice"
      op: "StridedSlice"
      input: "cond_4/map_2/while/map/TensorArrayUnstack/Shape:output:0"
      input: "cond_4/map_2/while/map/TensorArrayUnstack/strided_slice/stack:output:0"
      input: "cond_4/map_2/while/map/TensorArrayUnstack/strided_slice/stack_1:output:0"
      input: "cond_4/map_2/while/map/TensorArrayUnstack/strided_slice/stack_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/TensorArrayUnstack/range/start"
      op: "Const"
      input: "^cond_4/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/TensorArrayUnstack/range/delta"
      op: "Const"
      input: "^cond_4/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/TensorArrayUnstack/range"
      op: "Range"
      input: "cond_4/map_2/while/map/TensorArrayUnstack/range/start:output:0"
      input: "cond_4/map_2/while/map/TensorArrayUnstack/strided_slice:output:0"
      input: "cond_4/map_2/while/map/TensorArrayUnstack/range/delta:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
      op: "TensorArrayScatterV3"
      input: "cond_4/map_2/while/map/TensorArray:handle:0"
      input: "cond_4/map_2/while/map/TensorArrayUnstack/range:output:0"
      input: "cond_4/map_2/while/TensorArrayReadV3_1:value:0"
      input: "cond_4/map_2/while/map/TensorArray:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map_2/while/TensorArrayReadV3_1"
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/Const"
      op: "Const"
      input: "^cond_4/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/TensorArray_1/size"
      op: "Const"
      input: "^cond_4/map_2/while/Identity"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 10
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/TensorArray_1"
      op: "TensorArrayV3"
      input: "cond_4/map_2/while/map/TensorArray_1/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/TensorArray_2/size"
      op: "Const"
      input: "^cond_4/map_2/while/Identity"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 10
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/TensorArray_2"
      op: "TensorArrayV3"
      input: "cond_4/map_2/while/map/TensorArray_2/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/while/maximum_iterations"
      op: "Const"
      input: "^cond_4/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 10
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/while/iteration_counter"
      op: "Const"
      input: "^cond_4/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/while/Enter"
      op: "Enter"
      input: "cond_4/map_2/while/map/while/iteration_counter:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_4/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/while/Enter_1"
      op: "Enter"
      input: "cond_4/map_2/while/map/Const:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_4/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/while/Enter_2"
      op: "Enter"
      input: "cond_4/map_2/while/map/TensorArray_1:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_4/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/while/Enter_3"
      op: "Enter"
      input: "cond_4/map_2/while/map/TensorArray_2:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_4/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/while/Merge"
      op: "Merge"
      input: "cond_4/map_2/while/map/while/Enter:output:0"
      input: "cond_4/map_2/while/map/while/NextIteration:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/while/Merge_1"
      op: "Merge"
      input: "cond_4/map_2/while/map/while/Enter_1:output:0"
      input: "cond_4/map_2/while/map/while/NextIteration_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/while/Merge_2"
      op: "Merge"
      input: "cond_4/map_2/while/map/while/Enter_2:output:0"
      input: "cond_4/map_2/while/map/while/NextIteration_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/while/Merge_3"
      op: "Merge"
      input: "cond_4/map_2/while/map/while/Enter_3:output:0"
      input: "cond_4/map_2/while/map/while/NextIteration_3:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/while/Less"
      op: "Less"
      input: "cond_4/map_2/while/map/while/Merge:output:0"
      input: "cond_4/map_2/while/map/while/Less/Enter:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/while/Less/Enter"
      op: "Enter"
      input: "cond_4/map_2/while/map/while/maximum_iterations:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_4/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/while/Less_1/y"
      op: "Const"
      input: "^cond_4/map_2/while/map/while/Merge"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 10
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/while/Less_1"
      op: "Less"
      input: "cond_4/map_2/while/map/while/Merge_1:output:0"
      input: "cond_4/map_2/while/map/while/Less_1/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/while/LogicalAnd"
      op: "LogicalAnd"
      input: "cond_4/map_2/while/map/while/Less:z:0"
      input: "cond_4/map_2/while/map/while/Less_1:z:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "cond_4/map_2/while/map/while/LoopCond"
      op: "LoopCond"
      input: "cond_4/map_2/while/map/while/LogicalAnd:z:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "cond_4/map_2/while/map/while/Switch"
      op: "Switch"
      input: "cond_4/map_2/while/map/while/Merge:output:0"
      input: "cond_4/map_2/while/map/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map_2/while/map/while/Merge"
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/while/Switch_1"
      op: "Switch"
      input: "cond_4/map_2/while/map/while/Merge_1:output:0"
      input: "cond_4/map_2/while/map/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map_2/while/map/while/Merge_1"
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/while/Switch_2"
      op: "Switch"
      input: "cond_4/map_2/while/map/while/Merge_2:output:0"
      input: "cond_4/map_2/while/map/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map_2/while/map/while/Merge_2"
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/while/Switch_3"
      op: "Switch"
      input: "cond_4/map_2/while/map/while/Merge_3:output:0"
      input: "cond_4/map_2/while/map/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map_2/while/map/while/Merge_3"
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/while/Identity"
      op: "Identity"
      input: "cond_4/map_2/while/map/while/Switch:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/while/Identity_1"
      op: "Identity"
      input: "cond_4/map_2/while/map/while/Switch_1:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/while/Identity_2"
      op: "Identity"
      input: "cond_4/map_2/while/map/while/Switch_2:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/while/Identity_3"
      op: "Identity"
      input: "cond_4/map_2/while/map/while/Switch_3:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/while/add/y"
      op: "Const"
      input: "^cond_4/map_2/while/map/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/while/add"
      op: "Add"
      input: "cond_4/map_2/while/map/while/Identity:output:0"
      input: "cond_4/map_2/while/map/while/add/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/while/TensorArrayReadV3"
      op: "TensorArrayReadV3"
      input: "cond_4/map_2/while/map/while/TensorArrayReadV3/Enter:output:0"
      input: "cond_4/map_2/while/map/while/Identity_1:output:0"
      input: "cond_4/map_2/while/map/while/TensorArrayReadV3/Enter_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/while/TensorArrayReadV3/Enter"
      op: "Enter"
      input: "cond_4/map_2/while/map/TensorArray:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_4/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/while/TensorArrayReadV3/Enter_1"
      op: "Enter"
      input: "cond_4/map_2/while/map/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_4/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/while/TensorArrayWrite/TensorArrayWriteV3"
      op: "TensorArrayWriteV3"
      input: "cond_4/map_2/while/map/while/TensorArrayWrite/TensorArrayWriteV3/Enter:output:0"
      input: "cond_4/map_2/while/map/while/Identity_1:output:0"
      input: "cond_4/map_2/while/map/while/TensorArrayWrite/TensorArrayWriteV3/Enter_1:output:0"
      input: "cond_4/map_2/while/map/while/Identity_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map_2/while/TensorArrayReadV3"
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
      op: "Enter"
      input: "cond_4/map_2/while/map/TensorArray_1:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map_2/while/TensorArrayReadV3"
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_4/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/while/TensorArrayWrite/TensorArrayWriteV3/Enter_1"
      op: "Enter"
      input: "cond_4/map_2/while/TensorArrayReadV3:value:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map_2/while/TensorArrayReadV3"
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_4/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/while/TensorArrayWrite_1/TensorArrayWriteV3"
      op: "TensorArrayWriteV3"
      input: "cond_4/map_2/while/map/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter:output:0"
      input: "cond_4/map_2/while/map/while/Identity_1:output:0"
      input: "cond_4/map_2/while/map/while/TensorArrayReadV3:value:0"
      input: "cond_4/map_2/while/map/while/Identity_3:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map_2/while/map/while/TensorArrayReadV3"
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
      op: "Enter"
      input: "cond_4/map_2/while/map/TensorArray_2:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map_2/while/map/while/TensorArrayReadV3"
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_4/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/while/add_1/y"
      op: "Const"
      input: "^cond_4/map_2/while/map/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/while/add_1"
      op: "Add"
      input: "cond_4/map_2/while/map/while/Identity_1:output:0"
      input: "cond_4/map_2/while/map/while/add_1/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/while/NextIteration"
      op: "NextIteration"
      input: "cond_4/map_2/while/map/while/add:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/while/NextIteration_1"
      op: "NextIteration"
      input: "cond_4/map_2/while/map/while/add_1:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/while/NextIteration_2"
      op: "NextIteration"
      input: "cond_4/map_2/while/map/while/TensorArrayWrite/TensorArrayWriteV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/while/NextIteration_3"
      op: "NextIteration"
      input: "cond_4/map_2/while/map/while/TensorArrayWrite_1/TensorArrayWriteV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/while/Exit"
      op: "Exit"
      input: "cond_4/map_2/while/map/while/Switch:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/while/Exit_1"
      op: "Exit"
      input: "cond_4/map_2/while/map/while/Switch_1:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/while/Exit_2"
      op: "Exit"
      input: "cond_4/map_2/while/map/while/Switch_2:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/while/Exit_3"
      op: "Exit"
      input: "cond_4/map_2/while/map/while/Switch_3:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/TensorArrayStack/TensorArraySizeV3"
      op: "TensorArraySizeV3"
      input: "cond_4/map_2/while/map/TensorArray_1:handle:0"
      input: "cond_4/map_2/while/map/while/Exit_2:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map_2/while/map/TensorArray_1"
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/TensorArrayStack/range/start"
      op: "Const"
      input: "^cond_4/map_2/while/Identity"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map_2/while/map/TensorArray_1"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/TensorArrayStack/range/delta"
      op: "Const"
      input: "^cond_4/map_2/while/Identity"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map_2/while/map/TensorArray_1"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/TensorArrayStack/range"
      op: "Range"
      input: "cond_4/map_2/while/map/TensorArrayStack/range/start:output:0"
      input: "cond_4/map_2/while/map/TensorArrayStack/TensorArraySizeV3:size:0"
      input: "cond_4/map_2/while/map/TensorArrayStack/range/delta:output:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map_2/while/map/TensorArray_1"
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/TensorArrayStack/TensorArrayGatherV3"
      op: "TensorArrayGatherV3"
      input: "cond_4/map_2/while/map/TensorArray_1:handle:0"
      input: "cond_4/map_2/while/map/TensorArrayStack/range:output:0"
      input: "cond_4/map_2/while/map/while/Exit_2:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map_2/while/map/TensorArray_1"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/TensorArrayStack_1/TensorArraySizeV3"
      op: "TensorArraySizeV3"
      input: "cond_4/map_2/while/map/TensorArray_2:handle:0"
      input: "cond_4/map_2/while/map/while/Exit_3:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map_2/while/map/TensorArray_2"
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/TensorArrayStack_1/range/start"
      op: "Const"
      input: "^cond_4/map_2/while/Identity"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map_2/while/map/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/TensorArrayStack_1/range/delta"
      op: "Const"
      input: "^cond_4/map_2/while/Identity"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map_2/while/map/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/TensorArrayStack_1/range"
      op: "Range"
      input: "cond_4/map_2/while/map/TensorArrayStack_1/range/start:output:0"
      input: "cond_4/map_2/while/map/TensorArrayStack_1/TensorArraySizeV3:size:0"
      input: "cond_4/map_2/while/map/TensorArrayStack_1/range/delta:output:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map_2/while/map/TensorArray_2"
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/map/TensorArrayStack_1/TensorArrayGatherV3"
      op: "TensorArrayGatherV3"
      input: "cond_4/map_2/while/map/TensorArray_2:handle:0"
      input: "cond_4/map_2/while/map/TensorArrayStack_1/range:output:0"
      input: "cond_4/map_2/while/map/while/Exit_3:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map_2/while/map/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/TensorArrayWrite/TensorArrayWriteV3"
      op: "TensorArrayWriteV3"
      input: "cond_4/map_2/while/TensorArrayWrite/TensorArrayWriteV3/Enter:output:0"
      input: "cond_4/map_2/while/Identity_1:output:0"
      input: "cond_4/map_2/while/map/TensorArrayStack/TensorArrayGatherV3:value:0"
      input: "cond_4/map_2/while/Identity_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map_2/while/map/TensorArray_1"
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
      op: "Enter"
      input: "cond_4/map_2/TensorArray_2:handle:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map_2/while/map/TensorArray_1"
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_4/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/TensorArrayWrite_1/TensorArrayWriteV3"
      op: "TensorArrayWriteV3"
      input: "cond_4/map_2/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter:output:0"
      input: "cond_4/map_2/while/Identity_1:output:0"
      input: "cond_4/map_2/while/map/TensorArrayStack_1/TensorArrayGatherV3:value:0"
      input: "cond_4/map_2/while/Identity_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map_2/while/map/TensorArray_2"
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
      op: "Enter"
      input: "cond_4/map_2/TensorArray_3:handle:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map_2/while/map/TensorArray_2"
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_4/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/add_1/y"
      op: "Const"
      input: "^cond_4/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/add_1"
      op: "Add"
      input: "cond_4/map_2/while/Identity_1:output:0"
      input: "cond_4/map_2/while/add_1/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/NextIteration"
      op: "NextIteration"
      input: "cond_4/map_2/while/add:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/NextIteration_1"
      op: "NextIteration"
      input: "cond_4/map_2/while/add_1:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/NextIteration_2"
      op: "NextIteration"
      input: "cond_4/map_2/while/TensorArrayWrite/TensorArrayWriteV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/NextIteration_3"
      op: "NextIteration"
      input: "cond_4/map_2/while/TensorArrayWrite_1/TensorArrayWriteV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/Exit"
      op: "Exit"
      input: "cond_4/map_2/while/Switch:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/Exit_1"
      op: "Exit"
      input: "cond_4/map_2/while/Switch_1:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/Exit_2"
      op: "Exit"
      input: "cond_4/map_2/while/Switch_2:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_4/map_2/while/Exit_3"
      op: "Exit"
      input: "cond_4/map_2/while/Switch_3:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_4/map_2/TensorArrayStack/TensorArraySizeV3"
      op: "TensorArraySizeV3"
      input: "cond_4/map_2/TensorArray_2:handle:0"
      input: "cond_4/map_2/while/Exit_2:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map_2/TensorArray_2"
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/TensorArrayStack/range/start"
      op: "Const"
      input: "^cond_4/switch_f"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map_2/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/TensorArrayStack/range/delta"
      op: "Const"
      input: "^cond_4/switch_f"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map_2/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/TensorArrayStack/range"
      op: "Range"
      input: "cond_4/map_2/TensorArrayStack/range/start:output:0"
      input: "cond_4/map_2/TensorArrayStack/TensorArraySizeV3:size:0"
      input: "cond_4/map_2/TensorArrayStack/range/delta:output:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map_2/TensorArray_2"
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/TensorArrayStack/TensorArrayGatherV3"
      op: "TensorArrayGatherV3"
      input: "cond_4/map_2/TensorArray_2:handle:0"
      input: "cond_4/map_2/TensorArrayStack/range:output:0"
      input: "cond_4/map_2/while/Exit_2:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map_2/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            dim {
              size: 10
            }
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/TensorArrayStack_1/TensorArraySizeV3"
      op: "TensorArraySizeV3"
      input: "cond_4/map_2/TensorArray_3:handle:0"
      input: "cond_4/map_2/while/Exit_3:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map_2/TensorArray_3"
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/TensorArrayStack_1/range/start"
      op: "Const"
      input: "^cond_4/switch_f"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map_2/TensorArray_3"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/TensorArrayStack_1/range/delta"
      op: "Const"
      input: "^cond_4/switch_f"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map_2/TensorArray_3"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/TensorArrayStack_1/range"
      op: "Range"
      input: "cond_4/map_2/TensorArrayStack_1/range/start:output:0"
      input: "cond_4/map_2/TensorArrayStack_1/TensorArraySizeV3:size:0"
      input: "cond_4/map_2/TensorArrayStack_1/range/delta:output:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map_2/TensorArray_3"
          }
        }
      }
    }
    node_def {
      name: "cond_4/map_2/TensorArrayStack_1/TensorArrayGatherV3"
      op: "TensorArrayGatherV3"
      input: "cond_4/map_2/TensorArray_3:handle:0"
      input: "cond_4/map_2/TensorArrayStack_1/range:output:0"
      input: "cond_4/map_2/while/Exit_3:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_4/map_2/TensorArray_3"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            dim {
              size: 10
            }
          }
        }
      }
    }
    node_def {
      name: "cond_4/transpose_1/a"
      op: "Pack"
      input: "cond_4/map_2/TensorArrayStack/TensorArrayGatherV3:value:0"
      input: "cond_4/map_2/TensorArrayStack_1/TensorArrayGatherV3:value:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "cond_4/transpose_1/perm"
      op: "Const"
      input: "^cond_4/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\002\000\000\000\001\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_4/transpose_1"
      op: "Transpose"
      input: "cond_4/transpose_1/a:output:0"
      input: "cond_4/transpose_1/perm:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/Reshape_2/shape"
      op: "Const"
      input: "^cond_4/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\004\001\000\000\002\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_4/Reshape_2"
      op: "Reshape"
      input: "cond_4/transpose_1:y:0"
      input: "cond_4/Reshape_2/shape:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_4/SparseTensor_1/values"
      op: "Const"
      input: "^cond_4/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 260
              }
            }
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
          }
        }
      }
    }
    node_def {
      name: "cond_4/SparseTensor_1/dense_shape"
      op: "Const"
      input: "^cond_4/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\032\000\000\000\000\000\000\000\270\013\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_4/SparseReorder"
      op: "SparseReorder"
      input: "cond_4/Reshape_2:output:0"
      input: "cond_4/SparseTensor_1/values:output:0"
      input: "cond_4/SparseTensor_1/dense_shape:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
    }
    node_def {
      name: "cond_4/SparseTensor_2/dense_shape"
      op: "Const"
      input: "^cond_4/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\032\000\000\000\000\000\000\000\270\013\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_4/SparseToDense_1/default_value"
      op: "Const"
      input: "^cond_4/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "0"
          }
        }
      }
    }
    node_def {
      name: "cond_4/SparseToDense_1"
      op: "SparseToDense"
      input: "cond_4/SparseReorder:output_indices:0"
      input: "cond_4/SparseTensor_2/dense_shape:output:0"
      input: "cond_4/SparseReorder:output_values:0"
      input: "cond_4/SparseToDense_1/default_value:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "cond_4/Merge"
      op: "Merge"
      input: "cond_4/SparseToDense_1:dense:0"
      input: "cond_4/SparseToDense:dense:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
    }
    node_def {
      name: "Const_5"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: ":"
          }
        }
      }
    }
    node_def {
      name: "StringSplit_5"
      op: "StringSplit"
      input: "DecodeCSV:output:5"
      input: "Const_5:output:0"
      device: "/device:CPU:0"
      attr {
        key: "skip_empty"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "Equal_5/x"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "d4"
          }
        }
      }
    }
    node_def {
      name: "Equal_5/y"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "w1"
          }
        }
      }
    }
    node_def {
      name: "Equal_5"
      op: "Equal"
      input: "Equal_5/x:output:0"
      input: "Equal_5/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
    }
    node_def {
      name: "cond_5/Switch"
      op: "Switch"
      input: "Equal_5:z:0"
      input: "Equal_5:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
    }
    node_def {
      name: "cond_5/switch_t"
      op: "Identity"
      input: "cond_5/Switch:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
    }
    node_def {
      name: "cond_5/switch_f"
      op: "Identity"
      input: "cond_5/Switch:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
    }
    node_def {
      name: "cond_5/pred_id"
      op: "Identity"
      input: "Equal_5:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
    }
    node_def {
      name: "cond_5/StringToNumber"
      op: "StringToNumber"
      input: "cond_5/StringToNumber/Switch:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "out_type"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_5/StringToNumber/Switch"
      op: "Switch"
      input: "StringSplit_5:values:0"
      input: "cond_5/pred_id:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@StringSplit_5"
          }
        }
      }
    }
    node_def {
      name: "cond_5/Reshape/shape"
      op: "Const"
      input: "^cond_5/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\032\000\000\000\002\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_5/Reshape"
      op: "Reshape"
      input: "cond_5/StringToNumber:output:0"
      input: "cond_5/Reshape/shape:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map/elem"
      op: "Const"
      input: "^cond_5/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 26
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\021\000\000\000\000\000\000\000\022\000\000\000\000\000\000\000\023\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\025\000\000\000\000\000\000\000\026\000\000\000\000\000\000\000\027\000\000\000\000\000\000\000\030\000\000\000\000\000\000\000\031\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_5/map/TensorArray/size"
      op: "Const"
      input: "^cond_5/switch_t"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_5/map/TensorArray"
      op: "TensorArrayV3"
      input: "cond_5/map/TensorArray/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_5/map/TensorArray_1/size"
      op: "Const"
      input: "^cond_5/switch_t"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_5/map/TensorArray_1"
      op: "TensorArrayV3"
      input: "cond_5/map/TensorArray_1/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_5/map/TensorArrayUnstack/Shape"
      op: "Const"
      input: "^cond_5/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_5/map/TensorArrayUnstack/strided_slice/stack"
      op: "Const"
      input: "^cond_5/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_5/map/TensorArrayUnstack/strided_slice/stack_1"
      op: "Const"
      input: "^cond_5/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_5/map/TensorArrayUnstack/strided_slice/stack_2"
      op: "Const"
      input: "^cond_5/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_5/map/TensorArrayUnstack/strided_slice"
      op: "StridedSlice"
      input: "cond_5/map/TensorArrayUnstack/Shape:output:0"
      input: "cond_5/map/TensorArrayUnstack/strided_slice/stack:output:0"
      input: "cond_5/map/TensorArrayUnstack/strided_slice/stack_1:output:0"
      input: "cond_5/map/TensorArrayUnstack/strided_slice/stack_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "cond_5/map/TensorArrayUnstack/range/start"
      op: "Const"
      input: "^cond_5/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_5/map/TensorArrayUnstack/range/delta"
      op: "Const"
      input: "^cond_5/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_5/map/TensorArrayUnstack/range"
      op: "Range"
      input: "cond_5/map/TensorArrayUnstack/range/start:output:0"
      input: "cond_5/map/TensorArrayUnstack/strided_slice:output:0"
      input: "cond_5/map/TensorArrayUnstack/range/delta:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
      op: "TensorArrayScatterV3"
      input: "cond_5/map/TensorArray:handle:0"
      input: "cond_5/map/TensorArrayUnstack/range:output:0"
      input: "cond_5/map/elem:output:0"
      input: "cond_5/map/TensorArray:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map/elem"
          }
        }
      }
    }
    node_def {
      name: "cond_5/map/TensorArrayUnstack_1/Shape"
      op: "Const"
      input: "^cond_5/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\032\000\000\000\002\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_5/map/TensorArrayUnstack_1/strided_slice/stack"
      op: "Const"
      input: "^cond_5/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_5/map/TensorArrayUnstack_1/strided_slice/stack_1"
      op: "Const"
      input: "^cond_5/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_5/map/TensorArrayUnstack_1/strided_slice/stack_2"
      op: "Const"
      input: "^cond_5/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_5/map/TensorArrayUnstack_1/strided_slice"
      op: "StridedSlice"
      input: "cond_5/map/TensorArrayUnstack_1/Shape:output:0"
      input: "cond_5/map/TensorArrayUnstack_1/strided_slice/stack:output:0"
      input: "cond_5/map/TensorArrayUnstack_1/strided_slice/stack_1:output:0"
      input: "cond_5/map/TensorArrayUnstack_1/strided_slice/stack_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "cond_5/map/TensorArrayUnstack_1/range/start"
      op: "Const"
      input: "^cond_5/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_5/map/TensorArrayUnstack_1/range/delta"
      op: "Const"
      input: "^cond_5/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_5/map/TensorArrayUnstack_1/range"
      op: "Range"
      input: "cond_5/map/TensorArrayUnstack_1/range/start:output:0"
      input: "cond_5/map/TensorArrayUnstack_1/strided_slice:output:0"
      input: "cond_5/map/TensorArrayUnstack_1/range/delta:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
      op: "TensorArrayScatterV3"
      input: "cond_5/map/TensorArray_1:handle:0"
      input: "cond_5/map/TensorArrayUnstack_1/range:output:0"
      input: "cond_5/Reshape:output:0"
      input: "cond_5/map/TensorArray_1:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/Reshape"
          }
        }
      }
    }
    node_def {
      name: "cond_5/map/Const"
      op: "Const"
      input: "^cond_5/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_5/map/TensorArray_2/size"
      op: "Const"
      input: "^cond_5/switch_t"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_5/map/TensorArray_2"
      op: "TensorArrayV3"
      input: "cond_5/map/TensorArray_2/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_5/map/TensorArray_3/size"
      op: "Const"
      input: "^cond_5/switch_t"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_5/map/TensorArray_3"
      op: "TensorArrayV3"
      input: "cond_5/map/TensorArray_3/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_5/map/while/maximum_iterations"
      op: "Const"
      input: "^cond_5/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_5/map/while/iteration_counter"
      op: "Const"
      input: "^cond_5/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_5/map/while/Enter"
      op: "Enter"
      input: "cond_5/map/while/iteration_counter:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_5/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_5/map/while/Enter_1"
      op: "Enter"
      input: "cond_5/map/Const:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_5/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_5/map/while/Enter_2"
      op: "Enter"
      input: "cond_5/map/TensorArray_2:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_5/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_5/map/while/Enter_3"
      op: "Enter"
      input: "cond_5/map/TensorArray_3:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_5/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_5/map/while/Merge"
      op: "Merge"
      input: "cond_5/map/while/Enter:output:0"
      input: "cond_5/map/while/NextIteration:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map/while/Merge_1"
      op: "Merge"
      input: "cond_5/map/while/Enter_1:output:0"
      input: "cond_5/map/while/NextIteration_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map/while/Merge_2"
      op: "Merge"
      input: "cond_5/map/while/Enter_2:output:0"
      input: "cond_5/map/while/NextIteration_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_5/map/while/Merge_3"
      op: "Merge"
      input: "cond_5/map/while/Enter_3:output:0"
      input: "cond_5/map/while/NextIteration_3:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_5/map/while/Less"
      op: "Less"
      input: "cond_5/map/while/Merge:output:0"
      input: "cond_5/map/while/Less/Enter:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map/while/Less/Enter"
      op: "Enter"
      input: "cond_5/map/while/maximum_iterations:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_5/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_5/map/while/Less_1/y"
      op: "Const"
      input: "^cond_5/map/while/Merge"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_5/map/while/Less_1"
      op: "Less"
      input: "cond_5/map/while/Merge_1:output:0"
      input: "cond_5/map/while/Less_1/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map/while/LogicalAnd"
      op: "LogicalAnd"
      input: "cond_5/map/while/Less:z:0"
      input: "cond_5/map/while/Less_1:z:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "cond_5/map/while/LoopCond"
      op: "LoopCond"
      input: "cond_5/map/while/LogicalAnd:z:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "cond_5/map/while/Switch"
      op: "Switch"
      input: "cond_5/map/while/Merge:output:0"
      input: "cond_5/map/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map/while/Merge"
          }
        }
      }
    }
    node_def {
      name: "cond_5/map/while/Switch_1"
      op: "Switch"
      input: "cond_5/map/while/Merge_1:output:0"
      input: "cond_5/map/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map/while/Merge_1"
          }
        }
      }
    }
    node_def {
      name: "cond_5/map/while/Switch_2"
      op: "Switch"
      input: "cond_5/map/while/Merge_2:output:0"
      input: "cond_5/map/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map/while/Merge_2"
          }
        }
      }
    }
    node_def {
      name: "cond_5/map/while/Switch_3"
      op: "Switch"
      input: "cond_5/map/while/Merge_3:output:0"
      input: "cond_5/map/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map/while/Merge_3"
          }
        }
      }
    }
    node_def {
      name: "cond_5/map/while/Identity"
      op: "Identity"
      input: "cond_5/map/while/Switch:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map/while/Identity_1"
      op: "Identity"
      input: "cond_5/map/while/Switch_1:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map/while/Identity_2"
      op: "Identity"
      input: "cond_5/map/while/Switch_2:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_5/map/while/Identity_3"
      op: "Identity"
      input: "cond_5/map/while/Switch_3:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_5/map/while/add/y"
      op: "Const"
      input: "^cond_5/map/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_5/map/while/add"
      op: "Add"
      input: "cond_5/map/while/Identity:output:0"
      input: "cond_5/map/while/add/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map/while/TensorArrayReadV3"
      op: "TensorArrayReadV3"
      input: "cond_5/map/while/TensorArrayReadV3/Enter:output:0"
      input: "cond_5/map/while/Identity_1:output:0"
      input: "cond_5/map/while/TensorArrayReadV3/Enter_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
    }
    node_def {
      name: "cond_5/map/while/TensorArrayReadV3/Enter"
      op: "Enter"
      input: "cond_5/map/TensorArray:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_5/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_5/map/while/TensorArrayReadV3/Enter_1"
      op: "Enter"
      input: "cond_5/map/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_5/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_5/map/while/TensorArrayReadV3_1"
      op: "TensorArrayReadV3"
      input: "cond_5/map/while/TensorArrayReadV3_1/Enter:output:0"
      input: "cond_5/map/while/Identity_1:output:0"
      input: "cond_5/map/while/TensorArrayReadV3_1/Enter_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_5/map/while/TensorArrayReadV3_1/Enter"
      op: "Enter"
      input: "cond_5/map/TensorArray_1:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_5/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_5/map/while/TensorArrayReadV3_1/Enter_1"
      op: "Enter"
      input: "cond_5/map/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_5/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_5/map/while/strided_slice/stack"
      op: "Const"
      input: "^cond_5/map/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_5/map/while/strided_slice/stack_1"
      op: "Const"
      input: "^cond_5/map/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_5/map/while/strided_slice/stack_2"
      op: "Const"
      input: "^cond_5/map/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_5/map/while/strided_slice"
      op: "StridedSlice"
      input: "cond_5/map/while/TensorArrayReadV3_1:value:0"
      input: "cond_5/map/while/strided_slice/stack:output:0"
      input: "cond_5/map/while/strided_slice/stack_1:output:0"
      input: "cond_5/map/while/strided_slice/stack_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "cond_5/map/while/ToInt64"
      op: "Cast"
      input: "cond_5/map/while/strided_slice:output:0"
      device: "/device:CPU:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "cond_5/map/while/TensorArrayWrite/TensorArrayWriteV3"
      op: "TensorArrayWriteV3"
      input: "cond_5/map/while/TensorArrayWrite/TensorArrayWriteV3/Enter:output:0"
      input: "cond_5/map/while/Identity_1:output:0"
      input: "cond_5/map/while/TensorArrayReadV3:value:0"
      input: "cond_5/map/while/Identity_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map/while/TensorArrayReadV3"
          }
        }
      }
    }
    node_def {
      name: "cond_5/map/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
      op: "Enter"
      input: "cond_5/map/TensorArray_2:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map/while/TensorArrayReadV3"
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_5/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_5/map/while/TensorArrayWrite_1/TensorArrayWriteV3"
      op: "TensorArrayWriteV3"
      input: "cond_5/map/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter:output:0"
      input: "cond_5/map/while/Identity_1:output:0"
      input: "cond_5/map/while/ToInt64:y:0"
      input: "cond_5/map/while/Identity_3:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map/while/ToInt64"
          }
        }
      }
    }
    node_def {
      name: "cond_5/map/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
      op: "Enter"
      input: "cond_5/map/TensorArray_3:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map/while/ToInt64"
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_5/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_5/map/while/add_1/y"
      op: "Const"
      input: "^cond_5/map/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_5/map/while/add_1"
      op: "Add"
      input: "cond_5/map/while/Identity_1:output:0"
      input: "cond_5/map/while/add_1/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map/while/NextIteration"
      op: "NextIteration"
      input: "cond_5/map/while/add:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map/while/NextIteration_1"
      op: "NextIteration"
      input: "cond_5/map/while/add_1:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map/while/NextIteration_2"
      op: "NextIteration"
      input: "cond_5/map/while/TensorArrayWrite/TensorArrayWriteV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_5/map/while/NextIteration_3"
      op: "NextIteration"
      input: "cond_5/map/while/TensorArrayWrite_1/TensorArrayWriteV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_5/map/while/Exit"
      op: "Exit"
      input: "cond_5/map/while/Switch:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map/while/Exit_1"
      op: "Exit"
      input: "cond_5/map/while/Switch_1:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map/while/Exit_2"
      op: "Exit"
      input: "cond_5/map/while/Switch_2:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_5/map/while/Exit_3"
      op: "Exit"
      input: "cond_5/map/while/Switch_3:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_5/map/TensorArrayStack/TensorArraySizeV3"
      op: "TensorArraySizeV3"
      input: "cond_5/map/TensorArray_2:handle:0"
      input: "cond_5/map/while/Exit_2:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map/TensorArray_2"
          }
        }
      }
    }
    node_def {
      name: "cond_5/map/TensorArrayStack/range/start"
      op: "Const"
      input: "^cond_5/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_5/map/TensorArrayStack/range/delta"
      op: "Const"
      input: "^cond_5/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_5/map/TensorArrayStack/range"
      op: "Range"
      input: "cond_5/map/TensorArrayStack/range/start:output:0"
      input: "cond_5/map/TensorArrayStack/TensorArraySizeV3:size:0"
      input: "cond_5/map/TensorArrayStack/range/delta:output:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map/TensorArray_2"
          }
        }
      }
    }
    node_def {
      name: "cond_5/map/TensorArrayStack/TensorArrayGatherV3"
      op: "TensorArrayGatherV3"
      input: "cond_5/map/TensorArray_2:handle:0"
      input: "cond_5/map/TensorArrayStack/range:output:0"
      input: "cond_5/map/while/Exit_2:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
          }
        }
      }
    }
    node_def {
      name: "cond_5/map/TensorArrayStack_1/TensorArraySizeV3"
      op: "TensorArraySizeV3"
      input: "cond_5/map/TensorArray_3:handle:0"
      input: "cond_5/map/while/Exit_3:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map/TensorArray_3"
          }
        }
      }
    }
    node_def {
      name: "cond_5/map/TensorArrayStack_1/range/start"
      op: "Const"
      input: "^cond_5/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map/TensorArray_3"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_5/map/TensorArrayStack_1/range/delta"
      op: "Const"
      input: "^cond_5/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map/TensorArray_3"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_5/map/TensorArrayStack_1/range"
      op: "Range"
      input: "cond_5/map/TensorArrayStack_1/range/start:output:0"
      input: "cond_5/map/TensorArrayStack_1/TensorArraySizeV3:size:0"
      input: "cond_5/map/TensorArrayStack_1/range/delta:output:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map/TensorArray_3"
          }
        }
      }
    }
    node_def {
      name: "cond_5/map/TensorArrayStack_1/TensorArrayGatherV3"
      op: "TensorArrayGatherV3"
      input: "cond_5/map/TensorArray_3:handle:0"
      input: "cond_5/map/TensorArrayStack_1/range:output:0"
      input: "cond_5/map/while/Exit_3:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map/TensorArray_3"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
          }
        }
      }
    }
    node_def {
      name: "cond_5/transpose/a"
      op: "Pack"
      input: "cond_5/map/TensorArrayStack/TensorArrayGatherV3:value:0"
      input: "cond_5/map/TensorArrayStack_1/TensorArrayGatherV3:value:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "cond_5/transpose/perm"
      op: "Const"
      input: "^cond_5/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_5/transpose"
      op: "Transpose"
      input: "cond_5/transpose/a:output:0"
      input: "cond_5/transpose/perm:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/AsString"
      op: "AsString"
      input: "cond_5/Reshape:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "fill"
        value {
          s: ""
        }
      }
      attr {
        key: "precision"
        value {
          i: -1
        }
      }
      attr {
        key: "scientific"
        value {
          b: false
        }
      }
      attr {
        key: "shortest"
        value {
          b: false
        }
      }
      attr {
        key: "width"
        value {
          i: -1
        }
      }
    }
    node_def {
      name: "cond_5/map_1/TensorArray/size"
      op: "Const"
      input: "^cond_5/switch_t"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_1/TensorArray"
      op: "TensorArrayV3"
      input: "cond_5/map_1/TensorArray/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_5/map_1/TensorArrayUnstack/Shape"
      op: "Const"
      input: "^cond_5/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\032\000\000\000\002\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_1/TensorArrayUnstack/strided_slice/stack"
      op: "Const"
      input: "^cond_5/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_1/TensorArrayUnstack/strided_slice/stack_1"
      op: "Const"
      input: "^cond_5/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_1/TensorArrayUnstack/strided_slice/stack_2"
      op: "Const"
      input: "^cond_5/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_1/TensorArrayUnstack/strided_slice"
      op: "StridedSlice"
      input: "cond_5/map_1/TensorArrayUnstack/Shape:output:0"
      input: "cond_5/map_1/TensorArrayUnstack/strided_slice/stack:output:0"
      input: "cond_5/map_1/TensorArrayUnstack/strided_slice/stack_1:output:0"
      input: "cond_5/map_1/TensorArrayUnstack/strided_slice/stack_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "cond_5/map_1/TensorArrayUnstack/range/start"
      op: "Const"
      input: "^cond_5/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_1/TensorArrayUnstack/range/delta"
      op: "Const"
      input: "^cond_5/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_1/TensorArrayUnstack/range"
      op: "Range"
      input: "cond_5/map_1/TensorArrayUnstack/range/start:output:0"
      input: "cond_5/map_1/TensorArrayUnstack/strided_slice:output:0"
      input: "cond_5/map_1/TensorArrayUnstack/range/delta:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
      op: "TensorArrayScatterV3"
      input: "cond_5/map_1/TensorArray:handle:0"
      input: "cond_5/map_1/TensorArrayUnstack/range:output:0"
      input: "cond_5/AsString:output:0"
      input: "cond_5/map_1/TensorArray:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/AsString"
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_1/Const"
      op: "Const"
      input: "^cond_5/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_1/TensorArray_1/size"
      op: "Const"
      input: "^cond_5/switch_t"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_1/TensorArray_1"
      op: "TensorArrayV3"
      input: "cond_5/map_1/TensorArray_1/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_5/map_1/while/maximum_iterations"
      op: "Const"
      input: "^cond_5/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_1/while/iteration_counter"
      op: "Const"
      input: "^cond_5/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_1/while/Enter"
      op: "Enter"
      input: "cond_5/map_1/while/iteration_counter:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_5/map_1/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_5/map_1/while/Enter_1"
      op: "Enter"
      input: "cond_5/map_1/Const:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_5/map_1/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_5/map_1/while/Enter_2"
      op: "Enter"
      input: "cond_5/map_1/TensorArray_1:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_5/map_1/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_5/map_1/while/Merge"
      op: "Merge"
      input: "cond_5/map_1/while/Enter:output:0"
      input: "cond_5/map_1/while/NextIteration:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map_1/while/Merge_1"
      op: "Merge"
      input: "cond_5/map_1/while/Enter_1:output:0"
      input: "cond_5/map_1/while/NextIteration_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map_1/while/Merge_2"
      op: "Merge"
      input: "cond_5/map_1/while/Enter_2:output:0"
      input: "cond_5/map_1/while/NextIteration_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_5/map_1/while/Less"
      op: "Less"
      input: "cond_5/map_1/while/Merge:output:0"
      input: "cond_5/map_1/while/Less/Enter:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map_1/while/Less/Enter"
      op: "Enter"
      input: "cond_5/map_1/while/maximum_iterations:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_5/map_1/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_5/map_1/while/Less_1/y"
      op: "Const"
      input: "^cond_5/map_1/while/Merge"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_1/while/Less_1"
      op: "Less"
      input: "cond_5/map_1/while/Merge_1:output:0"
      input: "cond_5/map_1/while/Less_1/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map_1/while/LogicalAnd"
      op: "LogicalAnd"
      input: "cond_5/map_1/while/Less:z:0"
      input: "cond_5/map_1/while/Less_1:z:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "cond_5/map_1/while/LoopCond"
      op: "LoopCond"
      input: "cond_5/map_1/while/LogicalAnd:z:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "cond_5/map_1/while/Switch"
      op: "Switch"
      input: "cond_5/map_1/while/Merge:output:0"
      input: "cond_5/map_1/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map_1/while/Merge"
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_1/while/Switch_1"
      op: "Switch"
      input: "cond_5/map_1/while/Merge_1:output:0"
      input: "cond_5/map_1/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map_1/while/Merge_1"
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_1/while/Switch_2"
      op: "Switch"
      input: "cond_5/map_1/while/Merge_2:output:0"
      input: "cond_5/map_1/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map_1/while/Merge_2"
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_1/while/Identity"
      op: "Identity"
      input: "cond_5/map_1/while/Switch:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map_1/while/Identity_1"
      op: "Identity"
      input: "cond_5/map_1/while/Switch_1:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map_1/while/Identity_2"
      op: "Identity"
      input: "cond_5/map_1/while/Switch_2:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_5/map_1/while/add/y"
      op: "Const"
      input: "^cond_5/map_1/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_1/while/add"
      op: "Add"
      input: "cond_5/map_1/while/Identity:output:0"
      input: "cond_5/map_1/while/add/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map_1/while/TensorArrayReadV3"
      op: "TensorArrayReadV3"
      input: "cond_5/map_1/while/TensorArrayReadV3/Enter:output:0"
      input: "cond_5/map_1/while/Identity_1:output:0"
      input: "cond_5/map_1/while/TensorArrayReadV3/Enter_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
    }
    node_def {
      name: "cond_5/map_1/while/TensorArrayReadV3/Enter"
      op: "Enter"
      input: "cond_5/map_1/TensorArray:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_5/map_1/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_5/map_1/while/TensorArrayReadV3/Enter_1"
      op: "Enter"
      input: "cond_5/map_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_5/map_1/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_5/map_1/while/strided_slice/stack"
      op: "Const"
      input: "^cond_5/map_1/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_1/while/strided_slice/stack_1"
      op: "Const"
      input: "^cond_5/map_1/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_1/while/strided_slice/stack_2"
      op: "Const"
      input: "^cond_5/map_1/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_1/while/strided_slice"
      op: "StridedSlice"
      input: "cond_5/map_1/while/TensorArrayReadV3:value:0"
      input: "cond_5/map_1/while/strided_slice/stack:output:0"
      input: "cond_5/map_1/while/strided_slice/stack_1:output:0"
      input: "cond_5/map_1/while/strided_slice/stack_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "cond_5/map_1/while/TensorArrayWrite/TensorArrayWriteV3"
      op: "TensorArrayWriteV3"
      input: "cond_5/map_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter:output:0"
      input: "cond_5/map_1/while/Identity_1:output:0"
      input: "cond_5/map_1/while/strided_slice:output:0"
      input: "cond_5/map_1/while/Identity_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map_1/while/strided_slice"
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
      op: "Enter"
      input: "cond_5/map_1/TensorArray_1:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map_1/while/strided_slice"
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_5/map_1/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_5/map_1/while/add_1/y"
      op: "Const"
      input: "^cond_5/map_1/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_1/while/add_1"
      op: "Add"
      input: "cond_5/map_1/while/Identity_1:output:0"
      input: "cond_5/map_1/while/add_1/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map_1/while/NextIteration"
      op: "NextIteration"
      input: "cond_5/map_1/while/add:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map_1/while/NextIteration_1"
      op: "NextIteration"
      input: "cond_5/map_1/while/add_1:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map_1/while/NextIteration_2"
      op: "NextIteration"
      input: "cond_5/map_1/while/TensorArrayWrite/TensorArrayWriteV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_5/map_1/while/Exit"
      op: "Exit"
      input: "cond_5/map_1/while/Switch:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map_1/while/Exit_1"
      op: "Exit"
      input: "cond_5/map_1/while/Switch_1:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map_1/while/Exit_2"
      op: "Exit"
      input: "cond_5/map_1/while/Switch_2:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_5/map_1/TensorArrayStack/TensorArraySizeV3"
      op: "TensorArraySizeV3"
      input: "cond_5/map_1/TensorArray_1:handle:0"
      input: "cond_5/map_1/while/Exit_2:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map_1/TensorArray_1"
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_1/TensorArrayStack/range/start"
      op: "Const"
      input: "^cond_5/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map_1/TensorArray_1"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_1/TensorArrayStack/range/delta"
      op: "Const"
      input: "^cond_5/switch_t"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map_1/TensorArray_1"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_1/TensorArrayStack/range"
      op: "Range"
      input: "cond_5/map_1/TensorArrayStack/range/start:output:0"
      input: "cond_5/map_1/TensorArrayStack/TensorArraySizeV3:size:0"
      input: "cond_5/map_1/TensorArrayStack/range/delta:output:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map_1/TensorArray_1"
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_1/TensorArrayStack/TensorArrayGatherV3"
      op: "TensorArrayGatherV3"
      input: "cond_5/map_1/TensorArray_1:handle:0"
      input: "cond_5/map_1/TensorArrayStack/range:output:0"
      input: "cond_5/map_1/while/Exit_2:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map_1/TensorArray_1"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
          }
        }
      }
    }
    node_def {
      name: "cond_5/SparseTensor/dense_shape"
      op: "Const"
      input: "^cond_5/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\032\000\000\000\000\000\000\000d\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_5/SparseToDense/default_value"
      op: "Const"
      input: "^cond_5/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "0"
          }
        }
      }
    }
    node_def {
      name: "cond_5/SparseToDense"
      op: "SparseToDense"
      input: "cond_5/transpose:y:0"
      input: "cond_5/SparseTensor/dense_shape:output:0"
      input: "cond_5/map_1/TensorArrayStack/TensorArrayGatherV3:value:0"
      input: "cond_5/SparseToDense/default_value:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "cond_5/StringToNumber_1"
      op: "StringToNumber"
      input: "cond_5/StringToNumber_1/Switch:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "out_type"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_5/StringToNumber_1/Switch"
      op: "Switch"
      input: "StringSplit_5:values:0"
      input: "cond_5/pred_id:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@StringSplit_5"
          }
        }
      }
    }
    node_def {
      name: "cond_5/Cast"
      op: "Cast"
      input: "cond_5/StringToNumber_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "cond_5/Reshape_1/shape"
      op: "Const"
      input: "^cond_5/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\032\000\000\000\n\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_5/Reshape_1"
      op: "Reshape"
      input: "cond_5/Cast:y:0"
      input: "cond_5/Reshape_1/shape:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map_2/elem"
      op: "Const"
      input: "^cond_5/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 26
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\021\000\000\000\000\000\000\000\022\000\000\000\000\000\000\000\023\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\025\000\000\000\000\000\000\000\026\000\000\000\000\000\000\000\027\000\000\000\000\000\000\000\030\000\000\000\000\000\000\000\031\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/TensorArray/size"
      op: "Const"
      input: "^cond_5/switch_f"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/TensorArray"
      op: "TensorArrayV3"
      input: "cond_5/map_2/TensorArray/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_5/map_2/TensorArray_1/size"
      op: "Const"
      input: "^cond_5/switch_f"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/TensorArray_1"
      op: "TensorArrayV3"
      input: "cond_5/map_2/TensorArray_1/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_5/map_2/TensorArrayUnstack/Shape"
      op: "Const"
      input: "^cond_5/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/TensorArrayUnstack/strided_slice/stack"
      op: "Const"
      input: "^cond_5/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/TensorArrayUnstack/strided_slice/stack_1"
      op: "Const"
      input: "^cond_5/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/TensorArrayUnstack/strided_slice/stack_2"
      op: "Const"
      input: "^cond_5/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/TensorArrayUnstack/strided_slice"
      op: "StridedSlice"
      input: "cond_5/map_2/TensorArrayUnstack/Shape:output:0"
      input: "cond_5/map_2/TensorArrayUnstack/strided_slice/stack:output:0"
      input: "cond_5/map_2/TensorArrayUnstack/strided_slice/stack_1:output:0"
      input: "cond_5/map_2/TensorArrayUnstack/strided_slice/stack_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "cond_5/map_2/TensorArrayUnstack/range/start"
      op: "Const"
      input: "^cond_5/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/TensorArrayUnstack/range/delta"
      op: "Const"
      input: "^cond_5/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/TensorArrayUnstack/range"
      op: "Range"
      input: "cond_5/map_2/TensorArrayUnstack/range/start:output:0"
      input: "cond_5/map_2/TensorArrayUnstack/strided_slice:output:0"
      input: "cond_5/map_2/TensorArrayUnstack/range/delta:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
      op: "TensorArrayScatterV3"
      input: "cond_5/map_2/TensorArray:handle:0"
      input: "cond_5/map_2/TensorArrayUnstack/range:output:0"
      input: "cond_5/map_2/elem:output:0"
      input: "cond_5/map_2/TensorArray:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map_2/elem"
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/TensorArrayUnstack_1/Shape"
      op: "Const"
      input: "^cond_5/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\032\000\000\000\n\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/TensorArrayUnstack_1/strided_slice/stack"
      op: "Const"
      input: "^cond_5/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/TensorArrayUnstack_1/strided_slice/stack_1"
      op: "Const"
      input: "^cond_5/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/TensorArrayUnstack_1/strided_slice/stack_2"
      op: "Const"
      input: "^cond_5/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/TensorArrayUnstack_1/strided_slice"
      op: "StridedSlice"
      input: "cond_5/map_2/TensorArrayUnstack_1/Shape:output:0"
      input: "cond_5/map_2/TensorArrayUnstack_1/strided_slice/stack:output:0"
      input: "cond_5/map_2/TensorArrayUnstack_1/strided_slice/stack_1:output:0"
      input: "cond_5/map_2/TensorArrayUnstack_1/strided_slice/stack_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "cond_5/map_2/TensorArrayUnstack_1/range/start"
      op: "Const"
      input: "^cond_5/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/TensorArrayUnstack_1/range/delta"
      op: "Const"
      input: "^cond_5/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/TensorArrayUnstack_1/range"
      op: "Range"
      input: "cond_5/map_2/TensorArrayUnstack_1/range/start:output:0"
      input: "cond_5/map_2/TensorArrayUnstack_1/strided_slice:output:0"
      input: "cond_5/map_2/TensorArrayUnstack_1/range/delta:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map_2/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
      op: "TensorArrayScatterV3"
      input: "cond_5/map_2/TensorArray_1:handle:0"
      input: "cond_5/map_2/TensorArrayUnstack_1/range:output:0"
      input: "cond_5/Reshape_1:output:0"
      input: "cond_5/map_2/TensorArray_1:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/Reshape_1"
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/Const"
      op: "Const"
      input: "^cond_5/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/TensorArray_2/size"
      op: "Const"
      input: "^cond_5/switch_f"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/TensorArray_2"
      op: "TensorArrayV3"
      input: "cond_5/map_2/TensorArray_2/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_5/map_2/TensorArray_3/size"
      op: "Const"
      input: "^cond_5/switch_f"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/TensorArray_3"
      op: "TensorArrayV3"
      input: "cond_5/map_2/TensorArray_3/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/maximum_iterations"
      op: "Const"
      input: "^cond_5/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/iteration_counter"
      op: "Const"
      input: "^cond_5/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/Enter"
      op: "Enter"
      input: "cond_5/map_2/while/iteration_counter:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_5/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/Enter_1"
      op: "Enter"
      input: "cond_5/map_2/Const:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_5/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/Enter_2"
      op: "Enter"
      input: "cond_5/map_2/TensorArray_2:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_5/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/Enter_3"
      op: "Enter"
      input: "cond_5/map_2/TensorArray_3:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_5/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/Merge"
      op: "Merge"
      input: "cond_5/map_2/while/Enter:output:0"
      input: "cond_5/map_2/while/NextIteration:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/Merge_1"
      op: "Merge"
      input: "cond_5/map_2/while/Enter_1:output:0"
      input: "cond_5/map_2/while/NextIteration_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/Merge_2"
      op: "Merge"
      input: "cond_5/map_2/while/Enter_2:output:0"
      input: "cond_5/map_2/while/NextIteration_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/Merge_3"
      op: "Merge"
      input: "cond_5/map_2/while/Enter_3:output:0"
      input: "cond_5/map_2/while/NextIteration_3:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/Less"
      op: "Less"
      input: "cond_5/map_2/while/Merge:output:0"
      input: "cond_5/map_2/while/Less/Enter:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/Less/Enter"
      op: "Enter"
      input: "cond_5/map_2/while/maximum_iterations:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_5/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/Less_1/y"
      op: "Const"
      input: "^cond_5/map_2/while/Merge"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/Less_1"
      op: "Less"
      input: "cond_5/map_2/while/Merge_1:output:0"
      input: "cond_5/map_2/while/Less_1/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/LogicalAnd"
      op: "LogicalAnd"
      input: "cond_5/map_2/while/Less:z:0"
      input: "cond_5/map_2/while/Less_1:z:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "cond_5/map_2/while/LoopCond"
      op: "LoopCond"
      input: "cond_5/map_2/while/LogicalAnd:z:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "cond_5/map_2/while/Switch"
      op: "Switch"
      input: "cond_5/map_2/while/Merge:output:0"
      input: "cond_5/map_2/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map_2/while/Merge"
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/Switch_1"
      op: "Switch"
      input: "cond_5/map_2/while/Merge_1:output:0"
      input: "cond_5/map_2/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map_2/while/Merge_1"
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/Switch_2"
      op: "Switch"
      input: "cond_5/map_2/while/Merge_2:output:0"
      input: "cond_5/map_2/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map_2/while/Merge_2"
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/Switch_3"
      op: "Switch"
      input: "cond_5/map_2/while/Merge_3:output:0"
      input: "cond_5/map_2/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map_2/while/Merge_3"
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/Identity"
      op: "Identity"
      input: "cond_5/map_2/while/Switch:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/Identity_1"
      op: "Identity"
      input: "cond_5/map_2/while/Switch_1:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/Identity_2"
      op: "Identity"
      input: "cond_5/map_2/while/Switch_2:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/Identity_3"
      op: "Identity"
      input: "cond_5/map_2/while/Switch_3:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/add/y"
      op: "Const"
      input: "^cond_5/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/add"
      op: "Add"
      input: "cond_5/map_2/while/Identity:output:0"
      input: "cond_5/map_2/while/add/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/TensorArrayReadV3"
      op: "TensorArrayReadV3"
      input: "cond_5/map_2/while/TensorArrayReadV3/Enter:output:0"
      input: "cond_5/map_2/while/Identity_1:output:0"
      input: "cond_5/map_2/while/TensorArrayReadV3/Enter_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/TensorArrayReadV3/Enter"
      op: "Enter"
      input: "cond_5/map_2/TensorArray:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_5/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/TensorArrayReadV3/Enter_1"
      op: "Enter"
      input: "cond_5/map_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_5/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/TensorArrayReadV3_1"
      op: "TensorArrayReadV3"
      input: "cond_5/map_2/while/TensorArrayReadV3_1/Enter:output:0"
      input: "cond_5/map_2/while/Identity_1:output:0"
      input: "cond_5/map_2/while/TensorArrayReadV3_1/Enter_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/TensorArrayReadV3_1/Enter"
      op: "Enter"
      input: "cond_5/map_2/TensorArray_1:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_5/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/TensorArrayReadV3_1/Enter_1"
      op: "Enter"
      input: "cond_5/map_2/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_5/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/TensorArray/size"
      op: "Const"
      input: "^cond_5/map_2/while/Identity"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 10
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/TensorArray"
      op: "TensorArrayV3"
      input: "cond_5/map_2/while/map/TensorArray/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/TensorArrayUnstack/Shape"
      op: "Const"
      input: "^cond_5/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 10
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/TensorArrayUnstack/strided_slice/stack"
      op: "Const"
      input: "^cond_5/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/TensorArrayUnstack/strided_slice/stack_1"
      op: "Const"
      input: "^cond_5/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/TensorArrayUnstack/strided_slice/stack_2"
      op: "Const"
      input: "^cond_5/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/TensorArrayUnstack/strided_slice"
      op: "StridedSlice"
      input: "cond_5/map_2/while/map/TensorArrayUnstack/Shape:output:0"
      input: "cond_5/map_2/while/map/TensorArrayUnstack/strided_slice/stack:output:0"
      input: "cond_5/map_2/while/map/TensorArrayUnstack/strided_slice/stack_1:output:0"
      input: "cond_5/map_2/while/map/TensorArrayUnstack/strided_slice/stack_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/TensorArrayUnstack/range/start"
      op: "Const"
      input: "^cond_5/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/TensorArrayUnstack/range/delta"
      op: "Const"
      input: "^cond_5/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/TensorArrayUnstack/range"
      op: "Range"
      input: "cond_5/map_2/while/map/TensorArrayUnstack/range/start:output:0"
      input: "cond_5/map_2/while/map/TensorArrayUnstack/strided_slice:output:0"
      input: "cond_5/map_2/while/map/TensorArrayUnstack/range/delta:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
      op: "TensorArrayScatterV3"
      input: "cond_5/map_2/while/map/TensorArray:handle:0"
      input: "cond_5/map_2/while/map/TensorArrayUnstack/range:output:0"
      input: "cond_5/map_2/while/TensorArrayReadV3_1:value:0"
      input: "cond_5/map_2/while/map/TensorArray:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map_2/while/TensorArrayReadV3_1"
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/Const"
      op: "Const"
      input: "^cond_5/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/TensorArray_1/size"
      op: "Const"
      input: "^cond_5/map_2/while/Identity"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 10
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/TensorArray_1"
      op: "TensorArrayV3"
      input: "cond_5/map_2/while/map/TensorArray_1/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/TensorArray_2/size"
      op: "Const"
      input: "^cond_5/map_2/while/Identity"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 10
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/TensorArray_2"
      op: "TensorArrayV3"
      input: "cond_5/map_2/while/map/TensorArray_2/size:output:0"
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/while/maximum_iterations"
      op: "Const"
      input: "^cond_5/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 10
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/while/iteration_counter"
      op: "Const"
      input: "^cond_5/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/while/Enter"
      op: "Enter"
      input: "cond_5/map_2/while/map/while/iteration_counter:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_5/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/while/Enter_1"
      op: "Enter"
      input: "cond_5/map_2/while/map/Const:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_5/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/while/Enter_2"
      op: "Enter"
      input: "cond_5/map_2/while/map/TensorArray_1:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_5/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/while/Enter_3"
      op: "Enter"
      input: "cond_5/map_2/while/map/TensorArray_2:flow:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_5/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/while/Merge"
      op: "Merge"
      input: "cond_5/map_2/while/map/while/Enter:output:0"
      input: "cond_5/map_2/while/map/while/NextIteration:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/while/Merge_1"
      op: "Merge"
      input: "cond_5/map_2/while/map/while/Enter_1:output:0"
      input: "cond_5/map_2/while/map/while/NextIteration_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/while/Merge_2"
      op: "Merge"
      input: "cond_5/map_2/while/map/while/Enter_2:output:0"
      input: "cond_5/map_2/while/map/while/NextIteration_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/while/Merge_3"
      op: "Merge"
      input: "cond_5/map_2/while/map/while/Enter_3:output:0"
      input: "cond_5/map_2/while/map/while/NextIteration_3:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/while/Less"
      op: "Less"
      input: "cond_5/map_2/while/map/while/Merge:output:0"
      input: "cond_5/map_2/while/map/while/Less/Enter:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/while/Less/Enter"
      op: "Enter"
      input: "cond_5/map_2/while/map/while/maximum_iterations:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_5/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/while/Less_1/y"
      op: "Const"
      input: "^cond_5/map_2/while/map/while/Merge"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 10
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/while/Less_1"
      op: "Less"
      input: "cond_5/map_2/while/map/while/Merge_1:output:0"
      input: "cond_5/map_2/while/map/while/Less_1/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/while/LogicalAnd"
      op: "LogicalAnd"
      input: "cond_5/map_2/while/map/while/Less:z:0"
      input: "cond_5/map_2/while/map/while/Less_1:z:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "cond_5/map_2/while/map/while/LoopCond"
      op: "LoopCond"
      input: "cond_5/map_2/while/map/while/LogicalAnd:z:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "cond_5/map_2/while/map/while/Switch"
      op: "Switch"
      input: "cond_5/map_2/while/map/while/Merge:output:0"
      input: "cond_5/map_2/while/map/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map_2/while/map/while/Merge"
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/while/Switch_1"
      op: "Switch"
      input: "cond_5/map_2/while/map/while/Merge_1:output:0"
      input: "cond_5/map_2/while/map/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map_2/while/map/while/Merge_1"
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/while/Switch_2"
      op: "Switch"
      input: "cond_5/map_2/while/map/while/Merge_2:output:0"
      input: "cond_5/map_2/while/map/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map_2/while/map/while/Merge_2"
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/while/Switch_3"
      op: "Switch"
      input: "cond_5/map_2/while/map/while/Merge_3:output:0"
      input: "cond_5/map_2/while/map/while/LoopCond:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map_2/while/map/while/Merge_3"
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/while/Identity"
      op: "Identity"
      input: "cond_5/map_2/while/map/while/Switch:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/while/Identity_1"
      op: "Identity"
      input: "cond_5/map_2/while/map/while/Switch_1:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/while/Identity_2"
      op: "Identity"
      input: "cond_5/map_2/while/map/while/Switch_2:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/while/Identity_3"
      op: "Identity"
      input: "cond_5/map_2/while/map/while/Switch_3:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/while/add/y"
      op: "Const"
      input: "^cond_5/map_2/while/map/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/while/add"
      op: "Add"
      input: "cond_5/map_2/while/map/while/Identity:output:0"
      input: "cond_5/map_2/while/map/while/add/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/while/TensorArrayReadV3"
      op: "TensorArrayReadV3"
      input: "cond_5/map_2/while/map/while/TensorArrayReadV3/Enter:output:0"
      input: "cond_5/map_2/while/map/while/Identity_1:output:0"
      input: "cond_5/map_2/while/map/while/TensorArrayReadV3/Enter_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/while/TensorArrayReadV3/Enter"
      op: "Enter"
      input: "cond_5/map_2/while/map/TensorArray:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_5/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/while/TensorArrayReadV3/Enter_1"
      op: "Enter"
      input: "cond_5/map_2/while/map/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_5/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/while/TensorArrayWrite/TensorArrayWriteV3"
      op: "TensorArrayWriteV3"
      input: "cond_5/map_2/while/map/while/TensorArrayWrite/TensorArrayWriteV3/Enter:output:0"
      input: "cond_5/map_2/while/map/while/Identity_1:output:0"
      input: "cond_5/map_2/while/map/while/TensorArrayWrite/TensorArrayWriteV3/Enter_1:output:0"
      input: "cond_5/map_2/while/map/while/Identity_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map_2/while/TensorArrayReadV3"
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
      op: "Enter"
      input: "cond_5/map_2/while/map/TensorArray_1:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map_2/while/TensorArrayReadV3"
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_5/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/while/TensorArrayWrite/TensorArrayWriteV3/Enter_1"
      op: "Enter"
      input: "cond_5/map_2/while/TensorArrayReadV3:value:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map_2/while/TensorArrayReadV3"
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_5/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/while/TensorArrayWrite_1/TensorArrayWriteV3"
      op: "TensorArrayWriteV3"
      input: "cond_5/map_2/while/map/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter:output:0"
      input: "cond_5/map_2/while/map/while/Identity_1:output:0"
      input: "cond_5/map_2/while/map/while/TensorArrayReadV3:value:0"
      input: "cond_5/map_2/while/map/while/Identity_3:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map_2/while/map/while/TensorArrayReadV3"
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
      op: "Enter"
      input: "cond_5/map_2/while/map/TensorArray_2:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map_2/while/map/while/TensorArrayReadV3"
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_5/map_2/while/map/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/while/add_1/y"
      op: "Const"
      input: "^cond_5/map_2/while/map/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/while/add_1"
      op: "Add"
      input: "cond_5/map_2/while/map/while/Identity_1:output:0"
      input: "cond_5/map_2/while/map/while/add_1/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/while/NextIteration"
      op: "NextIteration"
      input: "cond_5/map_2/while/map/while/add:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/while/NextIteration_1"
      op: "NextIteration"
      input: "cond_5/map_2/while/map/while/add_1:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/while/NextIteration_2"
      op: "NextIteration"
      input: "cond_5/map_2/while/map/while/TensorArrayWrite/TensorArrayWriteV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/while/NextIteration_3"
      op: "NextIteration"
      input: "cond_5/map_2/while/map/while/TensorArrayWrite_1/TensorArrayWriteV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/while/Exit"
      op: "Exit"
      input: "cond_5/map_2/while/map/while/Switch:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/while/Exit_1"
      op: "Exit"
      input: "cond_5/map_2/while/map/while/Switch_1:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/while/Exit_2"
      op: "Exit"
      input: "cond_5/map_2/while/map/while/Switch_2:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/while/Exit_3"
      op: "Exit"
      input: "cond_5/map_2/while/map/while/Switch_3:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/TensorArrayStack/TensorArraySizeV3"
      op: "TensorArraySizeV3"
      input: "cond_5/map_2/while/map/TensorArray_1:handle:0"
      input: "cond_5/map_2/while/map/while/Exit_2:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map_2/while/map/TensorArray_1"
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/TensorArrayStack/range/start"
      op: "Const"
      input: "^cond_5/map_2/while/Identity"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map_2/while/map/TensorArray_1"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/TensorArrayStack/range/delta"
      op: "Const"
      input: "^cond_5/map_2/while/Identity"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map_2/while/map/TensorArray_1"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/TensorArrayStack/range"
      op: "Range"
      input: "cond_5/map_2/while/map/TensorArrayStack/range/start:output:0"
      input: "cond_5/map_2/while/map/TensorArrayStack/TensorArraySizeV3:size:0"
      input: "cond_5/map_2/while/map/TensorArrayStack/range/delta:output:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map_2/while/map/TensorArray_1"
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/TensorArrayStack/TensorArrayGatherV3"
      op: "TensorArrayGatherV3"
      input: "cond_5/map_2/while/map/TensorArray_1:handle:0"
      input: "cond_5/map_2/while/map/TensorArrayStack/range:output:0"
      input: "cond_5/map_2/while/map/while/Exit_2:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map_2/while/map/TensorArray_1"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/TensorArrayStack_1/TensorArraySizeV3"
      op: "TensorArraySizeV3"
      input: "cond_5/map_2/while/map/TensorArray_2:handle:0"
      input: "cond_5/map_2/while/map/while/Exit_3:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map_2/while/map/TensorArray_2"
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/TensorArrayStack_1/range/start"
      op: "Const"
      input: "^cond_5/map_2/while/Identity"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map_2/while/map/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/TensorArrayStack_1/range/delta"
      op: "Const"
      input: "^cond_5/map_2/while/Identity"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map_2/while/map/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/TensorArrayStack_1/range"
      op: "Range"
      input: "cond_5/map_2/while/map/TensorArrayStack_1/range/start:output:0"
      input: "cond_5/map_2/while/map/TensorArrayStack_1/TensorArraySizeV3:size:0"
      input: "cond_5/map_2/while/map/TensorArrayStack_1/range/delta:output:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map_2/while/map/TensorArray_2"
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/map/TensorArrayStack_1/TensorArrayGatherV3"
      op: "TensorArrayGatherV3"
      input: "cond_5/map_2/while/map/TensorArray_2:handle:0"
      input: "cond_5/map_2/while/map/TensorArrayStack_1/range:output:0"
      input: "cond_5/map_2/while/map/while/Exit_3:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map_2/while/map/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/TensorArrayWrite/TensorArrayWriteV3"
      op: "TensorArrayWriteV3"
      input: "cond_5/map_2/while/TensorArrayWrite/TensorArrayWriteV3/Enter:output:0"
      input: "cond_5/map_2/while/Identity_1:output:0"
      input: "cond_5/map_2/while/map/TensorArrayStack/TensorArrayGatherV3:value:0"
      input: "cond_5/map_2/while/Identity_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map_2/while/map/TensorArray_1"
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
      op: "Enter"
      input: "cond_5/map_2/TensorArray_2:handle:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map_2/while/map/TensorArray_1"
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_5/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/TensorArrayWrite_1/TensorArrayWriteV3"
      op: "TensorArrayWriteV3"
      input: "cond_5/map_2/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter:output:0"
      input: "cond_5/map_2/while/Identity_1:output:0"
      input: "cond_5/map_2/while/map/TensorArrayStack_1/TensorArrayGatherV3:value:0"
      input: "cond_5/map_2/while/Identity_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map_2/while/map/TensorArray_2"
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
      op: "Enter"
      input: "cond_5/map_2/TensorArray_3:handle:0"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map_2/while/map/TensorArray_2"
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "cond_5/map_2/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 10
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/add_1/y"
      op: "Const"
      input: "^cond_5/map_2/while/Identity"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/add_1"
      op: "Add"
      input: "cond_5/map_2/while/Identity_1:output:0"
      input: "cond_5/map_2/while/add_1/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/NextIteration"
      op: "NextIteration"
      input: "cond_5/map_2/while/add:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/NextIteration_1"
      op: "NextIteration"
      input: "cond_5/map_2/while/add_1:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/NextIteration_2"
      op: "NextIteration"
      input: "cond_5/map_2/while/TensorArrayWrite/TensorArrayWriteV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/NextIteration_3"
      op: "NextIteration"
      input: "cond_5/map_2/while/TensorArrayWrite_1/TensorArrayWriteV3:flow_out:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/Exit"
      op: "Exit"
      input: "cond_5/map_2/while/Switch:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/Exit_1"
      op: "Exit"
      input: "cond_5/map_2/while/Switch_1:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/Exit_2"
      op: "Exit"
      input: "cond_5/map_2/while/Switch_2:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_5/map_2/while/Exit_3"
      op: "Exit"
      input: "cond_5/map_2/while/Switch_3:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "cond_5/map_2/TensorArrayStack/TensorArraySizeV3"
      op: "TensorArraySizeV3"
      input: "cond_5/map_2/TensorArray_2:handle:0"
      input: "cond_5/map_2/while/Exit_2:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map_2/TensorArray_2"
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/TensorArrayStack/range/start"
      op: "Const"
      input: "^cond_5/switch_f"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map_2/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/TensorArrayStack/range/delta"
      op: "Const"
      input: "^cond_5/switch_f"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map_2/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/TensorArrayStack/range"
      op: "Range"
      input: "cond_5/map_2/TensorArrayStack/range/start:output:0"
      input: "cond_5/map_2/TensorArrayStack/TensorArraySizeV3:size:0"
      input: "cond_5/map_2/TensorArrayStack/range/delta:output:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map_2/TensorArray_2"
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/TensorArrayStack/TensorArrayGatherV3"
      op: "TensorArrayGatherV3"
      input: "cond_5/map_2/TensorArray_2:handle:0"
      input: "cond_5/map_2/TensorArrayStack/range:output:0"
      input: "cond_5/map_2/while/Exit_2:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map_2/TensorArray_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            dim {
              size: 10
            }
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/TensorArrayStack_1/TensorArraySizeV3"
      op: "TensorArraySizeV3"
      input: "cond_5/map_2/TensorArray_3:handle:0"
      input: "cond_5/map_2/while/Exit_3:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map_2/TensorArray_3"
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/TensorArrayStack_1/range/start"
      op: "Const"
      input: "^cond_5/switch_f"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map_2/TensorArray_3"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/TensorArrayStack_1/range/delta"
      op: "Const"
      input: "^cond_5/switch_f"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map_2/TensorArray_3"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/TensorArrayStack_1/range"
      op: "Range"
      input: "cond_5/map_2/TensorArrayStack_1/range/start:output:0"
      input: "cond_5/map_2/TensorArrayStack_1/TensorArraySizeV3:size:0"
      input: "cond_5/map_2/TensorArrayStack_1/range/delta:output:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map_2/TensorArray_3"
          }
        }
      }
    }
    node_def {
      name: "cond_5/map_2/TensorArrayStack_1/TensorArrayGatherV3"
      op: "TensorArrayGatherV3"
      input: "cond_5/map_2/TensorArray_3:handle:0"
      input: "cond_5/map_2/TensorArrayStack_1/range:output:0"
      input: "cond_5/map_2/while/Exit_3:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@cond_5/map_2/TensorArray_3"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            dim {
              size: 10
            }
          }
        }
      }
    }
    node_def {
      name: "cond_5/transpose_1/a"
      op: "Pack"
      input: "cond_5/map_2/TensorArrayStack/TensorArrayGatherV3:value:0"
      input: "cond_5/map_2/TensorArrayStack_1/TensorArrayGatherV3:value:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "cond_5/transpose_1/perm"
      op: "Const"
      input: "^cond_5/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\002\000\000\000\001\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_5/transpose_1"
      op: "Transpose"
      input: "cond_5/transpose_1/a:output:0"
      input: "cond_5/transpose_1/perm:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/Reshape_2/shape"
      op: "Const"
      input: "^cond_5/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\004\001\000\000\002\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_5/Reshape_2"
      op: "Reshape"
      input: "cond_5/transpose_1:y:0"
      input: "cond_5/Reshape_2/shape:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "cond_5/SparseTensor_1/values"
      op: "Const"
      input: "^cond_5/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 260
              }
            }
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
            string_val: "1"
          }
        }
      }
    }
    node_def {
      name: "cond_5/SparseTensor_1/dense_shape"
      op: "Const"
      input: "^cond_5/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\032\000\000\000\000\000\000\000\270\013\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_5/SparseReorder"
      op: "SparseReorder"
      input: "cond_5/Reshape_2:output:0"
      input: "cond_5/SparseTensor_1/values:output:0"
      input: "cond_5/SparseTensor_1/dense_shape:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
    }
    node_def {
      name: "cond_5/SparseTensor_2/dense_shape"
      op: "Const"
      input: "^cond_5/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\032\000\000\000\000\000\000\000\270\013\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "cond_5/SparseToDense_1/default_value"
      op: "Const"
      input: "^cond_5/switch_f"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "0"
          }
        }
      }
    }
    node_def {
      name: "cond_5/SparseToDense_1"
      op: "SparseToDense"
      input: "cond_5/SparseReorder:output_indices:0"
      input: "cond_5/SparseTensor_2/dense_shape:output:0"
      input: "cond_5/SparseReorder:output_values:0"
      input: "cond_5/SparseToDense_1/default_value:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "cond_5/Merge"
      op: "Merge"
      input: "cond_5/SparseToDense_1:dense:0"
      input: "cond_5/SparseToDense:dense:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
    }
    node_def {
      name: "stack_0"
      op: "Pack"
      input: "DecodeCSV:output:6"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 1
        }
      }
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "axis"
        value {
          i: 1
        }
      }
    }
    ret {
      key: "cond_1_merge"
      value: "cond_1/Merge:output:0"
    }
    ret {
      key: "cond_2_merge"
      value: "cond_2/Merge:output:0"
    }
    ret {
      key: "cond_3_merge"
      value: "cond_3/Merge:output:0"
    }
    ret {
      key: "cond_4_merge"
      value: "cond_4/Merge:output:0"
    }
    ret {
      key: "cond_5_merge"
      value: "cond_5/Merge:output:0"
    }
    ret {
      key: "cond_merge"
      value: "cond/Merge:output:0"
    }
    ret {
      key: "stack"
      value: "stack_0:output:0"
    }
  }
}
versions {
  producer: 27
  min_consumer: 12
}
